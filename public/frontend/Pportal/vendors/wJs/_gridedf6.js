
var jqxBaseFramework = window.minQuery || window.jQuery; (function (a) { a.jqx = a.jqx || {}; a.jqx.define = function (b, c, d) { b[c] = function () { if (this.baseType) { this.base = new b[this.baseType](); this.base.defineInstance() } this.defineInstance() }; b[c].prototype.defineInstance = function () { }; b[c].prototype.base = null; b[c].prototype.baseType = undefined; if (d && b[d]) { b[c].prototype.baseType = d } }; a.jqx.invoke = function (e, d) { if (d.length == 0) { return } var f = typeof (d) == Array || d.length > 0 ? d[0] : d; var c = typeof (d) == Array || d.length > 1 ? Array.prototype.slice.call(d, 1) : a({}).toArray(); while (e[f] == undefined && e.base != null) { if (e[f] != undefined && a.isFunction(e[f])) { return e[f].apply(e, c) } if (typeof f == "string") { var b = f.toLowerCase(); if (e[b] != undefined && a.isFunction(e[b])) { return e[b].apply(e, c) } } e = e.base } if (e[f] != undefined && a.isFunction(e[f])) { return e[f].apply(e, c) } if (typeof f == "string") { var b = f.toLowerCase(); if (e[b] != undefined && a.isFunction(e[b])) { return e[b].apply(e, c) } } return }; a.jqx.hasProperty = function (c, b) { if (typeof (b) == "object") { for (var e in b) { var d = c; while (d) { if (d.hasOwnProperty(e)) { return true } if (d.hasOwnProperty(e.toLowerCase())) { return true } d = d.base } return false } } else { while (c) { if (c.hasOwnProperty(b)) { return true } if (c.hasOwnProperty(b.toLowerCase())) { return true } c = c.base } } return false }; a.jqx.hasFunction = function (e, d) { if (d.length == 0) { return false } if (e == undefined) { return false } var f = typeof (d) == Array || d.length > 0 ? d[0] : d; var c = typeof (d) == Array || d.length > 1 ? Array.prototype.slice.call(d, 1) : {}; while (e[f] == undefined && e.base != null) { if (e[f] && a.isFunction(e[f])) { return true } if (typeof f == "string") { var b = f.toLowerCase(); if (e[b] && a.isFunction(e[b])) { return true } } e = e.base } if (e[f] && a.isFunction(e[f])) { return true } if (typeof f == "string") { var b = f.toLowerCase(); if (e[b] && a.isFunction(e[b])) { return true } } return false }; a.jqx.isPropertySetter = function (c, b) { if (b.length == 1 && typeof (b[0]) == "object") { return true } if (b.length == 2 && typeof (b[0]) == "string" && !a.jqx.hasFunction(c, b)) { return true } return false }; a.jqx.validatePropertySetter = function (f, d, b) { if (!a.jqx.propertySetterValidation) { return true } if (d.length == 1 && typeof (d[0]) == "object") { for (var e in d[0]) { var g = f; while (!g.hasOwnProperty(e) && g.base) { g = g.base } if (!g || !g.hasOwnProperty(e)) { if (!b) { var c = g.hasOwnProperty(e.toString().toLowerCase()); if (!c) { throw "Invalid property: " + e } else { return true } } return false } } return true } if (d.length != 2) { if (!b) { throw "Invalid property: " + d.length >= 0 ? d[0] : "" } return false } while (!f.hasOwnProperty(d[0]) && f.base) { f = f.base } if (!f || !f.hasOwnProperty(d[0])) { if (!b) { throw "Invalid property: " + d[0] } return false } return true }; a.jqx.set = function (c, b) { if (b.length == 1 && typeof (b[0]) == "object") { a.each(b[0], function (d, e) { var f = c; while (!f.hasOwnProperty(d) && f.base != null) { f = f.base } if (f.hasOwnProperty(d)) { a.jqx.setvalueraiseevent(f, d, e) } else { if (f.hasOwnProperty(d.toLowerCase())) { a.jqx.setvalueraiseevent(f, d.toLowerCase(), e) } else { if (a.jqx.propertySetterValidation) { throw "jqxCore: invalid property '" + d + "'" } } } }) } else { if (b.length == 2) { while (!c.hasOwnProperty(b[0]) && c.base) { c = c.base } if (c.hasOwnProperty(b[0])) { a.jqx.setvalueraiseevent(c, b[0], b[1]) } else { if (c.hasOwnProperty(b[0].toLowerCase())) { a.jqx.setvalueraiseevent(c, b[0].toLowerCase(), b[1]) } else { if (a.jqx.propertySetterValidation) { throw "jqxCore: invalid property '" + b[0] + "'" } } } } } }; a.jqx.setvalueraiseevent = function (c, d, e) { var b = c[d]; c[d] = e; if (!c.isInitialized) { return } if (c.propertyChangedHandler != undefined) { c.propertyChangedHandler(c, d, b, e) } if (c.propertyChangeMap != undefined && c.propertyChangeMap[d] != undefined) { c.propertyChangeMap[d](c, d, b, e) } }; a.jqx.get = function (e, d) { if (d == undefined || d == null) { return undefined } if (e.propertyMap) { var c = e.propertyMap(d); if (c != null) { return c } } if (e.hasOwnProperty(d)) { return e[d] } if (e.hasOwnProperty(d.toLowerCase())) { return e[d.toLowerCase()] } var b = undefined; if (typeof (d) == Array) { if (d.length != 1) { return undefined } b = d[0] } else { if (typeof (d) == "string") { b = d } } while (!e.hasOwnProperty(b) && e.base) { e = e.base } if (e) { return e[b] } return undefined }; a.jqx.serialize = function (e) { var b = ""; if (a.isArray(e)) { b = "["; for (var d = 0; d < e.length; d++) { if (d > 0) { b += ", " } b += a.jqx.serialize(e[d]) } b += "]" } else { if (typeof (e) == "object") { b = "{"; var c = 0; for (var d in e) { if (c++ > 0) { b += ", " } b += d + ": " + a.jqx.serialize(e[d]) } b += "}" } else { b = e.toString() } } return b }; a.jqx.propertySetterValidation = true; a.jqx.jqxWidgetProxy = function (g, c, b) { var d = a(c); var f = a.data(c, g); if (f == undefined) { return undefined } var e = f.instance; if (a.jqx.hasFunction(e, b)) { return a.jqx.invoke(e, b) } if (a.jqx.isPropertySetter(e, b)) { if (a.jqx.validatePropertySetter(e, b)) { a.jqx.set(e, b); return undefined } } else { if (typeof (b) == "object" && b.length == 0) { return } else { if (typeof (b) == "object" && b.length == 1 && a.jqx.hasProperty(e, b[0])) { return a.jqx.get(e, b[0]) } else { if (typeof (b) == "string" && a.jqx.hasProperty(e, b[0])) { return a.jqx.get(e, b) } } } } throw "jqxCore: Invalid parameter '" + a.jqx.serialize(b) + "' does not exist."; return undefined }; a.jqx.applyWidget = function (c, d, k, l) { var g = false; try { g = window.MSApp != undefined } catch (f) { } var m = a(c); if (!l) { l = new a.jqx["_" + d]() } else { l.host = m; l.element = c } if (c.id == "") { c.id = a.jqx.utilities.createId() } var j = { host: m, element: c, instance: l }; l.widgetName = d; a.data(c, d, j); a.data(c, "jqxWidget", j.instance); var h = new Array(); var l = j.instance; while (l) { l.isInitialized = false; h.push(l); l = l.base } h.reverse(); h[0].theme = a.jqx.theme || ""; a.jqx.jqxWidgetProxy(d, c, k); for (var b in h) { l = h[b]; if (b == 0) { l.host = m; l.element = c; l.WinJS = g } if (l != undefined) { if (l.definedInstance) { l.definedInstance() } if (l.createInstance != null) { if (g) { MSApp.execUnsafeLocalFunction(function () { l.createInstance(k) }) } else { l.createInstance(k) } } } } for (var b in h) { if (h[b] != undefined) { h[b].isInitialized = true } } if (g) { MSApp.execUnsafeLocalFunction(function () { j.instance.refresh(true) }) } else { j.instance.refresh(true) } }; a.jqx.jqxWidget = function (b, d, j) { var c = false; try { jqxArgs = Array.prototype.slice.call(j, 0) } catch (h) { jqxArgs = "" } try { c = window.MSApp != undefined } catch (h) { } var g = b; var f = ""; if (d) { f = "_" + d } a.jqx.define(a.jqx, "_" + g, f); a.fn[g] = function () { var e = Array.prototype.slice.call(arguments, 0); if (e.length == 0 || (e.length == 1 && typeof (e[0]) == "object")) { if (this.length == 0) { if (this.selector) { throw new Error("Invalid Selector - " + this.selector + "! Please, check whether the used ID or CSS Class name is correct.") } else { throw new Error("Invalid Selector! Please, check whether the used ID or CSS Class name is correct.") } } return this.each(function () { var n = a(this); var m = this; var o = a.data(m, g); if (o == null) { a.jqx.applyWidget(m, g, e, undefined) } else { a.jqx.jqxWidgetProxy(g, this, e) } }) } else { if (this.length == 0) { if (this.selector) { throw new Error("Invalid Selector - " + this.selector + "! Please, check whether the used ID or CSS Class name is correct.") } else { throw new Error("Invalid Selector! Please, check whether the used ID or CSS Class name is correct.") } } var l = null; var k = 0; this.each(function () { var m = a.jqx.jqxWidgetProxy(g, this, e); if (k == 0) { l = m; k++ } else { if (k == 1) { var n = []; n.push(l); l = n } l.push(m) } }) } return l }; try { a.extend(a.jqx["_" + g].prototype, Array.prototype.slice.call(j, 0)[0]) } catch (h) { } a.extend(a.jqx["_" + g].prototype, { toThemeProperty: function (e, k) { return a.jqx.toThemeProperty(this, e, k) } }); a.jqx["_" + g].prototype.refresh = function () { if (this.base) { this.base.refresh(true) } }; a.jqx["_" + g].prototype.createInstance = function () { }; a.jqx["_" + g].prototype.applyTo = function (l, k) { if (!(k instanceof Array)) { var e = []; e.push(k); k = e } a.jqx.applyWidget(l, g, k, this) }; a.jqx["_" + g].prototype.getInstance = function () { return this }; a.jqx["_" + g].prototype.propertyChangeMap = {}; a.jqx["_" + g].prototype.addHandler = function (m, e, k, l) { a.jqx.addHandler(m, e, k, l) }; a.jqx["_" + g].prototype.removeHandler = function (l, e, k) { a.jqx.removeHandler(l, e, k) } }; a.jqx.toThemeProperty = function (c, d, h) { if (c.theme == "") { return d } var g = d.split(" "); var b = ""; for (var f = 0; f < g.length; f++) { if (f > 0) { b += " " } var e = g[f]; if (h != null && h) { b += e + "-" + c.theme } else { b += e + " " + e + "-" + c.theme } } return b }; a.jqx.addHandler = function (g, h, e, f) { var c = h.split(" "); for (var b = 0; b < c.length; b++) { var d = c[b]; if (window.addEventListener) { switch (d) { case "mousewheel": if (a.jqx.browser.mozilla) { g[0].addEventListener("DOMMouseScroll", e, false) } else { g[0].addEventListener("mousewheel", e, false) } continue; case "mousemove": if (!f) { g[0].addEventListener("mousemove", e, false); continue } break } } if (f == undefined || f == null) { if (g.on) { g.on(d, e) } else { g.bind(d, e) } } else { if (g.on) { g.on(d, f, e) } else { g.bind(d, f, e) } } } }; a.jqx.removeHandler = function (f, g, e) { if (!g) { return } var c = g.split(" "); for (var b = 0; b < c.length; b++) { var d = c[b]; if (window.removeEventListener) { switch (d) { case "mousewheel": if (a.jqx.browser.mozilla) { f[0].removeEventListener("DOMMouseScroll", e, false) } else { f[0].removeEventListener("mousewheel", e, false) } continue; case "mousemove": if (e) { f[0].removeEventListener("mousemove", e, false); continue } break } } if (d == undefined) { if (f.off) { f.off() } else { f.unbind() } continue } if (e == undefined) { if (f.off) { f.off(d) } else { f.unbind(d) } } else { if (f.off) { f.off(d, e) } else { f.unbind(d, e) } } } }; a.jqx.theme = a.jqx.theme || ""; a.jqx.resizeDelay = a.jqx.resizeDelay || 10; a.jqx.ready = function () { a(window).trigger("jqxReady") }; a.jqx.init = function () { a.each(arguments[0], function (b, c) { if (b == "theme") { a.jqx.theme = c } if (b == "scrollBarSize") { a.jqx.utilities.scrollBarSize = c } if (b == "touchScrollBarSize") { a.jqx.utilities.touchScrollBarSize = c } if (b == "scrollBarButtonsVisibility") { a.jqx.utilities.scrollBarButtonsVisibility = c } }) }; a.jqx.utilities = a.jqx.utilities || {}; a.extend(a.jqx.utilities, { scrollBarSize: 15, touchScrollBarSize: 10, scrollBarButtonsVisibility: "visible", createId: function () { var b = function () { return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1) }; return "jqxWidget" + b() + b() }, setTheme: function (f, g, e) { if (typeof e === "undefined") { return } var h = e[0].className.split(" "), b = [], j = [], d = e.children(); for (var c = 0; c < h.length; c += 1) { if (h[c].indexOf(f) >= 0) { if (f.length > 0) { b.push(h[c]); j.push(h[c].replace(f, g)) } else { j.push(h[c] + "-" + g) } } } this._removeOldClasses(b, e); this._addNewClasses(j, e); for (var c = 0; c < d.length; c += 1) { this.setTheme(f, g, a(d[c])) } }, _removeOldClasses: function (d, c) { for (var b = 0; b < d.length; b += 1) { c.removeClass(d[b]) } }, _addNewClasses: function (d, c) { for (var b = 0; b < d.length; b += 1) { c.addClass(d[b]) } }, getOffset: function (b) { var d = a.jqx.mobile.getLeftPos(b[0]); var c = a.jqx.mobile.getTopPos(b[0]); return { top: c, left: d } }, resize: function (d, m, l, k) { if (k === undefined) { k = true } var g = -1; var f = this; var c = function (o) { if (!f.hiddenWidgets) { return -1 } var p = -1; for (var n = 0; n < f.hiddenWidgets.length; n++) { if (o.id) { if (f.hiddenWidgets[n].id == o.id) { p = n; break } } else { if (f.hiddenWidgets[n].id == o[0].id) { p = n; break } } } return p }; if (this.resizeHandlers) { for (var e = 0; e < this.resizeHandlers.length; e++) { if (d.id) { if (this.resizeHandlers[e].id == d.id) { g = e; break } } else { if (this.resizeHandlers[e].id == d[0].id) { g = e; break } } } if (l === true) { if (g != -1) { this.resizeHandlers.splice(g, 1) } if (this.resizeHandlers.length == 0) { var j = a(window); if (j.off) { j.off("resize.jqx"); j.off("orientationchange.jqx"); j.off("orientationchanged.jqx") } else { j.unbind("resize.jqx"); j.unbind("orientationchange.jqx"); j.unbind("orientationchanged.jqx") } this.resizeHandlers = null } var b = c(d); if (b != -1 && this.hiddenWidgets) { this.hiddenWidgets.splice(b, 1) } return } } else { if (l === true) { var b = c(d); if (b != -1 && this.hiddenWidgets) { this.hiddenWidgets.splice(b, 1) } return } } var f = this; var h = function (p, w) { if (!f.resizeHandlers) { return } var x = function (B) { var A = -1; var C = B.parentNode; while (C) { A++; C = C.parentNode } return A }; var o = function (D, B) { if (!D.widget || !B.widget) { return 0 } var C = x(D.widget[0]); var A = x(B.widget[0]); try { if (C < A) { return -1 } if (C > A) { return 1 } } catch (E) { var F = E } return 0 }; f.hiddenWidgets = new Array(); f.resizeHandlers.sort(o); for (var t = 0; t < f.resizeHandlers.length; t++) { var z = f.resizeHandlers[t]; var v = z.widget; var s = z.data; if (!s) { continue } if (!s.jqxWidget) { continue } var n = s.jqxWidget.width; var y = s.jqxWidget.height; if (s.jqxWidget.base) { if (n == undefined) { n = s.jqxWidget.base.width } if (y == undefined) { y = s.jqxWidget.base.height } } if (n === undefined && y === undefined) { n = s.jqxWidget.element.style.width; y = s.jqxWidget.element.style.height } var u = false; if (n != null && n.toString().indexOf("%") != -1) { u = true } if (y != null && y.toString().indexOf("%") != -1) { u = true } if (a.jqx.isHidden(v)) { if (c(v) === -1) { if (u || p === true) { if (z.data.nestedWidget !== true) { f.hiddenWidgets.push(z) } } } } else { if (p === undefined || p !== true) { if (u) { z.callback(w); if (f.hiddenWidgets.indexOf(z) >= 0) { f.hiddenWidgets.splice(f.hiddenWidgets.indexOf(z), 1) } } if (s.jqxWidget.element) { var q = s.jqxWidget.element.className; if (q.indexOf("dropdownlist") >= 0 || q.indexOf("datetimeinput") >= 0 || q.indexOf("combobox") >= 0 || q.indexOf("menu") >= 0) { if (s.jqxWidget.isOpened) { var r = s.jqxWidget.isOpened(); if (r) { s.jqxWidget.close() } } } } } } } if (f.hiddenWidgets.length > 0) { f.hiddenWidgets.sort(o); if (f.__resizeInterval) { clearInterval(f.__resizeInterval) } f.__resizeInterval = setInterval(function () { var B = false; var D = new Array(); for (var C = 0; C < f.hiddenWidgets.length; C++) { var A = f.hiddenWidgets[C]; if (a.jqx.isHidden(A.widget)) { B = true; D.push(A) } else { if (A.callback) { A.callback(w) } } } f.hiddenWidgets = D; if (!B) { clearInterval(f.__resizeInterval) } }, 100) } }; if (!this.resizeHandlers) { this.resizeHandlers = new Array(); var j = a(window); if (j.on) { this._resizeTimer = null; j.on("resize.jqx", function (n) { if (f._resizeTimer != undefined) { clearTimeout(f._resizeTimer) } f._resizeTimer = setTimeout(function () { h(null, "resize") }, a.jqx.resizeDelay) }); j.on("orientationchange.jqx", function (n) { h(null, "orientationchange") }); j.on("orientationchanged.jqx", function (n) { h(null, "orientationchange") }) } else { j.bind("resize.jqx", function (n) { h(null, "orientationchange") }); j.bind("orientationchange.jqx", function (n) { h(null, "orientationchange") }); j.bind("orientationchanged.jqx", function (n) { h(null, "orientationchange") }) } } if (k) { if (g === -1) { this.resizeHandlers.push({ id: d[0].id, widget: d, callback: m, data: d.data() }) } } if (a.jqx.isHidden(d) && k === true) { h(true) } a.jqx.resize = function () { h(null, "resize") } }, html: function (c, d) { if (!a(c).on) { return a(c).html(d) } try { return a.access(c, function (s) { var f = c[0] || {}, m = 0, j = c.length; if (s === undefined) { return f.nodeType === 1 ? f.innerHTML.replace(rinlinejQuery, "") : undefined } var r = /<(?:script|style|link)/i, n = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", h = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, p = /<([\w:]+)/, g = /<(?:script|object|embed|option|style)/i, k = new RegExp("<(?:" + n + ")[\\s/>]", "i"), q = /^\s+/, t = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], area: [1, "<map>", "</map>"], _default: [0, "", ""] }; if (typeof s === "string" && !r.test(s) && (a.support.htmlSerialize || !k.test(s)) && (a.support.leadingWhitespace || !q.test(s)) && !t[(p.exec(s) || ["", ""])[1].toLowerCase()]) { s = s.replace(h, "<$1></$2>"); try { for (; m < j; m++) { f = this[m] || {}; if (f.nodeType === 1) { a.cleanData(f.getElementsByTagName("*")); f.innerHTML = s } } f = 0 } catch (o) { } } if (f) { c.empty().append(s) } }, null, d, arguments.length) } catch (b) { return a(c).html(d) } }, hasTransform: function (d) { var c = ""; c = d.css("transform"); if (c == "" || c == "none") { c = d.parents().css("transform"); if (c == "" || c == "none") { var b = a.jqx.utilities.getBrowser(); if (b.browser == "msie") { c = d.css("-ms-transform"); if (c == "" || c == "none") { c = d.parents().css("-ms-transform") } } else { if (b.browser == "chrome") { c = d.css("-webkit-transform"); if (c == "" || c == "none") { c = d.parents().css("-webkit-transform") } } else { if (b.browser == "opera") { c = d.css("-o-transform"); if (c == "" || c == "none") { c = d.parents().css("-o-transform") } } else { if (b.browser == "mozilla") { c = d.css("-moz-transform"); if (c == "" || c == "none") { c = d.parents().css("-moz-transform") } } } } } } else { return c != "" && c != "none" } } if (c == "" || c == "none") { c = a(document.body).css("transform") } return c != "" && c != "none" && c != null }, getBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = /(chrome)[ \/]([\w.]+)/.exec(c) || /(webkit)[ \/]([\w.]+)/.exec(c) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(c) || /(msie) ([\w.]+)/.exec(c) || c.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(c) || []; var d = { browser: b[1] || "", version: b[2] || "0" }; if (c.indexOf("rv:11.0") >= 0 && c.indexOf(".net4.0c") >= 0) { d.browser = "msie"; d.version = "11"; b[1] = "msie" } d[b[1]] = b[1]; return d } }); a.jqx.browser = a.jqx.utilities.getBrowser(); a.jqx.isHidden = function (d) { try { var b = d[0].offsetWidth, e = d[0].offsetHeight; if (b === 0 || e === 0) { return true } else { return false } } catch (c) { return false } }; a.jqx.ariaEnabled = true; a.jqx.aria = function (c, e, d) { if (!a.jqx.ariaEnabled) { return } if (e == undefined) { a.each(c.aria, function (g, h) { var k = !c.base ? c.host.attr(g) : c.base.host.attr(g); if (k != undefined && !a.isFunction(k)) { var j = k; switch (h.type) { case "number": j = new Number(k); if (isNaN(j)) { j = k } break; case "boolean": j = k == "true" ? true : false; break; case "date": j = new Date(k); if (j == "Invalid Date" || isNaN(j)) { j = k } break }c[h.name] = j } else { var k = c[h.name]; if (a.isFunction(k)) { k = c[h.name]() } if (k == undefined) { k = "" } try { !c.base ? c.host.attr(g, k.toString()) : c.base.host.attr(g, k.toString()) } catch (f) { } } }) } else { try { if (c.host) { if (!c.base) { if (c.host) { if (c.element.setAttribute) { c.element.setAttribute(e, d.toString()) } else { c.host.attr(e, d.toString()) } } else { c.attr(e, d.toString()) } } else { if (c.base.host) { c.base.host.attr(e, d.toString()) } else { c.attr(e, d.toString()) } } } else { if (c.setAttribute) { c.setAttribute(e, d.toString()) } } } catch (b) { } } }; if (!Array.prototype.indexOf) { Array.prototype.indexOf = function (c) { var b = this.length; var d = Number(arguments[1]) || 0; d = (d < 0) ? Math.ceil(d) : Math.floor(d); if (d < 0) { d += b } for (; d < b; d++) { if (d in this && this[d] === c) { return d } } return -1 } } a.jqx.mobile = a.jqx.mobile || {}; a.jqx.position = function (b) { var e = parseInt(b.pageX); var d = parseInt(b.pageY); if (a.jqx.mobile.isTouchDevice()) { var c = a.jqx.mobile.getTouches(b); var f = c[0]; e = parseInt(f.pageX); d = parseInt(f.pageY) } return { left: e, top: d } }; a.extend(a.jqx.mobile, { _touchListener: function (h, f) { var b = function (j, l) { var k = document.createEvent("MouseEvents"); k.initMouseEvent(j, l.bubbles, l.cancelable, l.view, l.detail, l.screenX, l.screenY, l.clientX, l.clientY, l.ctrlKey, l.altKey, l.shiftKey, l.metaKey, l.button, l.relatedTarget); k._pageX = l.pageX; k._pageY = l.pageY; return k }; var g = { mousedown: "touchstart", mouseup: "touchend", mousemove: "touchmove" }; var d = b(g[h.type], h); h.target.dispatchEvent(d); var c = h.target["on" + g[h.type]]; if (typeof c === "function") { c(h) } }, setMobileSimulator: function (c, e) { if (this.isTouchDevice()) { return } this.simulatetouches = true; if (e == false) { this.simulatetouches = false } var d = { mousedown: "touchstart", mouseup: "touchend", mousemove: "touchmove" }; var b = this; if (window.addEventListener) { var f = function () { for (var g in d) { if (c.addEventListener) { c.removeEventListener(g, b._touchListener); c.addEventListener(g, b._touchListener, false) } } }; if (a.jqx.browser.msie) { f() } else { f() } } }, isTouchDevice: function () { if (this.touchDevice != undefined) { return this.touchDevice } var c = "Browser CodeName: " + navigator.appCodeName + ""; c += "Browser Name: " + navigator.appName + ""; c += "Browser Version: " + navigator.appVersion + ""; c += "Platform: " + navigator.platform + ""; c += "User-agent header: " + navigator.userAgent + ""; if (c.indexOf("Android") != -1) { return true } if (c.indexOf("IEMobile") != -1) { return true } if (c.indexOf("Windows Phone") != -1) { return true } if (c.indexOf("WPDesktop") != -1) { return true } if (c.indexOf("ZuneWP7") != -1) { return true } if (c.indexOf("BlackBerry") != -1 && c.indexOf("Mobile Safari") != -1) { return true } if (c.indexOf("ipod") != -1) { return true } if (c.indexOf("nokia") != -1 || c.indexOf("Nokia") != -1) { return true } if (c.indexOf("Chrome/17") != -1) { return false } if (c.indexOf("CrOS") != -1) { return false } if (c.indexOf("Opera") != -1 && c.indexOf("Mobi") == -1 && c.indexOf("Mini") == -1 && c.indexOf("Platform: Win") != -1) { return false } if (c.indexOf("Opera") != -1 && c.indexOf("Mobi") != -1 && c.indexOf("Opera Mobi") != -1) { return true } var d = { ios: "i(?:Pad|Phone|Pod)(?:.*)CPU(?: iPhone)? OS ", android: "(Android |HTC_|Silk/)", blackberry: "BlackBerry(?:.*)Version/", rimTablet: "RIM Tablet OS ", webos: "(?:webOS|hpwOS)/", bada: "Bada/" }; try { if (this.touchDevice != undefined) { return this.touchDevice } this.touchDevice = false; for (i in d) { if (d.hasOwnProperty(i)) { prefix = d[i]; match = c.match(new RegExp("(?:" + prefix + ")([^\\s;]+)")); if (match) { if (i.toString() == "blackberry") { this.touchDevice = false; return false } this.touchDevice = true; return true } } } var f = navigator.userAgent; if (navigator.platform.toLowerCase().indexOf("win") != -1) { if (f.indexOf("Windows Phone") >= 0 || f.indexOf("WPDesktop") >= 0 || f.indexOf("IEMobile") >= 0 || f.indexOf("ZuneWP7") >= 0) { this.touchDevice = true; return true } else { if (f.indexOf("Touch") >= 0) { var b = ("MSPointerDown" in window) || ("pointerdown" in window); if (b) { this.touchDevice = true; return true } if (f.indexOf("ARM") >= 0) { this.touchDevice = true; return true } this.touchDevice = false; return false } } } if (navigator.platform.toLowerCase().indexOf("win") != -1) { this.touchDevice = false; return false } if (("ontouchstart" in window) || window.DocumentTouch && document instanceof DocumentTouch) { this.touchDevice = true } return this.touchDevice } catch (g) { this.touchDevice = false; return false } }, getLeftPos: function (b) { var c = b.offsetLeft; while ((b = b.offsetParent) != null) { if (b.tagName != "HTML") { c += b.offsetLeft; if (document.all) { c += b.clientLeft } } } return c }, getTopPos: function (c) { var e = c.offsetTop; var b = a(c).coord(); while ((c = c.offsetParent) != null) { if (c.tagName != "HTML") { e += (c.offsetTop - c.scrollTop); if (document.all) { e += c.clientTop } } } var d = navigator.userAgent.toLowerCase(); var f = (d.indexOf("windows phone") != -1 || d.indexOf("WPDesktop") != -1 || d.indexOf("ZuneWP7") != -1 || d.indexOf("msie 9") != -1 || d.indexOf("msie 11") != -1 || d.indexOf("msie 10") != -1) && d.indexOf("touch") != -1; if (f) { return b.top } if (this.isSafariMobileBrowser()) { if (this.isSafari4MobileBrowser() && this.isIPadSafariMobileBrowser()) { return e } if (d.indexOf("version/7") != -1) { return b.top } e = e + a(window).scrollTop() } return e }, isChromeMobileBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = c.indexOf("android") != -1; return b }, isOperaMiniMobileBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = c.indexOf("opera mini") != -1 || c.indexOf("opera mobi") != -1; return b }, isOperaMiniBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = c.indexOf("opera mini") != -1; return b }, isNewSafariMobileBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = c.indexOf("ipad") != -1 || c.indexOf("iphone") != -1 || c.indexOf("ipod") != -1; b = b && (c.indexOf("version/5") != -1); return b }, isSafari4MobileBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = c.indexOf("ipad") != -1 || c.indexOf("iphone") != -1 || c.indexOf("ipod") != -1; b = b && (c.indexOf("version/4") != -1); return b }, isWindowsPhone: function () { var c = navigator.userAgent.toLowerCase(); var b = (c.indexOf("windows phone") != -1 || c.indexOf("WPDesktop") != -1 || c.indexOf("ZuneWP7") != -1 || c.indexOf("msie 9") != -1 || c.indexOf("msie 11") != -1 || c.indexOf("msie 10") != -1); return b }, isSafariMobileBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = c.indexOf("ipad") != -1 || c.indexOf("iphone") != -1 || c.indexOf("ipod") != -1; return b }, isIPadSafariMobileBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = c.indexOf("ipad") != -1; return b }, isMobileBrowser: function () { var c = navigator.userAgent.toLowerCase(); var b = c.indexOf("ipad") != -1 || c.indexOf("iphone") != -1 || c.indexOf("android") != -1; return b }, getTouches: function (b) { if (b.originalEvent) { if (b.originalEvent.touches && b.originalEvent.touches.length) { return b.originalEvent.touches } else { if (b.originalEvent.changedTouches && b.originalEvent.changedTouches.length) { return b.originalEvent.changedTouches } } } if (!b.touches) { b.touches = new Array(); b.touches[0] = b.originalEvent != undefined ? b.originalEvent : b; if (b.originalEvent != undefined && b.pageX) { b.touches[0] = b } if (b.type == "mousemove") { b.touches[0] = b } } return b.touches }, getTouchEventName: function (b) { if (this.isWindowsPhone()) { var c = navigator.userAgent.toLowerCase(); if (c.indexOf("windows phone 8.1") != -1) { if (b.toLowerCase().indexOf("start") != -1) { return "pointerdown" } if (b.toLowerCase().indexOf("move") != -1) { return "pointermove" } if (b.toLowerCase().indexOf("end") != -1) { return "pointerup" } } if (b.toLowerCase().indexOf("start") != -1) { return "MSPointerDown" } if (b.toLowerCase().indexOf("move") != -1) { return "MSPointerMove" } if (b.toLowerCase().indexOf("end") != -1) { return "MSPointerUp" } } else { return b } }, dispatchMouseEvent: function (b, f, d) { if (this.simulatetouches) { return } var c = document.createEvent("MouseEvent"); c.initMouseEvent(b, true, true, f.view, 1, f.screenX, f.screenY, f.clientX, f.clientY, false, false, false, false, 0, null); if (d != null) { d.dispatchEvent(c) } }, getRootNode: function (b) { while (b.nodeType !== 1) { b = b.parentNode } return b }, setTouchScroll: function (b, c) { if (!this.enableScrolling) { this.enableScrolling = [] } this.enableScrolling[c] = b }, touchScroll: function (d, y, g, D, b, k) { if (d == null) { return } var B = this; var t = 0; var j = 0; var l = 0; var u = 0; var m = 0; var n = 0; if (!this.scrolling) { this.scrolling = [] } this.scrolling[D] = false; var h = false; var q = a(d); var v = ["select", "input", "textarea"]; var c = 0; var e = 0; if (!this.enableScrolling) { this.enableScrolling = [] } this.enableScrolling[D] = true; var D = D; var C = this.getTouchEventName("touchstart") + ".touchScroll"; var p = this.getTouchEventName("touchend") + ".touchScroll"; var A = this.getTouchEventName("touchmove") + ".touchScroll"; var c = function (E) { if (!B.enableScrolling[D]) { return true } if (a.inArray(E.target.tagName.toLowerCase(), v) !== -1) { return } var F = B.getTouches(E); var G = F[0]; if (F.length == 1) { B.dispatchMouseEvent("mousedown", G, B.getRootNode(G.target)) } h = false; j = G.pageY; m = G.pageX; if (B.simulatetouches) { if (G._pageY != undefined) { j = G._pageY; m = G._pageX } } B.scrolling[D] = true; t = 0; u = 0; return true }; if (q.on) { q.on(C, c) } else { q.bind(C, c) } var x = function (J) { if (!B.enableScrolling[D]) { return true } if (!B.scrolling[D]) { return true } var L = B.getTouches(J); if (L.length > 1) { return true } var H = L[0].pageY; var I = L[0].pageX; if (B.simulatetouches) { if (L[0]._pageY != undefined) { H = L[0]._pageY; I = L[0]._pageX } } var E = H - j; var F = I - m; e = H; touchHorizontalEnd = I; l = E - t; n = F - u; h = true; t = E; u = F; var G = b != null ? b[0].style.visibility != "hidden" : true; var K = k != null ? k[0].style.visibility != "hidden" : true; if (G || K) { if ((n !== 0 && G) || (l !== 0 && K)) { g(-n * 1, -l * 1, F, E, J); J.preventDefault(); J.stopPropagation(); if (J.preventManipulation) { J.preventManipulation() } return false } } }; if (q.on) { q.on(A, x) } else { q.bind(A, x) } if (this.simulatetouches) { var o = a(window).on != undefined || a(window).bind; var z = function (E) { B.scrolling[D] = false }; a(window).on != undefined ? a(document).on("mouseup.touchScroll", z) : a(document).bind("mouseup.touchScroll", z); if (window.frameElement) { if (window.top != null) { var r = function (E) { B.scrolling[D] = false }; if (window.top.document) { a(window.top.document).on ? a(window.top.document).on("mouseup", r) : a(window.top.document).bind("mouseup", r) } } } var s = a(document).on != undefined || a(document).bind; var w = function (E) { if (!B.scrolling[D]) { return true } B.scrolling[D] = false; var G = B.getTouches(E)[0], F = B.getRootNode(G.target); B.dispatchMouseEvent("mouseup", G, F); B.dispatchMouseEvent("click", G, F) }; a(document).on != undefined ? a(document).on("touchend", w) : a(document).bind("touchend", w) } var f = function (E) { if (!B.enableScrolling[D]) { return true } var G = B.getTouches(E)[0]; if (!B.scrolling[D]) { return true } B.scrolling[D] = false; if (h) { B.dispatchMouseEvent("mouseup", G, F) } else { var G = B.getTouches(E)[0], F = B.getRootNode(G.target); B.dispatchMouseEvent("mouseup", G, F); B.dispatchMouseEvent("click", G, F); return true } }; if (q.on) { q.on("dragstart", function (E) { E.preventDefault() }); q.on("selectstart", function (E) { E.preventDefault() }) } q.on ? q.on(p + " touchcancel.touchScroll", f) : q.bind(p + " touchcancel.touchScroll", f) } }); a.jqx.cookie = a.jqx.cookie || {}; a.extend(a.jqx.cookie, { cookie: function (e, f, c) { if (arguments.length > 1 && String(f) !== "[object Object]") { c = a.extend({}, c); if (f === null || f === undefined) { c.expires = -1 } if (typeof c.expires === "number") { var h = c.expires, d = c.expires = new Date(); d.setDate(d.getDate() + h) } f = String(f); return (document.cookie = [encodeURIComponent(e), "=", c.raw ? f : encodeURIComponent(f), c.expires ? "; expires=" + c.expires.toUTCString() : "", c.path ? "; path=" + c.path : "", c.domain ? "; domain=" + c.domain : "", c.secure ? "; secure" : ""].join("")) } c = f || {}; var b, g = c.raw ? function (j) { return j } : decodeURIComponent; return (b = new RegExp("(?:^|; )" + encodeURIComponent(e) + "=([^;]*)").exec(document.cookie)) ? g(b[1]) : null } }); a.jqx.string = a.jqx.string || {}; a.extend(a.jqx.string, { replace: function (f, d, e) { if (d === e) { return this } var b = f; var c = b.indexOf(d); while (c != -1) { b = b.replace(d, e); c = b.indexOf(d) } return b }, contains: function (b, c) { if (b == null || c == null) { return false } return b.indexOf(c) != -1 }, containsIgnoreCase: function (b, c) { if (b == null || c == null) { return false } return b.toUpperCase().indexOf(c.toUpperCase()) != -1 }, equals: function (b, c) { if (b == null || c == null) { return false } b = this.normalize(b); if (c.length == b.length) { return b.slice(0, c.length) == c } return false }, equalsIgnoreCase: function (b, c) { if (b == null || c == null) { return false } b = this.normalize(b); if (c.length == b.length) { return b.toUpperCase().slice(0, c.length) == c.toUpperCase() } return false }, startsWith: function (b, c) { if (b == null || c == null) { return false } return b.slice(0, c.length) == c }, startsWithIgnoreCase: function (b, c) { if (b == null || c == null) { return false } return b.toUpperCase().slice(0, c.length) == c.toUpperCase() }, normalize: function (b) { if (b.charCodeAt(b.length - 1) == 65279) { b = b.substring(0, b.length - 1) } return b }, endsWith: function (b, c) { if (b == null || c == null) { return false } b = this.normalize(b); return b.slice(-c.length) == c }, endsWithIgnoreCase: function (b, c) { if (b == null || c == null) { return false } b = this.normalize(b); return b.toUpperCase().slice(-c.length) == c.toUpperCase() } }); a.extend(a.easing, { easeOutBack: function (f, g, e, k, j, h) { if (h == undefined) { h = 1.70158 } return k * ((g = g / j - 1) * g * ((h + 1) * g + h) + 1) + e }, easeInQuad: function (f, g, e, j, h) { return j * (g /= h) * g + e }, easeInOutCirc: function (f, g, e, j, h) { if ((g /= h / 2) < 1) { return -j / 2 * (Math.sqrt(1 - g * g) - 1) + e } return j / 2 * (Math.sqrt(1 - (g -= 2) * g) + 1) + e }, easeInOutSine: function (f, g, e, j, h) { return -j / 2 * (Math.cos(Math.PI * g / h) - 1) + e }, easeInCubic: function (f, g, e, j, h) { return j * (g /= h) * g * g + e }, easeOutCubic: function (f, g, e, j, h) { return j * ((g = g / h - 1) * g * g + 1) + e }, easeInOutCubic: function (f, g, e, j, h) { if ((g /= h / 2) < 1) { return j / 2 * g * g * g + e } return j / 2 * ((g -= 2) * g * g + 2) + e }, easeInSine: function (f, g, e, j, h) { return -j * Math.cos(g / h * (Math.PI / 2)) + j + e }, easeOutSine: function (f, g, e, j, h) { return j * Math.sin(g / h * (Math.PI / 2)) + e }, easeInOutSine: function (f, g, e, j, h) { return -j / 2 * (Math.cos(Math.PI * g / h) - 1) + e } }) })(jqxBaseFramework); (function (b) { b.extend(b.event.special, { close: { noBubble: true }, open: { noBubble: true }, cellclick: { noBubble: true }, rowclick: { noBubble: true }, tabclick: { noBubble: true }, selected: { noBubble: true }, expanded: { noBubble: true }, collapsed: { noBubble: true }, valuechanged: { noBubble: true }, expandedItem: { noBubble: true }, collapsedItem: { noBubble: true }, expandingItem: { noBubble: true }, collapsingItem: { noBubble: true } }); b.fn.extend({ ischildof: function (f) { var d = b(this).parents().get(); for (var c = 0; c < d.length; c++) { if (typeof f != "string") { var e = d[c]; if (f !== undefined) { if (e == f[0]) { return true } } } else { if (f !== undefined) { if (b(d[c]).is(f)) { return true } } } } return false } }); b.fn.jqxProxy = function () { var e = b(this).data().jqxWidget; var c = Array.prototype.slice.call(arguments, 0); var d = e.element; if (!d) { d = e.base.element } return b.jqx.jqxWidgetProxy(e.widgetName, d, c) }; var a = this.originalVal = b.fn.val; b.fn.val = function (d) { if (typeof d == "undefined") { if (b(this).hasClass("jqx-widget")) { var c = b(this).data().jqxWidget; if (c && c.val) { return c.val() } } return a.call(this) } else { if (b(this).hasClass("jqx-widget")) { var c = b(this).data().jqxWidget; if (c && c.val) { if (arguments.length != 2) { return c.val(d) } else { return c.val(d, arguments[1]) } } } return a.call(this, d) } }; b.fn.coord = function (o) { var e, k, j = { top: 0, left: 0 }, f = this[0], m = f && f.ownerDocument; if (!m) { return } e = m.documentElement; if (!b.contains(e, f)) { return j } if (typeof f.getBoundingClientRect !== undefined) { j = f.getBoundingClientRect() } var d = function (p) { return b.isWindow(p) ? p : p.nodeType === 9 ? p.defaultView || p.parentWindow : false }; k = d(m); var h = 0; var c = 0; var g = navigator.userAgent.toLowerCase(); var n = g.indexOf("ipad") != -1 || g.indexOf("iphone") != -1; if (n) { h = 2 } if (true == o) { if (b(document.body).css("position") != "static") { var l = b(document.body).coord(); h = -l.left; c = -l.top } } return { top: c + j.top + (k.pageYOffset || e.scrollTop) - (e.clientTop || 0), left: h + j.left + (k.pageXOffset || e.scrollLeft) - (e.clientLeft || 0) } } })(jqxBaseFramework);

(function (i) { i.jqx.dataAdapter = function (J, e) { if (J != undefined) { if (J.dataFields !== undefined) { J.datafields = J.dataFields } if (J.dataType !== undefined) { J.datatype = J.dataType } if (J.localData !== undefined) { J.localdata = J.localData } if (J.sortColumn !== undefined) { J.sortcolumn = J.sortColumn } if (J.sortDirection !== undefined) { J.sortdirection = J.sortDirection } if (J.sortOrder !== undefined) { J.sortdirection = J.sortOrder } if (J.formatData !== undefined) { J.formatdata = J.formatData } if (J.processData !== undefined) { J.processdata = J.processData } if (J.pageSize !== undefined) { J.pagesize = J.pageSize } if (J.pageNum !== undefined) { J.pagenum = J.pageNum } if (J.updateRow !== undefined) { J.updaterow = J.updateRow } if (J.addRow !== undefined) { J.addrow = J.addRow } if (J.deleteRow !== undefined) { J.deleterow = J.deleteRow } if (J.contentType !== undefined) { J.contenttype = J.contentType } if (J.totalRecords != undefined) { J.totalrecords = J.totalRecords } if (J.loadError != undefined) { J.loadError = J.loadError } if (J.sortComparer != undefined) { J.sortcomparer = J.sortComparer } } this._source = J; this._options = e || {}; this.records = new Array(); this._downloadComplete = new Array(); this._bindingUpdate = new Array(); if (J != undefined && J.localdata != null && typeof J.localdata == "function") { var I = J.localdata(); if (I != null) { J._localdata = J.localdata; var H = this; if (J._localdata.subscribe) { H._oldlocaldata = []; J._localdata.subscribe(function (K) { var L = function (M) { if (jQuery.isArray(M)) { return jQuery.makeArray(L(i(M))) } return jQuery.extend(true, {}, M) }; if (H.suspendKO == false || H.suspendKO == undefined || H._oldlocaldata.length == 0) { H._oldlocaldata = L(K) } }, J._localdata, "beforeChange"); J._localdata.subscribe(function (L) { if (H.suspendKO == false || H.suspendKO == undefined) { var K = ""; H._oldrecords = H.records; if (H._oldlocaldata.length == 0) { J.localdata = J._localdata() } if (H._oldlocaldata.length == 0) { K = "change" } else { if (H._oldlocaldata.length == L.length) { K = "update" } if (H._oldlocaldata.length > L.length) { K = "remove" } if (H._oldlocaldata.length < L.length) { K = "add" } } H.dataBind(null, K) } }, J._localdata, "change"); H._knockoutdatasource = true } J.localdata = I } } if (this._options.autoBind == true) { this.dataBind() } }; i.jqx.dataAdapter.prototype = { getrecords: function () { return this.records }, beginUpdate: function () { this.isUpdating = true }, endUpdate: function (e) { this.isUpdating = false; if (e != false) { if (this._changedrecords && this._changedrecords.length > 0) { this.callBindingUpdate("update"); this._changedrecords = [] } else { this.dataBind(null, "") } } }, formatDate: function (H, J, I) { var e = i.jqx.dataFormat.formatdate(H, J, I); return e }, formatNumber: function (H, J, I) { var e = i.jqx.dataFormat.formatnumber(H, J, I); return e }, dataBind: function (R, X) { if (this.isUpdating == true) { return } var U = this._source; if (!U) { return } i.jqx.dataFormat.datescache = new Array(); if (U.dataFields != null) { U.datafields = U.dataFields } if (U.recordstartindex == undefined) { U.recordstartindex = 0 } if (U.recordendindex == undefined) { U.recordendindex = 0 } if (U.loadallrecords == undefined) { U.loadallrecords = true } if (U.sort != undefined) { this.sort = U.sort } if (U.filter != undefined) { this.filter = U.filter } else { this.filter = null } if (U.sortcolumn != undefined) { this.sortcolumn = U.sortcolumn } if (U.sortdirection != undefined) { this.sortdirection = U.sortdirection } if (U.sortcomparer != undefined) { this.sortcomparer = U.sortcomparer } this.records = new Array(); var K = this._options || {}; this.virtualmode = K.virtualmode != undefined ? K.virtualmode : false; this.totalrecords = K.totalrecords != undefined ? K.totalrecords : 0; this.pageable = K.pageable != undefined ? K.pageable : false; this.pagesize = K.pagesize != undefined ? K.pagesize : 0; this.pagenum = K.pagenum != undefined ? K.pagenum : 0; this.cachedrecords = K.cachedrecords != undefined ? K.cachedrecords : new Array(); this.originaldata = new Array(); this.recordids = new Array(); this.updaterow = K.updaterow != undefined ? K.updaterow : null; this.addrow = K.addrow != undefined ? K.addrow : null; this.deleterow = K.deleterow != undefined ? K.deleterow : null; this.cache = K.cache != undefined ? K.cache : false; this.unboundmode = false; if (U.formatdata != undefined) { K.formatData = U.formatdata } if (U.data != undefined) { if (K.data == undefined) { K.data = {} } i.extend(K.data, U.data) } if (U.mapchar != undefined) { this.mapChar = U.mapchar ? U.mapchar : ">" } else { this.mapChar = K.mapChar ? K.mapChar : ">" } if (K.unboundmode || U.unboundmode) { this.unboundmode = K.unboundmode || U.unboundmode } if (U.cache != undefined) { this.cache = U.cache } if (this.koSubscriptions) { for (var Z = 0; Z < this.koSubscriptions.length; Z++) { this.koSubscriptions[Z].dispose() } } this.koSubscriptions = new Array(); if (this.pagenum < 0) { this.pagenum = 0 } var ae = this; var Q = U.datatype; if (U.datatype === "csv" || U.datatype === "tab" || U.datatype === "tsv" || U.datatype == "text") { Q = "text" } var N = K.async != undefined ? K.async : true; if (U.async != undefined) { N = U.async } switch (Q) { case "local": case "array": case "observablearray": default: if (U.localdata == undefined && U.length) { U.localdata = new Array(); for (var W = 0; W < U.length; W++) { U.localdata[U.localdata.length] = U[W]; U[W].uid = W } } if (U.beforeprocessing && i.isFunction(U.beforeprocessing)) { U.beforeprocessing(U.localdata) } var M = U.localdata.length; this.totalrecords = this.virtualmode ? (U.totalrecords || M) : M; if (this.unboundmode) { this.totalrecords = this.unboundmode ? (U.totalrecords || M) : M; var aa = U.datafields ? U.datafields.length : 0; if (aa > 0) { for (var W = 0; W < this.totalrecords; W++) { var I = {}; for (var V = 0; V < aa; V++) { I[U.datafields[V].name] = "" } I.uid = W; U.localdata[U.localdata.length] = I } } } if (this.totalrecords == undefined) { this.totalrecords = 0 } var aa = U.datafields ? U.datafields.length : 0; var H = function (al, an) { var am = {}; for (var aj = 0; aj < an; aj++) { var ai = U.datafields[aj]; var ao = ""; if (undefined == ai || ai == null) { continue } if (ai.map) { if (i.isFunction(ai.map)) { ao = ai.map(al) } else { var ag = ai.map.split(ae.mapChar); if (ag.length > 0) { var ak = al; for (var ah = 0; ah < ag.length; ah++) { if (!ak) { continue } ak = ak[ag[ah]] } ao = ak } else { ao = al[ai.map] } } if (ao != undefined && ao != null) { ao = ao.toString() } else { if (ao == undefined && ao != null) { ao = "" } } } if (ao == "") { ao = al[ai.name]; if (ao != undefined && ao != null) { if (U._localdata && ao.subscribe) { ao = ao() } else { ao = ao.toString() } } } ao = ae.getvaluebytype(ao, ai); if (ai.displayname != undefined) { am[ai.displayname] = ao } else { am[ai.name] = ao } } return am }; if (U._localdata) { this._changedrecords = []; this.records = new Array(); var ad = U._localdata(); i.each(ad, function (aj, am) { if (typeof am === "string") { ae.records.push(am) } else { var ah = {}; var al = 0; var ak = this; i.each(this, function (av, aA) { var ap = null; var aB = "string"; var az = av; if (aa > 0) { var aD = false; var ay = false; for (var au = 0; au < aa; au++) { var at = U.datafields[au]; if (at != undefined && (at.name == av)) { aD = true; ap = at.map; aB = at.type; az = at.name; break } else { if (at != undefined && at.map && (at.map.indexOf(av) >= 0)) { aD = true; ap = at.map; aB = at.type; az = at.name; ay = true; var aC = ak[av]; if (ap != null) { var ao = ap.split(ae.mapChar); if (ao.length > 0) { var aw = ak; for (var aq = 0; aq < ao.length; aq++) { aw = aw[ao[aq]] } aC = aw } else { aC = ak[ap] } } if (aB != "string") { aC = ae.getvaluebytype(aC, { type: aB }) } ah[az] = aC; if (ah[az] != undefined) { al += ah[az].toString().length + ah[az].toString().substr(0, 1) } } } } if (!aD) { return true } if (ay) { return true } } var ar = i.isFunction(ak[av]); if (ar) { var aC = ak[av](); if (aB != "string") { aC = ae.getvaluebytype(aC, { type: aB }) } ah[av] = aC; if (ak[av].subscribe) { var ax = aj; ae.koSubscriptions[ae.koSubscriptions.length] = ak[av].subscribe(function (aF) { var aE = ax; ah[av] = aF; var aG = { index: aE, oldrecord: ah, record: ah }; ae._changedrecords.push(aG); if (ae.isUpdating) { return } ae.callBindingUpdate("update"); ae._changedrecords = []; return false }) } } else { var aC = ak[av]; if (ap != null) { var ao = ap.split(ae.mapChar); if (ao.length > 0) { var aw = ak; for (var aq = 0; aq < ao.length; aq++) { aw = aw[ao[aq]] } aC = aw } else { aC = ak[ap] } } if (aB != "string") { aC = ae.getvaluebytype(aC, { type: aB }) } ah[az] = aC; if (ah[az] != undefined) { al += ah[az].toString().length + ah[az].toString().substr(0, 1) } } }); var ai = ae.getid(U.id, ak, aj); ah.uid = ai; ae.records.push(ah); ah._koindex = al; if (ae._oldrecords) { var ag = ae.records.length - 1; if (X == "update") { if (ae._oldrecords[ag]._koindex != al) { var an = { index: ag, oldrecord: ae._oldrecords[ag], record: ah }; ae._changedrecords.push(an) } } } } }); if (X == "add") { var M = ae.records.length; for (var W = 0; W < M; W++) { var I = ae.records[W]; var L = false; for (var T = 0; T < ae._oldrecords.length; T++) { if (ae._oldrecords[T]._koindex === I._koindex) { L = true; break } } if (!L) { ae._changedrecords.push({ index: W, oldrecord: null, record: I, position: (W != 0 ? "last" : "first") }) } } } else { if (X == "remove") { var M = ae._oldrecords.length; for (var W = 0; W < M; W++) { var P = ae._oldrecords[W]; if (!ae.records[W]) { ae._changedrecords.push({ index: W, oldrecord: P, record: null }) } else { if (ae.records[W]._koindex != P._koindex) { ae._changedrecords.push({ index: W, oldrecord: P, record: null }) } } } } } } else { if (!i.isArray(U.localdata)) { this.records = new Array(); i.each(U.localdata, function (ai) { var ah = ae.getid(U.id, this, ai); if (aa > 0) { var ag = this; var aj = H(ag, aa); aj.uid = ah; ae.records[ae.records.length] = aj } else { this.uid = ah; ae.records[ae.records.length] = this } }) } else { if (aa == 0) { i.each(U.localdata, function (ai, aj) { var ag = i.extend({}, this); if (typeof aj === "string") { ae.records = U.localdata; return false } else { var ah = ae.getid(U.id, ag, ai); if (typeof (ah) === "object") { ah = ai } ag.uid = ah; ae.records[ae.records.length] = ag } }) } else { i.each(U.localdata, function (ai) { var ag = this; var aj = H(ag, aa); var ah = ae.getid(U.id, aj, ai); if (typeof (ah) === "object") { ah = ai } var ag = i.extend({}, aj); ag.uid = ah; ae.records[ae.records.length] = ag }) } } } this.originaldata = U.localdata; this.cachedrecords = this.records; this.addForeignValues(U); if (K.uniqueDataFields) { var S = this.getUniqueRecords(this.records, K.uniqueDataFields); this.records = S; this.cachedrecords = S } if (K.beforeLoadComplete) { var ab = K.beforeLoadComplete(ae.records, this.originaldata); if (ab != undefined) { ae.records = ab; ae.cachedrecords = ab } } if (K.autoSort && K.autoSortField) { var O = Object.prototype.toString; Object.prototype.toString = (typeof field == "function") ? field : function () { return this[K.autoSortField] }; ae.records.sort(function (ah, ag) { if (ah === undefined) { ah = null } if (ag === undefined) { ag = null } if (ah === null && ag === null) { return 0 } if (ah === null && ag !== null) { return 1 } if (ah !== null && ag === null) { return -1 } ah = ah.toString(); ag = ag.toString(); if (i.jqx.dataFormat.isNumber(ah) && i.jqx.dataFormat.isNumber(ag)) { if (ah < ag) { return -1 } if (ah > ag) { return 1 } return 0 } else { if (i.jqx.dataFormat.isDate(ah) && i.jqx.dataFormat.isDate(ag)) { if (ah < ag) { return -1 } if (ah > ag) { return 1 } return 0 } else { if (!i.jqx.dataFormat.isNumber(ah) && !i.jqx.dataFormat.isNumber(ag)) { ah = String(ah).toLowerCase(); ag = String(ag).toLowerCase() } } } try { if (ah < ag) { return -1 } if (ah > ag) { return 1 } } catch (ai) { var aj = ai } return 0 }); Object.prototype.toString = O } ae.loadedData = U.localdata; ae.buildHierarchy(); if (i.isFunction(K.loadComplete)) { K.loadComplete(U.localdata, ae.records) } break; case "json": case "jsonp": case "xml": case "xhtml": case "script": case "text": if (U.localdata != null) { if (i.isFunction(U.beforeprocessing)) { U.beforeprocessing(U.localdata) } if (U.datatype === "xml") { ae.loadxml(U.localdata, U.localdata, U) } else { if (Q === "text") { ae.loadtext(U.localdata, U) } else { ae.loadjson(U.localdata, U.localdata, U) } } ae.addForeignValues(U); if (K.uniqueDataFields) { var S = ae.getUniqueRecords(ae.records, K.uniqueDataFields); ae.records = S; ae.cachedrecords = S } if (K.beforeLoadComplete) { var ab = K.beforeLoadComplete(ae.records, this.originaldata); if (ab != undefined) { ae.records = ab; ae.cachedrecords = ab } } ae.loadedData = U.localdata; ae.buildHierarchy.call(ae); if (i.isFunction(K.loadComplete)) { K.loadComplete(U.localdata, ae.records) } ae.callBindingUpdate(X); return } var ac = K.data != undefined ? K.data : {}; if (U.processdata) { U.processdata(ac) } if (i.isFunction(K.processData)) { K.processData(ac) } if (i.isFunction(K.formatData)) { var e = K.formatData(ac); if (e != undefined) { ac = e } } var Y = "application/x-www-form-urlencoded"; if (K.contentType) { Y = K.contentType } var J = "GET"; if (U.type) { J = U.type } if (K.type) { J = K.type } if (U.url && U.url.length > 0) { if (i.isFunction(K.loadServerData)) { ae._requestData(ac, U, K) } else { this.xhr = i.jqx.data.ajax({ dataType: Q, cache: this.cache, type: J, url: U.url, async: N, timeout: U.timeout, contentType: Y, data: ac, success: function (aj, ag, am) { if (i.isFunction(U.beforeprocessing)) { var al = U.beforeprocessing(aj, ag, am); if (al != undefined) { aj = al } } if (i.isFunction(K.downloadComplete)) { var al = K.downloadComplete(aj, ag, am); if (al != undefined) { aj = al } } if (aj == null) { ae.records = new Array(); ae.cachedrecords = new Array(); ae.originaldata = new Array(); ae.callDownloadComplete(); if (i.isFunction(K.loadComplete)) { K.loadComplete(new Array()) } return } var ah = aj; if (aj.records) { ah = aj.records } if (aj.totalrecords != undefined) { U.totalrecords = aj.totalrecords } if (U.datatype === "xml") { ae.loadxml(null, ah, U) } else { if (Q === "text") { ae.loadtext(ah, U) } else { ae.loadjson(null, ah, U) } } ae.addForeignValues(U); if (K.uniqueDataFields) { var ai = ae.getUniqueRecords(ae.records, K.uniqueDataFields); ae.records = ai; ae.cachedrecords = ai } if (K.beforeLoadComplete) { var ak = K.beforeLoadComplete(ae.records, aj); if (ak != undefined) { ae.records = ak; ae.cachedrecords = ak } } ae.loadedData = aj; ae.buildHierarchy.call(ae); ae.callDownloadComplete(); if (i.isFunction(K.loadComplete)) { K.loadComplete(aj, ag, am, ae.records) } }, error: function (ai, ag, ah) { if (i.isFunction(U.loaderror)) { U.loaderror(ai, ag, ah) } if (i.isFunction(K.loadError)) { K.loadError(ai, ag, ah) } ai = null; ae.callDownloadComplete() }, beforeSend: function (ah, ag) { if (i.isFunction(K.beforeSend)) { K.beforeSend(ah, ag) } if (i.isFunction(U.beforesend)) { U.beforesend(ah, ag) } } }) } } else { ae.buildHierarchy(new Array()); ae.callDownloadComplete(); if (i.isFunction(K.loadComplete)) { if (!af) { var af = {} } K.loadComplete(af) } } break } this.callBindingUpdate(X) }, buildHierarchy: function (K) { var e = this._source; var P = new Array(); if (!e.datafields) { return } if (e.hierarchy && !e.hierarchy.reservedNames) { e.hierarchy.reservedNames = { leaf: "leaf", parent: "parent", expanded: "expanded", checked: "checked", selected: "selected", level: "level", icon: "icon", data: "data"} } else { if (e.hierarchy) { var O = e.hierarchy.reservedNames; if (!O.leaf) { O.leaf = "leaf" } if (!O.parent) { O.parent = "parent" } if (!O.expanded) { O.expanded = "expanded" } if (!O.checked) { O.checked = "checked" } if (!O.selected) { O.selected = "selected" } if (!O.level) { O.level = "level" } if (!O.data) { O.data = "data" } } } if (!e.hierarchy) { return } var N = this; var O = e.hierarchy.reservedNames; if (e.hierarchy.root) { if (e.dataType == "xml") { var P = this.getRecordsHierarchy("uid", "parentuid", "records", null, K); this.hierarchy = P; return P } else { this.hierarchy = this.records; var R = e.hierarchy.root; for (var L = 0; L < this.records.length; L++) { var M = this.records[L]; if (!M) { continue } var H = function (S) { if (e.hierarchy.record) { S.records = S[R][e.hierarchy.record] } else { var U = R.split(N.mapChar); var T = null; if (U.length > 1) { var W = S; for (var V = 0; V < U.length; V++) { if (W != undefined) { W = W[U[V]] } } T = W } else { T = S[R] } S.records = T } if (S.records == null || (S.records && S.records.length == 0)) { S[O.leaf] = true } }; H(M); M[O.level] = 0; var I = this.getid(e.id, M, L); M.uid = I; M[O.parent] = null; M[O.data] = M; if (M[O.expanded] === undefined) { M[O.expanded] = false } var Q = function (W, U) { if (!U) { W.records = new Array(); return } for (var V = 0; V < U.length; V++) { var S = U[V]; if (!S) { continue } H(S); S[O.level] = W[O.level] + 1; S[O.parent] = W; S[O.data] = S; var T = N.getid(e.id, S, V); if (T == V && e.id == null) { S.uid = W.uid + "_" + T } else { S.uid = T } if (S[O.expanded] === undefined) { S[O.expanded] = false } Q(S, S.records) } }; Q(M, M.records) } } return this.hierarchy } if (e.hierarchy.keyDataField && e.hierarchy.parentDataField) { var P = this.getRecordsHierarchy(e.hierarchy.keyDataField.name, e.hierarchy.parentDataField.name, "records", null, K); this.hierarchy = P; return P } if (e.hierarchy.groupingDataFields) { var J = new Array(); for (var L = 0; L < e.hierarchy.groupingDataFields.length; L++) { J.push(e.hierarchy.groupingDataFields[L].name) } var P = this.getGroupedRecords(J, "records", "label", null, "data", null, "parent", K); this.hierarchy = P; return P } }, addRecord: function (H, e, M, I) { var J = this; var N = function () { return { leaf: "leaf", parent: "parent", expanded: "expanded", checked: "checked", selected: "selected", level: "level", icon: "icon", data: "data"} }; if (H != undefined) { if (M != undefined) { if (this.hierarchy.length > 0) { var K = function (O) { if (O) { for (var P = 0; P < O.length; P++) { var Q = O[P]; if (Q.uid == M) { var R = (J._source && J._source.hierarchy) ? J._source.hierarchy.reservedNames : null; if (R == null) { R = N() } H[R.parent] = Q; H[R.level] = Q[R.level] + 1; if (!Q.records) { Q.records = new Array(); Q[R.leaf] = false } if (e == "last") { Q.records.push(H) } else { if (typeof e === "number" && isFinite(e)) { Q.records.splice(e, 0, H) } else { Q.records.splice(0, 0, H) } } J.records.push(H); return true } if (Q.records) { K(Q.records) } } } }; K(this.hierarchy) } } else { if (this.hierarchy && this.hierarchy.length >= 0 && (this._source.hierarchy || I)) { var L = (J._source && J._source.hierarchy) ? J._source.hierarchy.reservedNames : null; if (L == null) { L = N() } H[L.level] = 0; if (e == "last") { this.hierarchy.push(H) } else { if (typeof e === "number" && isFinite(e)) { this.hierarchy.splice(e, 0, H) } else { this.hierarchy.splice(0, 0, H) } } } else { if (e == "last") { this.records.push(H) } else { if (typeof e === "number" && isFinite(e)) { this.records.splice(e, 0, H) } else { this.records.splice(0, 0, H) } } } return true } } return false }, deleteRecord: function (H) { var J = this; if (this.hierarchy.length > 0) { var K = function (L) { if (L) { for (var O = 0; O < L.length; O++) { var P = L[O]; if (P.uid == H) { L.splice(O, 1); if (J.recordids[H]) { delete J.recordids[H] } var N = function (T) { for (var Q = 0; Q < T.length; Q++) { var S = T[Q].uid; for (var R = 0; R < J.records.length; R++) { var U = J.records[R]; if (U.uid == S) { J.records.splice(R, 1); break } } if (T[Q].records) { N(T[Q].records) } } }; if (P.records) { N(P.records) } for (var M = 0; M < J.records.length; M++) { var P = J.records[M]; if (P.uid == H) { J.records.splice(M, 1); break } } return true } if (P.records) { K(P.records) } } } }; K(this.hierarchy) } else { for (var e = 0; e < this.records.length; e++) { var I = this.records[e]; if (I.uid == H) { this.records.splice(e, 1); return true } } } return false }, addForeignValues: function (H) { var Q = this; var V = H.datafields ? H.datafields.length : 0; for (var N = 0; N < V; N++) { var L = H.datafields[N]; if (L != undefined) { if (L.values != undefined) { if (L.value == undefined) { L.value = L.name } if (L.values.value == undefined) { L.values.value = L.value } var T = new Array(); var K, M; if (Q.pageable && Q.virtualmode) { K = Q.pagenum * Q.pagesize; M = K + Q.pagesize; if (M > Q.totalrecords) { M = Q.totalrecords } } else { if (Q.virtualmode) { K = H.recordstartindex; M = H.recordendindex; if (M > Q.totalrecords) { M = Q.totalrecords } } else { K = 0; M = Q.records.length } } for (var O = K; O < M; O++) { var P = Q.records[O]; var I = L.name; var U = P[L.value]; if (T[U] != undefined) { P[I] = T[U] } else { for (var J = 0; J < L.values.source.length; J++) { var S = L.values.source[J]; var e = S[L.values.value]; if (e == undefined) { e = S.uid } if (e == U) { var R = S[L.values.name]; P[I] = R; T[U] = R; break } } } } } else { if (L.value != undefined) { for (var O = 0; O < Q.records.length; O++) { var P = Q.records[O]; P[L.name] = P[L.value] } } } } } }, abort: function () { if (this.xhr && this.xhr.readyState != 4) { this.xhr.abort(); me.callDownloadComplete() } }, _requestData: function (H, J, e) { var I = this; var K = function (L) { if (L.totalrecords) { J.totalrecords = L.totalrecords; I.totalrecords = L.totalrecords } if (L.records) { I.records = L.records; I.cachedrecords = L.records } if (i.isFunction(e.loadComplete)) { e.loadComplete(L) } I.callDownloadComplete() }; e.loadServerData(H, J, K) }, getUniqueRecords: function (I, L) { if (I && L) { var e = I.length; var Q = L.length; var N = new Array(); var O = new Array(); for (var P = 0; P < e; P++) { var M = I[P]; var J = ""; if (M == undefined) { continue } for (var K = 0; K < Q; K++) { var H = L[K]; J += M[H] + "_" } if (!O[J]) { N[N.length] = M } O[J] = true } } return N }, getAggregatedData: function (S, P, M, H) { var L = M; if (!L) { L = this.records } var Q = {}; var K = new Array(); var J = L.length; if (J == 0) { return } if (J == undefined) { return } for (var O = 0; O < J; O++) { var R = L[O]; for (var N = 0; N < S.length; N++) { var I = S[N]; var U = R[I.name]; if (U === null) { continue } if (I.aggregates) { Q[I.name] = Q[I.name] || {}; K[I.name] = K[I.name] || 0; K[I.name]++; var e = function (W) { for (obj in W) { var X = Q[I.name][obj]; if (X == null) { Q[I.name][obj] = 0; X = 0 } if (i.isFunction(W[obj])) { X = W[obj](X, U, I.name, R, H) } Q[I.name][obj] = X } }; var T = parseFloat(U); if (isNaN(T)) { T = false } else { T = true } if (T) { U = parseFloat(U) } if (typeof U === "number" && isFinite(U)) { i.each(I.aggregates, function () { var W = Q[I.name][this]; if (W == null) { W = 0; if (this == "min") { W = 9999999999999 } if (this == "max") { W = -9999999999999 } } if (this == "sum" || this == "avg" || this == "stdev" || this == "stdevp" || this == "var" || this == "varp") { W += parseFloat(U) } else { if (this == "product") { if (O == 0) { W = parseFloat(U) } else { W *= parseFloat(U) } } else { if (this == "min") { W = Math.min(W, parseFloat(U)) } else { if (this == "max") { W = Math.max(W, parseFloat(U)) } else { if (this == "count") { W++ } else { if (typeof (this) == "object") { e(this); return } } } } } } Q[I.name][this] = W }) } else { i.each(I.aggregates, function () { if (this == "min" || this == "max" || this == "count" || this == "product" || this == "sum" || this == "avg" || this == "stdev" || this == "stdevp" || this == "var" || this == "varp") { var W = Q[I.name][this]; if (W == null) { W = 0 } Q[I.name][this] = W; return true } if (typeof (this) == "object") { e(this) } }) } } } } for (var N = 0; N < S.length; N++) { var I = S[N]; if (!Q[I.name]) { Q[I.name] = {}; i.each(I.aggregates, function (W) { Q[I.name][this] = 0 }) } if (Q[I.name]["avg"] != undefined) { var U = Q[I.name]["avg"]; var V = K[I.name]; if (V === 0 || V == undefined) { Q[I.name]["avg"] = 0 } else { Q[I.name]["avg"] = U / V } } else { if (Q[I.name]["count"] != undefined) { Q[I.name]["count"] = J } } if (Q[I.name]["stdev"] || Q[I.name]["stdevp"] || Q[I.name]["var"] || Q[I.name]["varp"]) { i.each(I.aggregates, function (ac) { if (this == "stdev" || this == "var" || this == "varp" || this == "stdevp") { var ad = Q[I.name][this]; var ab = J; var W = (ad / J); var Y = 0; for (var Z = 0; Z < J; Z++) { var aa = L[Z]; var ae = aa[I.name]; Y += (ae - W) * (ae - W) } var X = (this == "stdevp" || this == "varp") ? ab : ab - 1; if (X == 0) { X = 1 } if (this == "var" || this == "varp") { Q[I.name][this] = Y / X } else { if (this == "stdevp" || this == "stdev") { Q[I.name][this] = Math.sqrt(Y / X) } } } }) } if (I.formatStrings) { i.each(I.aggregates, function (X) { var W = I.formatStrings[X]; if (W) { if (this == "min" || this == "max" || this == "count" || this == "product" || this == "sum" || this == "avg" || this == "stdev" || this == "stdevp" || this == "var" || this == "varp") { var Y = Q[I.name][this]; Q[I.name][this] = i.jqx.dataFormat.formatnumber(Y, W, P) } else { if (typeof this == "object") { for (obj in this) { var Y = Q[I.name][obj]; Q[I.name][obj] = i.jqx.dataFormat.formatnumber(Y, W, P) } } } } }) } } return Q }, bindDownloadComplete: function (H, e) { this._downloadComplete[this._downloadComplete.length] = { id: H, func: e} }, unbindDownloadComplete: function (H) { for (var e = 0; e < this._downloadComplete.length; e++) { if (this._downloadComplete[e].id == H) { this._downloadComplete[e].func = null; this._downloadComplete.splice(e, 1); break } } }, callDownloadComplete: function () { for (var e = 0; e < this._downloadComplete.length; e++) { var H = this._downloadComplete[e]; if (H.func != null) { H.func() } } }, setSource: function (e) { this._source = e }, generatekey: function () { var e = function () { return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1) }; return (e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e()) }, getGroupedRecords: function (aj, am, W, ae, ak, ab, ad, an, K) { var ag = 0; var aa = this; if (!K) { K = 0 } var I = new Array(); for (var N = 0; N < aj.length; N++) { I[N] = aa.generatekey() } if (!am) { am = "items" } if (!W) { W = "group" } if (!ak) { ak = "record" } if (!ad) { ad = "parentItem" } if (undefined === ab) { ab = "value" } var S = new Array(); var L = 0; var J = new Array(); var R = aj.length; var al = new Array(); if (!an) { var an = this.records } var P = an.length; var af = function (ao) { var ap = ao; if (ae) { i.each(ae, function () { if (this.name && this.map) { ap[this.map] = ap[this.name] } }) } return ap }; for (var V = 0; V < P; V++) { var ai = af(an[V]); id = ai[aa.uniqueId]; var H = new Array(); var X = 0; for (N = 0; N < R; N++) { var Q = aj[N]; var ac = ai[Q]; if (null == ac) { continue } H[X++] = { value: ac, hash: I[N]} } if (H.length != R) { break } var Y = null; var T = ""; var e = -1; for (var Z = 0; Z < H.length; Z++) { e++; var ah = H[Z].value; var M = H[Z].hash; T = T + "_" + M + "_" + ah; if (J[T] != undefined && J[T] != null) { Y = J[T]; continue } if (Y == null) { Y = { level: 0 }; Y[ad] = null; Y[W] = ah; Y[ak] = ai; if (ai.expanded !== undefined) { Y.expanded = ai.expanded } else { Y.expanded = false } if (ab) { Y[ab] = ai[ab] } Y[am] = new Array(); var O = S.length + K; if (!this._source.id || typeof ai.uid === "number" || isFinite(ai.uid)) { O = "Row" + O } Y.uid = O; S[L++] = Y } else { var U = { level: Y.level + 1 }; U[ad] = Y; U[W] = ah; U[am] = new Array(); U[ak] = ai; if (ai.expanded !== undefined) { U.expanded = ai.expanded } else { U.expanded = false } if (ab) { U[ab] = ai[ab] } U.uid = Y.uid + "_" + Y[am].length; Y[am][Y[am].length] = U; Y = U } J[T] = Y } if (ai) { ai.leaf = true } if (Y != null) { if (this._source.id == null) { ai.uid = Y.uid + "_" + Y[am].length } ai[ad] = Y; ai.level = Y.level + 1; Y[am][Y[am].length] = ai } else { if (!ai.uid) { ai.uid = this.generatekey() } } } return S }, getRecordsHierarchy: function (L, J, aa, U, H) { var e = new Array(); var I = this.records; if (H) { I = H } if (this.records.length == 0) { return null } var Y = aa != null ? aa : "items"; var R = []; var ab = I; var O = ab.length; var P = (this._source && this._source.hierarchy) ? this._source.hierarchy.reservedNames : null; var W = function (ac) { var ad = ac; if (U) { i.each(U, function () { if (this.name && this.map) { ad[this.map] = ad[this.name] } }) } return ad }; for (var X = 0; X < O; X++) { var Z = i.extend({}, ab[X]); var T = Z[J]; var S = Z[L]; R[S] = { parentid: T, item: Z} } for (var X = 0; X < O; X++) { var Z = i.extend({}, ab[X]); var T = Z[J]; var S = Z[L]; if (R[T] != undefined) { var Z = { parentid: T, item: R[S].item }; var Q = R[T].item; if (!Q[Y]) { Q[Y] = [] } var M = Q[Y].length; var K = Z.item; if (!P) { if (K.parent == undefined) { K.parent = Q } } else { if (K[P.parent] == undefined) { K[P.parent] = Q } } var N = W(K); Q[Y][M] = N; R[T].item = Q; R[S] = Z } else { var K = R[S].item; if (!P) { if (K.parent == undefined) { K.parent = null } } else { if (K[P.parent] == undefined) { K[P.parent] = null } } var N = W(K); if (!P) { N.level = 0 } else { N[P.level] = 0 } e[e.length] = N } } if (e.length != 0) { var V = function (af, ac) { for (var ad = 0; ad < ac.length; ad++) { if (!P) { ac[ad].level = af } else { ac[ad][P.level] = af } var ae = ac[ad][Y]; if (ae) { if (ae.length > 0) { V(af + 1, ae) } else { if (!P) { ac[ad].leaf = true } else { ac[ad][P.leaf] = true } } } else { if (!P) { ac[ad].leaf = true } else { ac[ad][P.leaf] = true } } } }; V(0, e) } return e }, bindBindingUpdate: function (H, e) { this._bindingUpdate[this._bindingUpdate.length] = { id: H, func: e} }, unbindBindingUpdate: function (H) { for (var e = 0; e < this._bindingUpdate.length; e++) { if (this._bindingUpdate[e].id == H) { this._bindingUpdate[e].func = null; this._bindingUpdate.splice(e, 1); break } } }, callBindingUpdate: function (e) { for (var I = 0; I < this._bindingUpdate.length; I++) { var H = this._bindingUpdate[I]; if (H.func != null) { H.func(e) } } }, getid: function (N, H, K) { if (N != null && N.name != undefined) { if (N.name) { var e = i(H).attr(N.name); if (e != null && e.toString().length > 0) { return e } else { if (N.map) { try { var e = i(H).attr(N.map); if (e != null && e.toString().length > 0) { return e } else { if (i(N.map, H).length > 0) { return i(N.map, H).text() } else { if (i(N.name, H).length > 0) { return i(N.name, H).text() } } } } catch (J) { return K } } } return } } if (i(N, H).length > 0) { return i(N, H).text() } if (N) { if (N.toString().length > 0) { var e = i(H).attr(N); if (e != null && e.toString().length > 0) { return e } else { var I = N.split(this.mapChar); if (I.length > 1) { var M = H; for (var L = 0; L < I.length; L++) { if (M != undefined) { M = M[I[L]] } } if (M != undefined) { return M } } else { if (H[N] != undefined) { return H[N] } } } } } return K }, loadjson: function (ae, af, R) { if (typeof (ae) == "string") { ae = i.parseJSON(ae) } if (R.root == undefined) { R.root = "" } if (R.record == undefined) { R.record = "" } var ae = ae || af; if (!ae) { ae = [] } var ad = this; if (R.root != "") { var K = R.root.split(ad.mapChar); if (K.length > 1) { var aa = ae; for (var Q = 0; Q < K.length; Q++) { if (aa != undefined) { aa = aa[K[Q]] } } ae = aa } else { if (ae[R.root] != undefined) { ae = ae[R.root] } else { i.each(ae, function (ah) { var ag = this; if (this == R.root) { ae = this; return false } else { if (this[R.root] != undefined) { ae = this[R.root] } } }) } if (!ae) { var K = R.root.split(ad.mapChar); if (K.length > 0) { var aa = ae; for (var Q = 0; Q < K.length; Q++) { if (aa != undefined) { aa = aa[K[Q]] } } ae = aa } } } } else { if (!ae.length) { for (obj in ae) { if (i.isArray(ae[obj])) { ae = ae[obj]; break } } } } if (ae != null && ae.length == undefined) { ae = i.makeArray(ae) } if (ae == null || ae.length == undefined) { alert("JSON Parse error."); return } if (ae.length == 0) { this.totalrecords = 0; return } var J = ae.length; this.totalrecords = this.virtualmode ? (R.totalrecords || J) : J; this.records = new Array(); this.originaldata = new Array(); var W = this.records; var T = !this.pageable ? R.recordstartindex : this.pagesize * this.pagenum; this.recordids = new Array(); if (R.loadallrecords) { T = 0; J = this.totalrecords } var P = 0; if (this.virtualmode) { T = !this.pageable ? R.recordstartindex : this.pagesize * this.pagenum; P = T; T = 0; J = this.totalrecords } var Y = R.datafields ? R.datafields.length : 0; if (Y == 0) { var e = ae[0]; var ab = new Array(); for (obj in e) { var H = obj; ab[ab.length] = { name: H} } R.datafields = ab; Y = ab.length } var M = T; for (var V = T; V < J; V++) { var I = ae[V]; if (I == undefined) { break } if (R.record && R.record != "") { I = I[R.record]; if (I == undefined) { continue } } var ac = this.getid(R.id, I, V); if (typeof (ac) === "object") { ac = V } if (!this.recordids[ac]) { this.recordids[ac] = I; var L = {}; for (var U = 0; U < Y; U++) { var N = R.datafields[U]; var S = ""; if (undefined == N || N == null) { continue } if (N.map) { if (i.isFunction(N.map)) { S = N.map(I) } else { var K = N.map.split(ad.mapChar); if (K.length > 0) { var Z = I; for (var Q = 0; Q < K.length; Q++) { if (Z != undefined) { Z = Z[K[Q]] } } S = Z } else { S = I[N.map] } } if (S != undefined && S != null) { S = this.getvaluebytype(S, N) } else { if (S == undefined && S != null) { S = "" } } } if (S == "" && !N.map) { S = I[N.name]; if (S == undefined && S != null) { S = "" } if (N.value != undefined) { if (S != undefined) { var X = S[N.value]; if (X != undefined) { S = X } } } } S = this.getvaluebytype(S, N); if (N.displayname != undefined) { L[N.displayname] = S } else { L[N.name] = S } if (N.type === "array") { var O = function (aj) { if (!aj) { return } for (var ap = 0; ap < aj.length; ap++) { var am = aj[ap]; if (!am) { continue } for (var an = 0; an < Y; an++) { var ai = R.datafields[an]; var ao = ""; if (undefined == ai || ai == null) { continue } if (ai.map) { if (i.isFunction(ai.map)) { ao = ai.map(am) } else { var ag = ai.map.split(ad.mapChar); if (ag.length > 0) { var al = am; for (var ah = 0; ah < ag.length; ah++) { if (al != undefined) { al = al[ag[ah]] } } ao = al } else { ao = am[ai.map] } } if (ao != undefined && ao != null) { ao = this.getvaluebytype(ao, ai) } else { if (ao == undefined && ao != null) { ao = "" } } } if (ao == "" && !ai.map) { ao = am[ai.name]; if (ao == undefined && ao != null) { ao = "" } if (ai.value != undefined) { if (ao != undefined) { var ak = ao[ai.value]; if (ak != undefined) { ao = ak } } } } ao = this.getvaluebytype(ao, ai); if (ai.displayname != undefined) { am[ai.displayname] = ao } else { am[ai.name] = ao } if (ai.type === "array") { O.call(this, ao) } } } }; O.call(this, S) } } if (R.recordendindex <= 0 || T < R.recordendindex) { W[P + M] = i.extend({}, L); W[P + M].uid = ac; this.originaldata[P + M] = i.extend({}, W[V]); M++ } } } this.records = W; this.cachedrecords = this.records }, loadxml: function (K, ai, U) { if (typeof (K) == "string") { K = ai = i(i.parseXML(K)); K = null } if (U.root == undefined) { U.root = "" } if (U.record == undefined) { U.record = "" } var K; if (i.jqx.browser.msie && ai) { if (ai.xml != undefined) { K = i(U.root + " " + U.record, i.parseXML(ai.xml)) } else { K = K || i(U.root + " " + U.record, ai) } } else { K = K || i(U.root + " " + U.record, ai) } if (!K) { K = [] } var J = K.length; if (K.length == 0) { return } this.totalrecords = this.virtualmode ? (U.totalrecords || J) : J; this.records = new Array(); this.originaldata = new Array(); var aa = this.records; var X = !this.pageable ? U.recordstartindex : this.pagesize * this.pagenum; this.recordids = new Array(); if (U.loadallrecords) { X = 0; J = this.totalrecords } var S = 0; if (this.virtualmode) { X = !this.pageable ? U.recordstartindex : this.pagesize * this.pagenum; S = X; X = 0; J = this.totalrecords } var ac = U.datafields ? U.datafields.length : 0; if (ac == 0) { var e = K[0]; var af = new Array(); for (obj in e) { var H = obj; af[af.length] = { name: H} } U.datafields = af; ac = af.length } var T = X; var ae = false; for (var Z = X; Z < J; Z++) { var I = K[Z]; if (I == undefined) { break } var ah = this.getid(U.id, I, Z); if (!this.recordids[ah]) { this.recordids[ah] = I; var L = {}; var P = false; if (U.hierarchy && U.hierarchy.root) { P = true } for (var Y = 0; Y < ac; Y++) { var Q = U.datafields[Y]; var W = ""; if (undefined == Q || Q == null) { continue } if (Q.map) { if (i.isFunction(Q.map)) { W = Q.map(I) } else { var M = Q.map.indexOf("["); if (M < 0) { W = i(Q.map, I); if (W.length == 1) { W = W.text() } else { ae = true; var ag = new Array(); for (var ab = 0; ab < W.length; ab++) { ag.push(i(W[ab]).text()) } W = ag; if (P && ag.length > 0) { W = ag[0] } } } else { var ad = Q.map.substring(0, M - 1); var O = Q.map.indexOf("]"); var R = Q.map.substring(M + 1, O); W = i(ad, I).attr(R); if (W == undefined) { W = i(I).attr(R) } if (W == undefined) { W = "" } } if (W == "") { W = i(I).attr(Q.map); if (W == undefined) { W = "" } } } } if (W == "") { W = i(Q.name, I); if (W.length == 1) { W = W.text() } else { var ag = new Array(); for (var ab = 0; ab < W.length; ab++) { ag.push(i(W[ab]).text()) } W = ag; if (P && ag.length > 0) { W = ag[0] } } if (W == "") { W = i(I).attr(Q.name); if (W == undefined) { W = "" } } if (W == "") { if (I.nodeName && I.nodeName == Q.name && I.firstChild) { W = i(I.firstChild).text() } } } var V = W; W = this.getvaluebytype(W, Q); if (Q.displayname != undefined) { L[Q.displayname] = W } else { L[Q.name] = W } } if (U.recordendindex <= 0 || X < U.recordendindex) { aa[S + T] = i.extend({}, L); aa[S + T].uid = ah; this.originaldata[S + T] = i.extend({}, aa[Z]); T++ } } } if (U.hierarchy && U.hierarchy.root) { for (var Z = X; Z < J; Z++) { var I = K[Z]; var N = aa[Z]; if (i(I).parent().length > 0) { var ah = this.getid(U.id, i(I).parents(U.hierarchy.record + ":first")); N.parentuid = ah } else { N.parentuid = null } } } this.records = aa; this.cachedrecords = this.records }, loadtext: function (Y, P) { if (Y == null) { return } var e = P.rowDelimiter || this.rowDelimiter || "\n"; var L = Y.split(e); var J = L.length; var X = Y.split("\r"); if (J == 1 && X.length > 1) { L = X; J = L.length } this.totalrecords = this.virtualmode ? (P.totalrecords || J) : J; this.records = new Array(); this.originaldata = new Array(); var U = this.records; var R = !this.pageable ? P.recordstartindex : this.pagesize * this.pagenum; this.recordids = new Array(); if (P.loadallrecords) { R = 0; J = this.totalrecords } var N = 0; if (this.virtualmode) { R = !this.pageable ? P.recordstartindex : this.pagesize * this.pagenum; N = R; R = 0; J = this.totalrecords } var V = P.datafields.length; var O = P.columnDelimiter || this.columnDelimiter; if (!O) { O = (P.datatype === "tab" || P.datatype === "tsv") ? "\t" : "," } for (var T = R; T < J; T++) { var I = L[T]; var W = null; if (!this.recordids[W]) { if (P.id == null) { W = T; this.recordids[W] = I } var K = {}; var H = L[T].split(O); for (var S = 0; S < V; S++) { if (S >= H.length) { continue } var M = P.datafields[S]; var Q = H[S]; if (M.map && i.isFunction(M.map)) { Q = M.map(I) } if (M.type) { Q = this.getvaluebytype(Q, M) } var Z = M.map || M.name || S.toString(); K[Z] = Q; if (P.id != null) { if (P.id === M.name) { W = Q; this.recordids[W] = I } } } if (W == null) { W = T } U[N + T] = i.extend({}, K); U[N + T].uid = W; this.originaldata[N + T] = i.extend({}, U[T]) } } this.records = U; this.cachedrecords = this.records }, getvaluebytype: function (L, H) { var J = L; if (L == null) { return L } if (i.isArray(L) && H.type != "array") { for (var I = 0; I < L.length; I++) { L[I] = this.getvaluebytype(L[I], H) } return L } if (H.type == "date") { if (L == "NaN") { L = "" } else { var K = new Date(L); if (typeof L == "string") { if (H.format) { var e = i.jqx.dataFormat.parsedate(L, H.format); if (e != null) { K = e } } } if (K.toString() == "NaN" || K.toString() == "Invalid Date") { if (i.jqx.dataFormat) { L = i.jqx.dataFormat.tryparsedate(L) } else { L = K } } else { L = K } if (L == null) { L = J } } } else { if (H.type == "float" || H.type == "number" || H.type == "decimal") { if (L == "NaN") { L = "" } else { var L = parseFloat(L); if (isNaN(L)) { L = J } } } else { if (H.type == "int" || H.type == "integer") { var L = parseInt(L); if (isNaN(L)) { L = J } } else { if (H.type == "bool" || H.type == "boolean") { if (L != null) { if (L.toLowerCase != undefined) { if (L.toLowerCase() == "false") { L = false } else { if (L.toLowerCase() == "true") { L = true } } } } if (L == 1) { L = true } else { if (L == 0 && L !== "") { L = false } else { L = "" } } } } } } return L } }; i.jqx.dataFormat = {}; i.extend(i.jqx.dataFormat, { regexTrim: /^\s+|\s+$/g, regexInfinity: /^[+-]?infinity$/i, regexHex: /^0x[a-f0-9]+$/i, regexParseFloat: /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/, toString: Object.prototype.toString, isBoolean: function (e) { return typeof e === "boolean" }, isObject: function (e) { return (e && (typeof e === "object" || i.isFunction(e))) || false }, isDate: function (e) { return e instanceof Date }, arrayIndexOf: function (J, I) { if (J.indexOf) { return J.indexOf(I) } for (var e = 0, H = J.length; e < H; e++) { if (J[e] === I) { return e } } return -1 }, isString: function (e) { return typeof e === "string" }, isNumber: function (e) { return typeof e === "number" && isFinite(e) }, isNull: function (e) { return e === null }, isUndefined: function (e) { return typeof e === "undefined" }, isValue: function (e) { return (this.isObject(e) || this.isString(e) || this.isNumber(e) || this.isBoolean(e)) }, isEmpty: function (e) { if (!this.isString(e) && this.isValue(e)) { return false } else { if (!this.isValue(e)) { return true } } e = i.trim(e).replace(/\&nbsp\;/ig, "").replace(/\&#160\;/ig, ""); return e === "" }, startsWith: function (H, e) { return H.indexOf(e) === 0 }, endsWith: function (H, e) { return H.substr(H.length - e.length) === e }, trim: function (e) { return (e + "").replace(this.regexTrim, "") }, isArray: function (e) { return this.toString.call(e) === "[object Array]" }, defaultcalendar: function () { var e = { "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0}], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss", ISO: "yyyy-MM-dd hh:mm:ss", ISO2: "yyyy-MM-dd HH:mm:ss", d1: "dd.MM.yyyy", d2: "dd-MM-yyyy", zone1: "yyyy-MM-ddTHH:mm:ss-HH:mm", zone2: "yyyy-MM-ddTHH:mm:ss+HH:mm", custom: "yyyy-MM-ddTHH:mm:ss.fff", custom2: "yyyy-MM-dd HH:mm:ss.fff" }, percentsymbol: "%", currencysymbol: "$", currencysymbolposition: "before", decimalseparator: ".", thousandsseparator: "," }; return e }, expandFormat: function (K, J) { J = J || "F"; var I, H = K.patterns, e = J.length; if (e === 1) { I = H[J]; if (!I) { throw "Invalid date format string '" + J + "'." } J = I } else { if (e === 2 && J.charAt(0) === "%") { J = J.charAt(1) } } return J }, getEra: function (I, H) { if (!H) { return 0 } if (typeof I === "string") { return 0 } var L, K = I.getTime(); for (var J = 0, e = H.length; J < e; J++) { L = H[J].start; if (L === null || K >= L) { return J } } return 0 }, toUpper: function (e) { return e.split("\u00A0").join(" ").toUpperCase() }, toUpperArray: function (e) { var J = []; for (var I = 0, H = e.length; I < H; I++) { J[I] = this.toUpper(e[I]) } return J }, getEraYear: function (H, J, e, K) { var I = H.getFullYear(); if (!K && J.eras) { I -= J.eras[e].offset } return I }, toUpper: function (e) { if (e) { return e.toUpperCase() } return "" }, getDayIndex: function (K, J, H) { var e, L = K.days, I = K._upperDays; if (!I) { K._upperDays = I = [this.toUpperArray(L.names), this.toUpperArray(L.namesAbbr), this.toUpperArray(L.namesShort)] } J = J.toUpperCase(); if (H) { e = this.arrayIndexOf(I[1], J); if (e === -1) { e = this.arrayIndexOf(I[2], J) } } else { e = this.arrayIndexOf(I[0], J) } return e }, getMonthIndex: function (N, M, I) { var e = N.months, H = N.monthsGenitive || N.months, K = N._upperMonths, L = N._upperMonthsGen; if (!K) { N._upperMonths = K = [this.toUpperArray(e.names), this.toUpperArray(e.namesAbbr)]; N._upperMonthsGen = L = [this.toUpperArray(H.names), this.toUpperArray(H.namesAbbr)] } M = this.toUpper(M); var J = this.arrayIndexOf(I ? K[1] : K[0], M); if (J < 0) { J = this.arrayIndexOf(I ? L[1] : L[0], M) } return J }, appendPreOrPostMatch: function (J, e) { var I = 0, L = false; for (var K = 0, H = J.length; K < H; K++) { var M = J.charAt(K); switch (M) { case "'": if (L) { e.push("'") } else { I++ } L = false; break; case "\\": if (L) { e.push("\\") } L = !L; break; default: e.push(M); L = false; break } } return I }, getTokenRegExp: function () { return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g }, formatlink: function (e, I) { var H = ""; if (I && I.target) { H = "target=" + I.target } if (H != "") { return "<a " + H + ' href="' + e + '">' + e + "</a>" } return '<a href="' + e + '">' + e + "</a>" }, formatemail: function (e) { return '<a href="mailto:' + e + '">' + e + "</a>" }, formatNumber: function (e, I, H) { return this.formatnumber(e, I, H) }, formatnumber: function (T, S, O) { if (O == undefined || O == null || O == "") { O = this.defaultcalendar() } if (S === "" || S === null) { return T } if (!this.isNumber(T)) { T *= 1 } var P; if (S.length > 1) { P = parseInt(S.slice(1), 10) } var V = {}; var Q = S.charAt(0).toUpperCase(); V.thousandsSeparator = O.thousandsseparator; V.decimalSeparator = O.decimalseparator; switch (Q) { case "D": case "d": case "F": case "f": V.decimalPlaces = P; break; case "N": case "n": V.decimalPlaces = 0; break; case "C": case "c": V.decimalPlaces = P; if (O.currencysymbolposition == "before") { V.prefix = O.currencysymbol } else { V.suffix = O.currencysymbol } break; case "P": case "p": V.suffix = O.percentsymbol; V.decimalPlaces = P; break; default: throw "Bad number format specifier: " + Q } if (this.isNumber(T)) { var K = (T < 0); var I = T + ""; var R = (V.decimalSeparator) ? V.decimalSeparator : "."; var e; if (this.isNumber(V.decimalPlaces)) { var L = V.decimalPlaces; var N = Math.pow(10, L); I = (T * N).toFixed(0) / N + ""; e = I.lastIndexOf("."); if (L > 0) { if (e < 0) { I += R; e = I.length - 1 } else { if (R !== ".") { I = I.replace(".", R) } } while ((I.length - 1 - e) < L) { I += "0" } } } if (V.thousandsSeparator) { var U = V.thousandsSeparator; e = I.lastIndexOf(R); e = (e > -1) ? e : I.length; var J = I.substring(e); var H = -1; for (var M = e; M > 0; M--) { H++; if ((H % 3 === 0) && (M !== e) && (!K || (M > 1))) { J = U + J } J = I.charAt(M - 1) + J } I = J } I = (V.prefix) ? V.prefix + I : I; I = (V.suffix) ? I + V.suffix : I; return I } else { return T } }, tryparsedate: function (T, M) { if (M == undefined || M == null) { M = this.defaultcalendar() } var Q = this; if (T == "") { return null } if (T != null && !T.substring) { T = T.toString() } if (T != null && T.substring(0, 6) == "/Date(") { var R = /^\/Date\((-?\d+)(\+|-)?(\d+)?\)\/$/; var J = new Date(+T.replace(/\/Date\((\d+)\)\//, "$1")); if (J == "Invalid Date") { var K = T.match(/^\/Date\((\d+)([-+]\d\d)(\d\d)\)\/$/); var J = null; if (K) { J = new Date(1 * K[1] + 3600000 * K[2] + 60000 * K[3]) } } if (J == null || J == "Invalid Date" || isNaN(J)) { var N = R.exec(T); if (N) { var U = new Date(parseInt(N[1])); if (N[2]) { var e = parseInt(N[3]); if (N[2] === "-") { e = -e } var P = U.getUTCMinutes(); U.setUTCMinutes(P - e) } if (!isNaN(U.valueOf())) { return U } } } return J } patterns = M.patterns; for (prop in patterns) { J = Q.parsedate(T, patterns[prop], M); if (J) { if (prop == "ISO") { var I = Q.parsedate(T, patterns.ISO2, M); if (I) { return I } } return J } } if (T != null) { var I = null; var S = [":", "/", "-"]; var O = true; for (var H = 0; H < S.length; H++) { if (T.indexOf(S[H]) != -1) { O = false } } if (O) { var L = new Number(T); if (!isNaN(L)) { return new Date(L) } } } return null }, getparseregexp: function (e, R) { var T = e._parseRegExp; if (!T) { e._parseRegExp = T = {} } else { var K = T[R]; if (K) { return K } } var Q = this.expandFormat(e, R).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"), O = ["^"], H = [], N = 0, J = 0, W = this.getTokenRegExp(), L; while ((L = W.exec(Q)) !== null) { var V = Q.slice(N, L.index); N = W.lastIndex; J += this.appendPreOrPostMatch(V, O); if (J % 2) { O.push(L[0]); continue } var I = L[0], M = I.length, S; switch (I) { case "dddd": case "ddd": case "MMMM": case "MMM": case "gg": case "g": S = "(\\D+)"; break; case "tt": case "t": S = "(\\D*)"; break; case "yyyy": case "fff": case "ff": case "f": S = "(\\d{" + M + "})"; break; case "dd": case "d": case "MM": case "M": case "yy": case "y": case "HH": case "H": case "hh": case "h": case "mm": case "m": case "ss": case "s": S = "(\\d\\d?)"; break; case "zzz": S = "([+-]?\\d\\d?:\\d{2})"; break; case "zz": case "z": S = "([+-]?\\d\\d?)"; break; case "/": S = "(\\" + e["/"] + ")"; break; default: throw "Invalid date format pattern '" + I + "'."; break } if (S) { O.push(S) } H.push(L[0]) } this.appendPreOrPostMatch(Q.slice(N), O); O.push("$"); var U = O.join("").replace(/\s+/g, "\\s+"), P = { regExp: U, groups: H }; return T[R] = P }, outOfRange: function (I, e, H) { return I < e || I > H }, expandYear: function (L, J) { var H = new Date(), e = this.getEra(H); if (J < 100) { var I = L.twoDigitYearMax; I = typeof I === "string" ? new Date().getFullYear() % 100 + parseInt(I, 10) : I; var K = this.getEraYear(H, L, e); J += K - (K % 100); if (J > I) { J -= 100 } } return J }, parsedate: function (ab, ai, W) { if (W == undefined || W == null) { W = this.defaultcalendar() } ab = this.trim(ab); var T = W, an = this.getparseregexp(T, ai), N = new RegExp(an.regExp).exec(ab); if (N === null) { return null } var aj = an.groups, Z = null, R = null, am = null, al = null, S = null, L = 0, ae, ad = 0, ak = 0, e = 0, I = null, U = false; for (var af = 0, ah = aj.length; af < ah; af++) { var H = N[af + 1]; if (H) { var aa = aj[af], K = aa.length, M = parseInt(H, 10); switch (aa) { case "dd": case "d": al = M; if (this.outOfRange(al, 1, 31)) { return null } break; case "MMM": case "MMMM": am = this.getMonthIndex(T, H, K === 3); if (this.outOfRange(am, 0, 11)) { return null } break; case "M": case "MM": am = M - 1; if (this.outOfRange(am, 0, 11)) { return null } break; case "y": case "yy": case "yyyy": R = K < 4 ? this.expandYear(T, M) : M; if (this.outOfRange(R, 0, 9999)) { return null } break; case "h": case "hh": L = M; if (L === 12) { L = 0 } if (this.outOfRange(L, 0, 11)) { return null } break; case "H": case "HH": L = M; if (this.outOfRange(L, 0, 23)) { return null } break; case "m": case "mm": ad = M; if (this.outOfRange(ad, 0, 59)) { return null } break; case "s": case "ss": ak = M; if (this.outOfRange(ak, 0, 59)) { return null } break; case "tt": case "t": U = T.PM && (H === T.PM[0] || H === T.PM[1] || H === T.PM[2]); if (!U && (!T.AM || (H !== T.AM[0] && H !== T.AM[1] && H !== T.AM[2]))) { return null } break; case "f": case "ff": case "fff": e = M * Math.pow(10, 3 - K); if (this.outOfRange(e, 0, 999)) { return null } break; case "ddd": case "dddd": S = this.getDayIndex(T, H, K === 3); if (this.outOfRange(S, 0, 6)) { return null } break; case "zzz": var J = H.split(/:/); if (J.length !== 2) { return null } ae = parseInt(J[0], 10); if (this.outOfRange(ae, -12, 13)) { return null } var P = parseInt(J[1], 10); if (this.outOfRange(P, 0, 59)) { return null } I = (ae * 60) + (startsWith(H, "-") ? -P : P); break; case "z": case "zz": ae = M; if (this.outOfRange(ae, -12, 13)) { return null } I = ae * 60; break; case "g": case "gg": var V = H; if (!V || !T.eras) { return null } V = trim(V.toLowerCase()); for (var ag = 0, ac = T.eras.length; ag < ac; ag++) { if (V === T.eras[ag].name.toLowerCase()) { Z = ag; break } } if (Z === null) { return null } break } } } var Q = new Date(), Y, O = T.convert; Y = Q.getFullYear(); if (R === null) { R = Y } else { if (T.eras) { R += T.eras[(Z || 0)].offset } } if (am === null) { am = 0 } if (al === null) { al = 1 } if (O) { Q = O.toGregorian(R, am, al); if (Q === null) { return null } } else { Q.setFullYear(R, am, al); if (Q.getDate() !== al) { return null } if (S !== null && Q.getDay() !== S) { return null } } if (U && L < 12) { L += 12 } Q.setHours(L, ad, ak, e); if (I !== null) { var X = Q.getMinutes() - (I + Q.getTimezoneOffset()); Q.setHours(Q.getHours() + parseInt(X / 60, 10), X % 60) } return Q }, cleardatescache: function () { this.datescache = new Array() }, formatDate: function (e, I, H) { return this.formatdate(e, I, H) }, formatdate: function (Z, ad, U) { if (U == undefined || U == null) { U = this.defaultcalendar() } if (typeof Z === "string") { return Z } var J = Z.toString() + "_" + ad; if (this.datescache && this.datescache[J]) { return this.datescache[J] } if (!ad || !ad.length || ad === "i") { var af; af = this.formatDate(Z, U.patterns.F, culture); return af } var aa = U.eras, H = ad === "s"; ad = this.expandFormat(U, ad); af = []; var M, ab = ["0", "00", "000"], Q, R, e = /([^d]|^)(d|dd)([^d]|$)/g, ae = 0, W = this.getTokenRegExp(), I; function O(ag, aj) { var ai, ah = ag + ""; if (aj > 1 && ah.length < aj) { ai = (ab[aj - 2] + ah); return ai.substr(ai.length - aj, aj) } else { ai = ah } return ai } function ac() { if (Q || R) { return Q } Q = e.test(ad); R = true; return Q } function K(ah, ag) { if (I) { return I[ag] } if (ah.getMonth != undefined) { switch (ag) { case 0: return ah.getFullYear(); case 1: return ah.getMonth(); case 2: return ah.getDate() } } } for (; ; ) { var N = W.lastIndex, V = W.exec(ad); var S = ad.slice(N, V ? V.index : ad.length); ae += this.appendPreOrPostMatch(S, af); if (!V) { break } if (ae % 2) { af.push(V[0]); continue } var X = V[0], L = X.length; switch (X) { case "ddd": case "dddd": var T = (L === 3) ? U.days.namesAbbr : U.days.names; af.push(T[Z.getDay()]); break; case "d": case "dd": Q = true; af.push(O(K(Z, 2), L)); break; case "MMM": case "MMMM": var Y = K(Z, 1); af.push(U.months[L === 3 ? "namesAbbr" : "names"][Y]); break; case "M": case "MM": af.push(O(K(Z, 1) + 1, L)); break; case "y": case "yy": case "yyyy": Y = this.getEraYear(Z, U, this.getEra(Z, aa), H); if (L < 4) { Y = Y % 100 } af.push(O(Y, L)); break; case "h": case "hh": M = Z.getHours() % 12; if (M === 0) { M = 12 } af.push(O(M, L)); break; case "H": case "HH": af.push(O(Z.getHours(), L)); break; case "m": case "mm": af.push(O(Z.getMinutes(), L)); break; case "s": case "ss": af.push(O(Z.getSeconds(), L)); break; case "t": case "tt": Y = Z.getHours() < 12 ? (U.AM ? U.AM[0] : " ") : (U.PM ? U.PM[0] : " "); af.push(L === 1 ? Y.charAt(0) : Y); break; case "f": case "ff": case "fff": af.push(O(Z.getMilliseconds(), 3).substr(0, L)); break; case "z": case "zz": M = Z.getTimezoneOffset() / 60; af.push((M <= 0 ? "+" : "-") + O(Math.floor(Math.abs(M)), L)); break; case "zzz": M = Z.getTimezoneOffset() / 60; af.push((M <= 0 ? "+" : "-") + O(Math.floor(Math.abs(M)), 2) + ":" + O(Math.abs(Z.getTimezoneOffset() % 60), 2)); break; case "g": case "gg": if (U.eras) { af.push(U.eras[this.getEra(Z, aa)].name) } break; case "/": af.push(U["/"]); break; default: throw "Invalid date format pattern '" + X + "'."; break } } var P = af.join(""); if (!this.datescache) { this.datescache = new Array() } this.datescache[J] = P; return P } }); i.jqx.data = {}; var l, E, p = /#.*$/, a = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, f = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/, j = /^(?:GET|HEAD)$/, o = /^\/\//, k = /\?/, b = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, d = /([?&])_=[^&]*/, h = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, t = /\s+/, F = jQuery.fn.load, G = {}, C = {}, q = ["*/"] + ["*"]; try { E = location.href } catch (A) { E = document.createElement("a"); E.href = ""; E = E.href } l = h.exec(E.toLowerCase()) || []; function r(e) { return function (K, M) { if (typeof K !== "string") { M = K; K = "*" } var H, N, O, J = K.toLowerCase().split(t), I = 0, L = J.length; if (jQuery.isFunction(M)) { for (; I < L; I++) { H = J[I]; O = /^\+/.test(H); if (O) { H = H.substr(1) || "*" } N = e[H] = e[H] || []; N[O ? "unshift" : "push"](M) } } } } function v(H, Q, L, O, N, J) { N = N || Q.dataTypes[0]; J = J || {}; J[N] = true; var P, M = H[N], I = 0, e = M ? M.length : 0, K = (H === G); for (; I < e && (K || !P); I++) { P = M[I](Q, L, O); if (typeof P === "string") { if (!K || J[P]) { P = undefined } else { Q.dataTypes.unshift(P); P = v(H, Q, L, O, P, J) } } } if ((K || !P) && !J["*"]) { P = v(H, Q, L, O, "*", J) } return P } function u(I, J) { var H, e, K = i.jqx.data.ajaxSettings.flatOptions || {}; for (H in J) { if (J[H] !== undefined) { (K[H] ? I : (e || (e = {})))[H] = J[H] } } if (e) { jQuery.extend(true, I, e) } } i.extend(i.jqx.data, { ajaxSetup: function (H, e) { if (e) { u(H, i.jqx.data.ajaxSettings) } else { e = H; H = i.jqx.data.ajaxSettings } u(H, e); return H }, ajaxSettings: { url: E, isLocal: f.test(l[1]), global: true, type: "GET", contentType: "application/x-www-form-urlencoded; charset=UTF-8", processData: true, async: true, accepts: { xml: "application/xml, text/xml", html: "text/html", text: "text/plain", json: "application/json, text/javascript", "*": q }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText" }, converters: { "* text": window.String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML }, flatOptions: { context: true, url: true} }, ajaxPrefilter: r(G), ajaxTransport: r(C), ajax: function (M, J) { if (typeof M === "object") { J = M; M = undefined } J = J || {}; var P, ad, K, Y, R, V, I, X, Q = i.jqx.data.ajaxSetup({}, J), af = Q.context || Q, T = af !== Q && (af.nodeType || af instanceof jQuery) ? jQuery(af) : jQuery.event, ae = jQuery.Deferred(), aa = jQuery.Callbacks("once memory"), N = Q.statusCode || {}, U = {}, ab = {}, L = 0, O = "canceled", W = { readyState: 0, setRequestHeader: function (ag, ah) { if (!L) { var e = ag.toLowerCase(); ag = ab[e] = ab[e] || ag; U[ag] = ah } return this }, getAllResponseHeaders: function () { return L === 2 ? ad : null }, getResponseHeader: function (ag) { var e; if (L === 2) { if (!K) { K = {}; while ((e = a.exec(ad))) { K[e[1].toLowerCase()] = e[2] } } e = K[ag.toLowerCase()] } return e === undefined ? null : e }, overrideMimeType: function (e) { if (!L) { Q.mimeType = e } return this }, abort: function (e) { e = e || O; if (Y) { Y.abort(e) } S(0, e); return this } }; function S(ak, ag, al, ai) { var e, ao, am, aj, an, ah = ag; if (L === 2) { return } L = 2; if (R) { clearTimeout(R) } Y = undefined; ad = ai || ""; W.readyState = ak > 0 ? 4 : 0; if (al) { aj = B(Q, W, al) } if (ak >= 200 && ak < 300 || ak === 304) { if (Q.ifModified) { an = W.getResponseHeader("Last-Modified"); if (an) { jQuery.lastModified[P] = an } an = W.getResponseHeader("Etag"); if (an) { jQuery.etag[P] = an } } if (ak === 304) { ah = "notmodified"; e = true } else { e = c(Q, aj); ah = e.state; ao = e.data; am = e.error; e = !am } } else { am = ah; if (!ah || ak) { ah = "error"; if (ak < 0) { ak = 0 } } } W.status = ak; W.statusText = (ag || ah) + ""; if (e) { ae.resolveWith(af, [ao, ah, W]) } else { ae.rejectWith(af, [W, ah, am]) } W.statusCode(N); N = undefined; if (I) { T.trigger("ajax" + (e ? "Success" : "Error"), [W, Q, e ? ao : am]) } aa.fireWith(af, [W, ah]); if (I) { T.trigger("ajaxComplete", [W, Q]); if (!(--jQuery.active)) { jQuery.event.trigger("ajaxStop") } } } ae.promise(W); W.success = W.done; W.error = W.fail; W.complete = aa.add; W.statusCode = function (ag) { if (ag) { var e; if (L < 2) { for (e in ag) { N[e] = [N[e], ag[e]] } } else { e = ag[W.status]; W.always(e) } } return this }; Q.url = ((M || Q.url) + "").replace(p, "").replace(o, l[1] + "//"); Q.dataTypes = jQuery.trim(Q.dataType || "*").toLowerCase().split(t); if (Q.crossDomain == null) { V = h.exec(Q.url.toLowerCase()); Q.crossDomain = !!(V && (V[1] !== l[1] || V[2] !== l[2] || (V[3] || (V[1] === "http:" ? 80 : 443)) != (l[3] || (l[1] === "http:" ? 80 : 443)))) } if (Q.data && Q.processData && typeof Q.data !== "string") { Q.data = jQuery.param(Q.data, Q.traditional) } v(G, Q, J, W); if (L === 2) { return W } I = Q.global; Q.type = Q.type.toUpperCase(); Q.hasContent = !j.test(Q.type); if (I && jQuery.active++ === 0) { jQuery.event.trigger("ajaxStart") } if (!Q.hasContent) { if (Q.data) { Q.url += (k.test(Q.url) ? "&" : "?") + Q.data; delete Q.data } P = Q.url; if (Q.cache === false) { var H = jQuery.now(), ac = Q.url.replace(d, "$1_=" + H); Q.url = ac + ((ac === Q.url) ? (k.test(Q.url) ? "&" : "?") + "_=" + H : "") } } if (Q.data && Q.hasContent && Q.contentType !== false || J.contentType) { W.setRequestHeader("Content-Type", Q.contentType) } if (Q.ifModified) { P = P || Q.url; if (jQuery.lastModified[P]) { W.setRequestHeader("If-Modified-Since", jQuery.lastModified[P]) } if (jQuery.etag[P]) { W.setRequestHeader("If-None-Match", jQuery.etag[P]) } } W.setRequestHeader("Accept", Q.dataTypes[0] && Q.accepts[Q.dataTypes[0]] ? Q.accepts[Q.dataTypes[0]] + (Q.dataTypes[0] !== "*" ? ", " + q + "; q=0.01" : "") : Q.accepts["*"]); for (X in Q.headers) { W.setRequestHeader(X, Q.headers[X]) } if (Q.beforeSend && (Q.beforeSend.call(af, W, Q) === false || L === 2)) { return W.abort() } O = "abort"; for (X in { success: 1, error: 1, complete: 1 }) { W[X](Q[X]) } Y = v(C, Q, J, W); if (!Y) { S(-1, "No Transport") } else { W.readyState = 1; if (I) { T.trigger("ajaxSend", [W, Q]) } if (Q.async && Q.timeout > 0) { R = setTimeout(function () { W.abort("timeout") }, Q.timeout) } try { L = 1; Y.send(U, S) } catch (Z) { if (L < 2) { S(-1, Z) } else { throw Z } } } return W }, active: 0, lastModified: {}, etag: {} }); function B(P, O, L) { var K, M, J, e, H = P.contents, N = P.dataTypes, I = P.responseFields; for (M in I) { if (M in L) { O[I[M]] = L[M] } } while (N[0] === "*") { N.shift(); if (K === undefined) { K = P.mimeType || O.getResponseHeader("content-type") } } if (K) { for (M in H) { if (H[M] && H[M].test(K)) { N.unshift(M); break } } } if (N[0] in L) { J = N[0] } else { for (M in L) { if (!N[0] || P.converters[M + " " + N[0]]) { J = M; break } if (!e) { e = M } } J = J || e } if (J) { if (J !== N[0]) { N.unshift(J) } return L[J] } } function c(R, J) { var P, H, N, L, O = R.dataTypes.slice(), I = O[0], Q = {}, K = 0; if (R.dataFilter) { J = R.dataFilter(J, R.dataType) } if (O[1]) { for (P in R.converters) { Q[P.toLowerCase()] = R.converters[P] } } for (; (N = O[++K]); ) { if (N !== "*") { if (I !== "*" && I !== N) { P = Q[I + " " + N] || Q["* " + N]; if (!P) { for (H in Q) { L = H.split(" "); if (L[1] === N) { P = Q[I + " " + L[0]] || Q["* " + L[0]]; if (P) { if (P === true) { P = Q[H] } else { if (Q[H] !== true) { N = L[0]; O.splice(K--, 0, N) } } break } } } } if (P !== true) { if (P && R["throws"]) { J = P(J) } else { try { J = P(J) } catch (M) { return { state: "parsererror", error: P ? M : "No conversion from " + I + " to " + N} } } } } I = N } } return { state: "success", data: J} } var y = [], n = /\?/, D = /(=)\?(?=&|$)|\?\?/, z = jQuery.now(); i.jqx.data.ajaxSetup({ jsonp: "callback", jsonpCallback: function () { var e = y.pop() || (jQuery.expando + "_" + (z++)); this[e] = true; return e } }); i.jqx.data.ajaxPrefilter("json jsonp", function (Q, L, P) { var O, e, N, J = Q.data, H = Q.url, I = Q.jsonp !== false, M = I && D.test(H), K = I && !M && typeof J === "string" && !(Q.contentType || "").indexOf("application/x-www-form-urlencoded") && D.test(J); if (Q.dataTypes[0] === "jsonp" || M || K) { O = Q.jsonpCallback = jQuery.isFunction(Q.jsonpCallback) ? Q.jsonpCallback() : Q.jsonpCallback; e = window[O]; if (M) { Q.url = H.replace(D, "$1" + O) } else { if (K) { Q.data = J.replace(D, "$1" + O) } else { if (I) { Q.url += (n.test(H) ? "&" : "?") + Q.jsonp + "=" + O } } } Q.converters["script json"] = function () { if (!N) { jQuery.error(O + " was not called") } return N[0] }; Q.dataTypes[0] = "json"; window[O] = function () { N = arguments }; P.always(function () { window[O] = e; if (Q[O]) { Q.jsonpCallback = L.jsonpCallback; y.push(O) } if (N && jQuery.isFunction(e)) { e(N[0]) } N = e = undefined }); return "script" } }); i.jqx.data.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /javascript|ecmascript/ }, converters: { "text script": function (e) { jQuery.globalEval(e); return e } } }); i.jqx.data.ajaxPrefilter("script", function (e) { if (e.cache === undefined) { e.cache = false } if (e.crossDomain) { e.type = "GET"; e.global = false } }); i.jqx.data.ajaxTransport("script", function (I) { if (I.crossDomain) { var e, H = document.head || document.getElementsByTagName("head")[0] || document.documentElement; return { send: function (J, K) { e = document.createElement("script"); e.async = "async"; if (I.scriptCharset) { e.charset = I.scriptCharset } e.src = I.url; e.onload = e.onreadystatechange = function (M, L) { if (L || !e.readyState || /loaded|complete/.test(e.readyState)) { e.onload = e.onreadystatechange = null; if (H && e.parentNode) { H.removeChild(e) } e = undefined; if (!L) { K(200, "success") } } }; H.insertBefore(e, H.firstChild) }, abort: function () { if (e) { e.onload(0, 1) } } } } }); var w, x = window.ActiveXObject ? function () { for (var e in w) { w[e](0, 1) } } : false, m = 0; function g() { try { return new window.XMLHttpRequest() } catch (H) { } } function s() { try { return new window.ActiveXObject("Microsoft.XMLHTTP") } catch (H) { } } i.jqx.data.ajaxSettings.xhr = window.ActiveXObject ? function () { return !this.isLocal && g() || s() } : g; (function (e) { jQuery.extend(jQuery.support, { ajax: !!e, cors: !!e && ("withCredentials" in e) }) })(i.jqx.data.ajaxSettings.xhr()); if (jQuery.support.ajax) { i.jqx.data.ajaxTransport(function (e) { if (!e.crossDomain || jQuery.support.cors) { var H; return { send: function (N, I) { var L, K, M = e.xhr(); if (e.username) { M.open(e.type, e.url, e.async, e.username, e.password) } else { M.open(e.type, e.url, e.async) } if (e.xhrFields) { for (K in e.xhrFields) { M[K] = e.xhrFields[K] } } if (e.mimeType && M.overrideMimeType) { M.overrideMimeType(e.mimeType) } if (!e.crossDomain && !N["X-Requested-With"]) { N["X-Requested-With"] = "XMLHttpRequest" } try { for (K in N) { M.setRequestHeader(K, N[K]) } } catch (J) { } M.send((e.hasContent && e.data) || null); H = function (W, Q) { var R, P, O, U, T; try { if (H && (Q || M.readyState === 4)) { H = undefined; if (L) { M.onreadystatechange = jQuery.noop; if (x) { delete w[L] } } if (Q) { if (M.readyState !== 4) { M.abort() } } else { R = M.status; O = M.getAllResponseHeaders(); U = {}; T = M.responseXML; if (T && T.documentElement) { U.xml = T } try { U.text = M.responseText } catch (V) { } try { P = M.statusText } catch (V) { P = "" } if (!R && e.isLocal && !e.crossDomain) { R = U.text ? 200 : 404 } else { if (R === 1223) { R = 204 } } } } } catch (S) { if (!Q) { I(-1, S) } } if (U) { I(R, P, U, O) } }; if (!e.async) { H() } else { if (M.readyState === 4) { setTimeout(H, 0) } else { L = ++m; if (x) { if (!w) { w = {}; jQuery(window).unload(x) } w[L] = H } M.onreadystatechange = H } } }, abort: function () { if (H) { H(0, 1) } } } } }) } i.jqx.filter = function () { this.operator = "and"; var M = 0; var J = 1; var P = ["EMPTY", "NOT_EMPTY", "CONTAINS", "CONTAINS_CASE_SENSITIVE", "DOES_NOT_CONTAIN", "DOES_NOT_CONTAIN_CASE_SENSITIVE", "STARTS_WITH", "STARTS_WITH_CASE_SENSITIVE", "ENDS_WITH", "ENDS_WITH_CASE_SENSITIVE", "EQUAL", "EQUAL_CASE_SENSITIVE", "NULL", "NOT_NULL"]; var R = ["EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "NULL", "NOT_NULL"]; var S = ["EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "NULL", "NOT_NULL"]; var L = ["EQUAL", "NOT_EQUAL"]; var K = new Array(); var Q = new Array(); this.evaluate = function (X) { var V = true; for (var W = 0; W < K.length; W++) { var U = K[W].evaluate(X); if (W == 0) { V = U } else { if (Q[W] == J || Q[W] == "or") { V = V || U } else { V = V && U } } } return V }; this.getfilterscount = function () { return K.length }; this.setoperatorsbyfiltertype = function (U, V) { switch (U) { case "numericfilter": R = V; break; case "stringfilter": P = V; break; case "datefilter": S = V; break; case "booleanfilter": L = V; break } }; this.getoperatorsbyfiltertype = function (U) { var V = new Array(); switch (U) { case "numericfilter": V = R.slice(0); break; case "stringfilter": V = P.slice(0); break; case "datefilter": V = S.slice(0); break; case "booleanfilter": V = L.slice(0); break } return V }; var O = function () { var U = function () { return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1) }; return (U() + "-" + U() + "-" + U()) }; this.createfilter = function (Y, V, X, W, U, Z) { if (Y == null || Y == undefined) { return null } switch (Y) { case "numericfilter": return new N(V, X.toUpperCase()); case "stringfilter": return new T(V, X.toUpperCase()); case "datefilter": return new H(V, X.toUpperCase(), U, Z); case "booleanfilter": return new I(V, X.toUpperCase()); case "custom": return new e(V, X.toUpperCase(), W) } throw new Error("jqxGrid: There is no such filter type. The available filter types are: 'numericfilter', 'stringfilter', 'datefilter' and 'booleanfilter'"); return null }; this.getfilters = function () { var U = new Array(); for (var V = 0; V < K.length; V++) { var W = { value: K[V].filtervalue, condition: K[V].comparisonoperator, operator: Q[V], type: K[V].type }; U[V] = W } return U }; this.addfilter = function (U, V) { K[K.length] = V; V.key = O(); Q[Q.length] = U }; this.removefilter = function (V) { for (var U = 0; U < K.length; U++) { if (K[U].key == V.key) { K.splice(U, 1); Q.splice(U, 1); break } } }; this.getoperatorat = function (U) { if (U == undefined || U == null) { return null } if (U < 0 || U > K.length) { return null } return Q[U] }; this.setoperatorat = function (V, U) { if (V == undefined || V == null) { return null } if (V < 0 || V > K.length) { return null } Q[U] = U }; this.getfilterat = function (U) { if (U == undefined || U == null) { return null } if (U < 0 || U > K.length) { return null } return K[U] }; this.setfilterat = function (U, V) { if (U == undefined || U == null) { return null } if (U < 0 || U > K.length) { return null } V.key = O(); K[U] = V }; this.clear = function () { K = new Array(); Q = new Array() }; var T = function (V, U) { this.filtervalue = V; this.comparisonoperator = U; this.type = "stringfilter"; this.evaluate = function (af) { var ae = this.filtervalue; var al = this.comparisonoperator; if (af == null || af == undefined || af == "") { if (al == "NULL") { return true } if (al == "EQUAL" && af == ae) { return true } if (al == "NOT_EQUAL" && af != ae) { return true } if (al != "EMPTY") { return false } else { if (af == "") { return true } } } var an = ""; try { an = af.toString() } catch (ag) { return true } var am = function (ap, ao) { switch (al) { case "EQUAL": return i.jqx.string.equalsIgnoreCase(ap, ao); case "EQUAL_CASE_SENSITIVE": return i.jqx.string.equals(ap, ao); case "NOT_EQUAL": return !i.jqx.string.equalsIgnoreCase(ap, ao); case "NOT_EQUAL_CASE_SENSITIVE": return !i.jqx.string.equals(ap, ao); case "CONTAINS": return i.jqx.string.containsIgnoreCase(ap, ao); case "CONTAINS_CASE_SENSITIVE": return i.jqx.string.contains(ap, ao); case "DOES_NOT_CONTAIN": return !i.jqx.string.containsIgnoreCase(ap, ao); case "DOES_NOT_CONTAIN_CASE_SENSITIVE": return !i.jqx.string.contains(ap, ao); case "EMPTY": return ap == ""; case "NOT_EMPTY": return ap != ""; case "NOT_NULL": return ap != null; case "STARTS_WITH": return i.jqx.string.startsWithIgnoreCase(ap, ao); case "ENDS_WITH": return i.jqx.string.endsWithIgnoreCase(ap, ao); case "ENDS_WITH_CASE_SENSITIVE": return i.jqx.string.endsWith(ap, ao); case "STARTS_WITH_CASE_SENSITIVE": return i.jqx.string.startsWith(ap, ao); default: return false } }; var Z = new Array(); if (ae && ae.indexOf) { if (ae.indexOf("|") >= 0 || ae.indexOf(" AND ") >= 0 || ae.indexOf(" OR ") >= 0 || ae.indexOf(" and ") >= 0 || ae.indexOf(" or ") >= 0) { var aa = am(an, ae); if (aa) { return aa } var ab = ae.indexOf(" AND ") >= 0 ? ae.split(" AND ") : new Array(); var Y = ae.indexOf(" OR ") >= 0 ? ae.split(" OR ") : new Array(); var X = ae.indexOf(" and ") >= 0 ? ae.split(" and ") : new Array(); var ac = ae.indexOf(" or ") >= 0 ? ae.split(" or ") : new Array(); var W = ae.indexOf("|") >= 0 ? ae.split("|") : new Array(); if (W.length > 0) { for (var ak = 0; ak < W.length; ak++) { W[ak] = i.trim(W[ak]) } } var aj = ae.indexOf(" ") >= 0 ? ae.split(" ") : new Array(); if (aj.length > 0) { for (var ak = 0; ak < aj.length; ak++) { aj[ak] = i.trim(aj[ak]) } } ab = ab.concat(aj); ab = ab.concat(X); Y = Y.concat(W); Y = Y.concat(ac); if (ab.length > 0) { for (var ak = 0; ak < ab.length; ak++) { if (!ab[ak].indexOf(" OR ") >= 0) { Z.push(ab[ak]) } } } if (Y.length > 0) { for (var ak = 0; ak < Y.length; ak++) { if (!Y[ak].indexOf(" AND ") >= 0) { Z.push(Y[ak]) } } } var ai = undefined; for (var ah = 0; ah < Z.length; ah++) { var af = Z[ah]; var aa = am(an, af); var ad = ah < ab.length ? "and" : "or"; if (ai == undefined) { ai = aa } else { if (ad == "or") { ai = ai || aa } else { ai = ai && aa } } } return ai } } return am(an, ae) } }; var I = function (V, U) { this.filtervalue = V; this.comparisonoperator = U; this.type = "booleanfilter"; this.evaluate = function (Y) { var X = this.filtervalue; var W = this.comparisonoperator; if (Y == null || Y == undefined) { if (W == "NULL") { return true } return false } var Z = Y; switch (W) { case "EQUAL": return Z == X || Z.toString() == X.toString(); case "NOT_EQUAL": return Z != X && Z.toString() != X.toString(); default: return false } } }; var N = function (V, U) { this.filtervalue = V; this.comparisonoperator = U; this.type = "numericfilter"; this.evaluate = function (ag) { var af = this.filtervalue; var al = this.comparisonoperator; if (ag === null || ag === undefined || ag === "") { if (al == "NOT_NULL") { return false } if (al == "NULL") { return true } else { switch (al) { case "EQUAL": return ag == af; case "NOT_EQUAL": return ag != af } return false } } else { if (al == "NULL") { return false } if (al == "NOT_NULL") { return true } } var an = ag; try { an = parseFloat(an) } catch (ah) { if (ag.toString() != "") { return false } } var am = function (ap, ao) { switch (al) { case "EQUAL": return ap == ao; case "NOT_EQUAL": return ap != ao; case "GREATER_THAN": return ap > ao; case "GREATER_THAN_OR_EQUAL": return ap >= ao; case "LESS_THAN": return ap < ao; case "LESS_THAN_OR_EQUAL": return ap <= ao; case "STARTS_WITH": return i.jqx.string.startsWithIgnoreCase(ap.toString(), ao.toString()); case "ENDS_WITH": return i.jqx.string.endsWithIgnoreCase(ap.toString(), ao.toString()); case "ENDS_WITH_CASE_SENSITIVE": return i.jqx.string.endsWith(ap.toString(), ao.toString()); case "STARTS_WITH_CASE_SENSITIVE": return i.jqx.string.startsWith(ap.toString(), ao.toString()); case "CONTAINS": return i.jqx.string.containsIgnoreCase(ap.toString(), ao.toString()); case "CONTAINS_CASE_SENSITIVE": return i.jqx.string.contains(ap.toString(), ao.toString()); case "DOES_NOT_CONTAIN": return !i.jqx.string.containsIgnoreCase(ap.toString(), ao.toString()); case "DOES_NOT_CONTAIN_CASE_SENSITIVE": return !i.jqx.string.contains(ap.toString(), ao.toString()); default: return true } }; var aa = new Array(); if (af && af.indexOf) { if (af.indexOf("|") >= 0 || af.indexOf(" AND ") >= 0 || af.indexOf(" OR ") >= 0 || af.indexOf(" and ") >= 0 || af.indexOf(" or ") >= 0) { var ab = am(an, af); if (ab) { return ab } af = af.toString(); var ac = af.indexOf(" AND ") >= 0 ? af.split(" AND ") : new Array(); var Z = af.indexOf(" OR ") >= 0 ? af.split(" OR ") : new Array(); var Y = af.indexOf(" and ") >= 0 ? af.split(" and ") : new Array(); var ad = af.indexOf(" or ") >= 0 ? af.split(" or ") : new Array(); ac = ac.concat(Y); Z = Z.concat(ad); var X = af.indexOf("|") >= 0 ? af.split("|") : new Array(); if (X.length > 0) { for (var ak = 0; ak < X.length; ak++) { X[ak] = i.trim(X[ak]) } } Z = Z.concat(X); if (ac.length > 0) { for (var ak = 0; ak < ac.length; ak++) { if (!ac[ak].indexOf(" OR ") >= 0) { aa.push(ac[ak]) } } } if (Z.length > 0) { for (var ak = 0; ak < Z.length; ak++) { if (!Z[ak].indexOf(" AND ") >= 0) { aa.push(Z[ak]) } } } var aj = undefined; for (var ai = 0; ai < aa.length; ai++) { var ag = aa[ai]; if (ag && ag.indexOf && ag.indexOf("..") >= 0) { var W = ag.toString().split(".."); if (W.length == 2) { ab = an >= W[0] && an <= W[1] } } else { var ab = am(an, ag) } var ae = ai < ac.length ? "and" : "or"; if (aj == undefined) { aj = ab } else { if (ae == "or") { aj = aj || ab } else { aj = aj && ab } } } return aj } } if (af && af.indexOf && af.indexOf("..") >= 0) { aa = af.toString().split(".."); if (aa.length == 2) { return an >= aa[0] && an <= aa[1] } } return am(an, af) } }; var H = function (X, V, W, aa) { this.filtervalue = X; this.type = "datefilter"; if (W != undefined && aa != undefined) { var Y = i.jqx.dataFormat.parsedate(X, W, aa); if (Y != null) { this.filterdate = Y } else { var U = i.jqx.dataFormat.tryparsedate(X, aa); if (U != null) { this.filterdate = U } } } else { var Z = new Date(X); if (Z.toString() == "NaN" || Z.toString() == "Invalid Date") { this.filterdate = i.jqx.dataFormat.tryparsedate(X) } else { this.filterdate = Z } } if (!this.filterdate) { var Z = new Date(X); if (Z.toString() == "NaN" || Z.toString() == "Invalid Date") { this.filterdate = i.jqx.dataFormat.tryparsedate(X) } else { this.filterdate = Z } } this.comparisonoperator = V; this.evaluate = function (an) { var am = this.filtervalue; var av = this.comparisonoperator; if (an == null || an == undefined || an == "") { if (av == "NOT_NULL") { return false } if (av == "NULL") { return true } else { switch (av) { case "EQUAL": return an == am; case "NOT_EQUAL": return an != am } return false } } else { if (av == "NULL") { return false } if (av == "NOT_NULL") { return true } } var ax = new Date(); ax.setFullYear(1900, 0, 1); ax.setHours(12, 0, 0, 0); try { var au = new Date(an); if (au.toString() == "NaN" || au.toString() == "Invalid Date") { an = i.jqx.dataFormat.tryparsedate(an) } else { an = au } ax = an; var ar = false; if (W != undefined && aa != undefined) { if (W.indexOf("t") >= 0 || W.indexOf("T") >= 0 || W.indexOf(":") >= 0 || W.indexOf("f") >= 0) { ar = true; if (am && am.toString().indexOf(":") == -1) { var ai = i.jqx.dataFormat.tryparsedate(am.toString() + ":00", aa); if (ai != null) { this.filterdate = ai } } } } if (!ar) { ax.setHours(0); ax.setMinutes(0); ax.setSeconds(0) } } catch (ao) { if (an.toString() != "") { return false } } if (this.filterdate != null) { am = this.filterdate } else { if (am.indexOf) { if (am.indexOf(":") != -1 || !isNaN(parseInt(am))) { var ah = new Date(ax); ah.setHours(12, 0, 0, 0); var ag = am.split(":"); for (var at = 0; at < ag.length; at++) { if (at == 0) { ah.setHours(ag[at]) } if (at == 1) { ah.setMinutes(ag[at]) } if (at == 2) { ah.setSeconds(ag[at]) } } am = ah } } } if (ar) { if (am && am.setFullYear) { if (ax && ax.getFullYear) { if (W.indexOf("d") == -1 && W.indexOf("M") == -1 && W.indexOf("y") == -1) { am.setFullYear(ax.getFullYear(), ax.getMonth(), ax.getDate()) } } } } var aw = function (az, ay) { if (az == null) { az = "" } switch (av) { case "EQUAL": return az.toString() == ay.toString(); case "NOT_EQUAL": return az.toString() != ay.toString(); case "GREATER_THAN": return az > ay; case "GREATER_THAN_OR_EQUAL": return az >= ay; case "LESS_THAN": return az < ay; case "LESS_THAN_OR_EQUAL": return az <= ay; case "STARTS_WITH": return i.jqx.string.startsWithIgnoreCase(az.toString(), ay.toString()); case "ENDS_WITH": return i.jqx.string.endsWithIgnoreCase(az.toString(), ay.toString()); case "ENDS_WITH_CASE_SENSITIVE": return i.jqx.string.endsWith(az.toString(), ay.toString()); case "STARTS_WITH_CASE_SENSITIVE": return i.jqx.string.startsWith(az.toString(), ay.toString()); case "CONTAINS": return i.jqx.string.containsIgnoreCase(az.toString(), ay.toString()); case "CONTAINS_CASE_SENSITIVE": return i.jqx.string.contains(az.toString(), ay.toString()); case "DOES_NOT_CONTAIN": return !i.jqx.string.containsIgnoreCase(az.toString(), ay.toString()); case "DOES_NOT_CONTAIN_CASE_SENSITIVE": return !i.jqx.string.contains(az.toString(), ay.toString()); default: return true } }; var af = new Array(); if (am && am.indexOf) { if (am.indexOf("|") >= 0 || am.indexOf(" AND ") >= 0 || am.indexOf(" OR ") >= 0 || am.indexOf(" and ") >= 0 || am.indexOf(" or ") >= 0) { var ai = aw(ax, am); if (ai) { return ai } var aj = am.indexOf(" AND ") >= 0 ? am.split(" AND ") : new Array(); var ae = am.indexOf(" OR ") >= 0 ? am.split(" OR ") : new Array(); var ad = am.indexOf(" and ") >= 0 ? am.split(" and ") : new Array(); var ak = am.indexOf(" or ") >= 0 ? am.split(" or ") : new Array(); aj = aj.concat(ad); ae = ae.concat(ak); var ac = am.indexOf("|") >= 0 ? am.split("|") : new Array(); if (ac.length > 0) { for (var at = 0; at < ac.length; at++) { ac[at] = i.trim(ac[at]) } } ae = ae.concat(ac); if (aj.length > 0) { for (var at = 0; at < aj.length; at++) { if (!aj[at].indexOf(" OR ") >= 0) { af.push(aj[at]) } } } if (ae.length > 0) { for (var at = 0; at < ae.length; at++) { if (!ae[at].indexOf(" AND ") >= 0) { af.push(ae[at]) } } } var aq = undefined; for (var ap = 0; ap < af.length; ap++) { var an = af[ap]; if (an && an.indexOf && an.indexOf("..") >= 0) { var ab = an.toString().split(".."); if (ab.length == 2) { ai = ax >= ab[0] && ax <= ab[1] } } else { var ai = aw(ax, an) } var al = ap < aj.length ? "and" : "or"; if (aq == undefined) { aq = ai } else { if (al == "or") { aq = aq || ai } else { aq = aq && ai } } } return aq } } if (am && am.indexOf && am.indexOf("..") >= 0) { af = am.toString().split(".."); if (af.length == 2) { return ax >= af[0] && ax <= af[1] } } return aw(ax, am) } }; var e = function (V, U, W) { this.filtervalue = V; this.comparisonoperator = U; this.evaluate = function (Y, X) { return W(this.filtervalue, Y, this.comparisonoperator) } } } })(jQuery);

(function(a){a.jqx.cssroundedcorners=function(b){var c={all:"jqx-rc-all",top:"jqx-rc-t",bottom:"jqx-rc-b",left:"jqx-rc-l",right:"jqx-rc-r","top-right":"jqx-rc-tr","top-left":"jqx-rc-tl","bottom-right":"jqx-rc-br","bottom-left":"jqx-rc-bl"};for(prop in c){if(!c.hasOwnProperty(prop)){continue}if(b==prop){return c[prop]}}};a.jqx.jqxWidget("jqxButton","",{});a.extend(a.jqx._jqxButton.prototype,{defineInstance:function(){this.cursor="arrow";this.roundedCorners="all";this.disabled=false;this.height=null;this.width=null;this.overrideTheme=false;this.enableHover=true;this.enableDefault=true;this.enablePressed=true;this.rtl=false;this._ariaDisabled=false;this._scrollAreaButton=false;this.aria={"aria-disabled":{name:"disabled",type:"boolean"}}},createInstance:function(d){var b=this;this._setSize();if(!this._ariaDisabled){this.host.attr("role","button")}if(!this.overrideTheme){this.host.addClass(this.toThemeProperty(a.jqx.cssroundedcorners(this.roundedCorners)));if(this.enableDefault){this.host.addClass(this.toThemeProperty("jqx-button"))}this.host.addClass(this.toThemeProperty("jqx-widget"))}this.isTouchDevice=a.jqx.mobile.isTouchDevice();if(!this._ariaDisabled){a.jqx.aria(this)}if(this.cursor!="arrow"){if(!this.disabled){this.host.css({cursor:this.cursor})}else{this.host.css({cursor:"arrow"})}}var g="mouseenter mouseleave mousedown focus blur";if(this._scrollAreaButton){var g="mousedown"}if(this.isTouchDevice){this.addHandler(this.host,a.jqx.mobile.getTouchEventName("touchstart"),function(h){b.isPressed=true;b.refresh()});this.addHandler(a(document),a.jqx.mobile.getTouchEventName("touchend")+"."+this.element.id,function(h){b.isPressed=false;b.refresh()})}this.addHandler(this.host,g,function(h){switch(h.type){case"mouseenter":if(!this.isTouchDevice){if(!b.disabled&&b.enableHover){b.isMouseOver=true;b.refresh()}}break;case"mouseleave":if(!this.isTouchDevice){if(!b.disabled&&b.enableHover){b.isMouseOver=false;b.refresh()}}break;case"mousedown":if(!b.disabled){b.isPressed=true;b.refresh()}break;case"focus":if(!b.disabled){b.isFocused=true;b.refresh()}break;case"blur":if(!b.disabled){b.isFocused=false;b.refresh()}break}});this.mouseupfunc=function(h){if(!b.disabled){b.isPressed=false;b.refresh()}};this.addHandler(a(document),"mouseup.button"+this.element.id,this.mouseupfunc);try{if(document.referrer!=""||window.frameElement){if(window.top!=null&&window.top!=window.self){var f="";if(window.parent&&document.referrer){f=document.referrer}if(f.indexOf(document.location.host)!=-1){var e=function(h){b.isPressed=false;b.refresh()};if(window.top.document){this.addHandler(a(window.top.document),"mouseup",e)}}}}}catch(c){}this.propertyChangeMap.roundedCorners=function(h,j,i,k){h.host.removeClass(h.toThemeProperty(a.jqx.cssroundedcorners(i)));h.host.addClass(h.toThemeProperty(a.jqx.cssroundedcorners(k)))};this.propertyChangeMap.width=function(h,j,i,k){h._setSize();h.refresh()};this.propertyChangeMap.height=function(h,j,i,k){h._setSize();h.refresh()};this.propertyChangeMap.disabled=function(h,j,i,k){if(i!=k){h.host[0].disabled=k;h.host.attr("disabled",k);h.refresh();if(!k){h.host.css({cursor:h.cursor})}else{h.host.css({cursor:"default"})}a.jqx.aria(h,"aria-disabled",h.disabled)}};this.propertyChangeMap.rtl=function(h,j,i,k){if(i!=k){h.refresh()}};this.propertyChangeMap.theme=function(h,j,i,k){h.host.removeClass();if(h.enableDefault){h.host.addClass(h.toThemeProperty("jqx-button"))}h.host.addClass(h.toThemeProperty("jqx-widget"));if(!h.overrideTheme){h.host.addClass(h.toThemeProperty(a.jqx.cssroundedcorners(h.roundedCorners)))}h._oldCSSCurrent=null;h.refresh()};if(this.disabled){this.element.disabled=true;this.host.attr("disabled",true)}},resize:function(c,b){this.width=c;this.height=b;this._setSize()},val:function(){var b=this.host.find("input");if(b.length>0){if(arguments.length==0||typeof(value)=="object"){return b.val()}b.val(value);this.refresh();return b.val()}if(arguments.length==0||typeof(value)=="object"){if(this.element.nodeName.toLowerCase()=="button"){return a(this.element).text()}return this.element.value}this.element.value=arguments[0];if(this.element.nodeName.toLowerCase()=="button"){a(this.element).text(arguments[0])}this.refresh()},_setSize:function(){if(this.width!=null&&(this.width.toString().indexOf("px")!=-1||this.width.toString().indexOf("%")!=-1)){this.host.css("width",this.width)}else{if(this.width!=undefined&&!isNaN(this.width)){this.host.css("width",this.width)}}if(this.height!=null&&(this.height.toString().indexOf("px")!=-1||this.height.toString().indexOf("%")!=-1)){this.host.css("height",this.height)}else{if(this.height!=undefined&&!isNaN(this.height)){this.host.css("height",parseInt(this.height))}}},_removeHandlers:function(){this.removeHandler(this.host,"selectstart");this.removeHandler(this.host,"click");this.removeHandler(this.host,"focus");this.removeHandler(this.host,"blur");this.removeHandler(this.host,"mouseenter");this.removeHandler(this.host,"mouseleave");this.removeHandler(this.host,"mousedown");this.removeHandler(a(document),"mouseup.button"+this.element.id,this.mouseupfunc);if(this.isTouchDevice){this.removeHandler(this.host,a.jqx.mobile.getTouchEventName("touchstart"));this.removeHandler(a(document),a.jqx.mobile.getTouchEventName("touchend")+"."+this.element.id)}this.mouseupfunc=null;delete this.mouseupfunc},focus:function(){this.host.focus()},destroy:function(){this._removeHandlers();var b=a.data(this.element,"jqxButton");if(b){delete b.instance}this.host.removeClass();this.host.removeData();this.host.remove();delete this.set;delete this.get;delete this.call;delete this.propertyChangeMap.roundedCorners;delete this.propertyChangeMap.width;delete this.propertyChangeMap.height;delete this.propertyChangeMap.disabled;delete this.propertyChangeMap.rtl;delete this.propertyChangeMap.theme;delete this.propertyChangeMap;delete this.element;delete this.host},render:function(){this.refresh()},refresh:function(){if(this.overrideTheme){return}var d=this.toThemeProperty("jqx-fill-state-focus");var h=this.toThemeProperty("jqx-fill-state-disabled");var b=this.toThemeProperty("jqx-fill-state-normal");if(!this.enableDefault){b=""}var g=this.toThemeProperty("jqx-fill-state-hover");var e=this.toThemeProperty("jqx-fill-state-pressed");var f=this.toThemeProperty("jqx-fill-state-pressed");if(!this.enablePressed){e=""}var c="";if(!this.host){return}this.host[0].disabled=this.disabled;if(this.disabled){c=b+" "+h;this.host.addClass(c);this._oldCSSCurrent=c;return}else{if(this.isMouseOver&&!this.isTouchDevice){if(this.isPressed){c=f}else{c=g}}else{if(this.isPressed){c=e}else{c=b}}}if(this.isFocused){c+=" "+d}if(c!=this._oldCSSCurrent){if(this._oldCSSCurrent){this.host.removeClass(this._oldCSSCurrent)}this.host.addClass(c);this._oldCSSCurrent=c}if(this.rtl){this.host.addClass(this.toThemeProperty("jqx-rtl"));this.host.css("direction","rtl")}}});a.jqx.jqxWidget("jqxLinkButton","",{});a.extend(a.jqx._jqxLinkButton.prototype,{defineInstance:function(){this.disabled=false;this.height=null;this.width=null;this.rtl=false;this.href=null},createInstance:function(d){var c=this;this.host.onselectstart=function(){return false};this.host.attr("role","button");var b=this.height||this.host.height();var e=this.width||this.host.width();this.href=this.host.attr("href");this.target=this.host.attr("target");this.content=this.host.text();this.element.innerHTML="";this.host.append("<input type='button' class='jqx-wrapper'/>");var f=this.host.find("input");f.addClass(this.toThemeProperty("jqx-reset"));f.width(e);f.height(b);f.val(this.content);this.host.find("tr").addClass(this.toThemeProperty("jqx-reset"));this.host.find("td").addClass(this.toThemeProperty("jqx-reset"));this.host.find("tbody").addClass(this.toThemeProperty("jqx-reset"));this.host.css("color","inherit");this.host.addClass(this.toThemeProperty("jqx-link"));f.css({width:e});f.css({height:b});var g=d==undefined?{}:d[0]||{};f.jqxButton(g);if(this.disabled){this.host[0].disabled=true}this.propertyChangeMap.disabled=function(h,j,i,k){h.host[0].disabled=k;h.host.find("input").jqxButton({disabled:k})};this.addHandler(f,"click",function(h){if(!this.disabled){c.onclick(h)}return false})},onclick:function(b){if(this.target!=null){window.open(this.href,this.target)}else{window.location=this.href}}});a.jqx.jqxWidget("jqxRepeatButton","jqxButton",{});a.extend(a.jqx._jqxRepeatButton.prototype,{defineInstance:function(){this.delay=50},createInstance:function(e){var c=this;var d=a.jqx.mobile.isTouchDevice();var b=!d?"mouseup."+this.base.element.id:"touchend."+this.base.element.id;var f=!d?"mousedown."+this.base.element.id:"touchstart."+this.base.element.id;this.addHandler(a(document),b,function(g){if(c.timeout!=null){clearTimeout(c.timeout);c.timeout=null;c.refresh()}if(c.timer!=undefined){clearInterval(c.timer);c.timer=null;c.refresh()}});this.addHandler(this.base.host,f,function(g){if(c.timer!=null){clearInterval(c.timer)}c.timeout=setTimeout(function(){clearInterval(c.timer);c.timer=setInterval(function(h){c.ontimer(h)},c.delay)},150)});this.mousemovefunc=function(g){if(!d){if(g.which==0){if(c.timer!=null){clearInterval(c.timer);c.timer=null}}}};this.addHandler(this.base.host,"mousemove",this.mousemovefunc)},destroy:function(){var c=a.jqx.mobile.isTouchDevice();var b=!c?"mouseup."+this.base.element.id:"touchend."+this.base.element.id;var e=!c?"mousedown."+this.base.element.id:"touchstart."+this.base.element.id;this.removeHandler(this.base.host,"mousemove",this.mousemovefunc);this.removeHandler(this.base.host,e);this.removeHandler(a(document),b);this.timer=null;delete this.mousemovefunc;delete this.timer;var d=a.data(this.base.element,"jqxRepeatButton");if(d){delete d.instance}a(this.base.element).removeData();this.base.destroy();delete this.base},stop:function(){clearInterval(this.timer);this.timer=null},ontimer:function(b){var b=new jQuery.Event("click");if(this.base!=null&&this.base.host!=null){this.base.host.trigger(b)}}});a.jqx.jqxWidget("jqxToggleButton","jqxButton",{});a.extend(a.jqx._jqxToggleButton.prototype,{defineInstance:function(){this.toggled=false;this.uiToggle=true;this.aria={"aria-checked":{name:"toggled",type:"boolean"},"aria-disabled":{name:"disabled",type:"boolean"}}},createInstance:function(c){var b=this;this.base.overrideTheme=true;this.isTouchDevice=a.jqx.mobile.isTouchDevice();a.jqx.aria(this);this.propertyChangeMap.toggled=function(d,f,e,g){d.refresh()};this.propertyChangeMap.disabled=function(d,f,e,g){d.base.disabled=g;d.refresh()};this.addHandler(this.base.host,"click",function(d){if(!b.base.disabled&&b.uiToggle){b.toggle()}});if(!this.isTouchDevice){this.addHandler(this.base.host,"mouseenter",function(d){if(!b.base.disabled){b.refresh()}});this.addHandler(this.base.host,"mouseleave",function(d){if(!b.base.disabled){b.refresh()}})}this.addHandler(this.base.host,"mousedown",function(d){if(!b.base.disabled){b.refresh()}});this.addHandler(a(document),"mouseup.togglebutton"+this.base.element.id,function(d){if(!b.base.disabled){b.refresh()}})},destroy:function(){this._removeHandlers();this.base.destroy()},_removeHandlers:function(){this.removeHandler(this.base.host,"click");this.removeHandler(this.base.host,"mouseenter");this.removeHandler(this.base.host,"mouseleave");this.removeHandler(this.base.host,"mousedown");this.removeHandler(a(document),"mouseup.togglebutton"+this.base.element.id)},toggle:function(){this.toggled=!this.toggled;this.refresh();a.jqx.aria(this,"aria-checked",this.toggled)},unCheck:function(){this.toggled=false;this.refresh()},check:function(){this.toggled=true;this.refresh()},refresh:function(){var g=this.base.toThemeProperty("jqx-fill-state-disabled");var b=this.base.toThemeProperty("jqx-fill-state-normal");if(!this.base.enableDefault){b=""}var f=this.base.toThemeProperty("jqx-fill-state-hover");var d=this.base.toThemeProperty("jqx-fill-state-pressed");var e=this.base.toThemeProperty("jqx-fill-state-pressed");var c="";this.base.host[0].disabled=this.base.disabled;if(this.base.disabled){c=b+" "+g;this.base.host.addClass(c);return}else{if(this.base.isMouseOver&&!this.isTouchDevice){if(this.base.isPressed||this.toggled){c=e}else{c=f}}else{if(this.base.isPressed||this.toggled){c=d}else{c=b}}}if(this.base.host.hasClass(g)&&g!=c){this.base.host.removeClass(g)}if(this.base.host.hasClass(b)&&b!=c){this.base.host.removeClass(b)}if(this.base.host.hasClass(f)&&f!=c){this.base.host.removeClass(f)}if(this.base.host.hasClass(d)&&d!=c){this.base.host.removeClass(d)}if(this.base.host.hasClass(e)&&e!=c){this.base.host.removeClass(e)}if(!this.base.host.hasClass(c)){this.base.host.addClass(c)}}})})(jQuery);

(function(a){a.jqx.jqxWidget("jqxScrollBar","",{});a.extend(a.jqx._jqxScrollBar.prototype,{defineInstance:function(){this.height=null;this.width=null;this.vertical=false;this.min=0;this.max=1000;this.value=this.min;this.step=10;this.largestep=50;this.thumbMinSize=10;this.thumbSize=0;this.thumbStep="auto";this.roundedCorners="all";this.showButtons=true;this.disabled=false;this.touchMode="auto";this.touchModeStyle="auto";this.thumbTouchSize=0;this._triggervaluechanged=true;this.rtl=false;this.areaDownCapture=false;this.areaUpCapture=false;this._initialLayout=false},createInstance:function(b){this.render()},render:function(){this._mouseup=new Date();var c=this;var d="<div id='jqxScrollOuterWrap' style='width:100%; height: 100%; align:left; border: 0px; valign:top; position: relative;'><div id='jqxScrollWrap' style='width:100%; height: 100%; left: 0px; top: 0px; align:left; valign:top; position: absolute;'><div id='jqxScrollBtnUp' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollAreaUp' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollThumb' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollAreaDown' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollBtnDown' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div></div></div>";if(a.jqx.utilities&&a.jqx.utilities.scrollBarButtonsVisibility=="hidden"){this.showButtons=false}if(c.WinJS){MSApp.execUnsafeLocalFunction(function(){c.host.html(d)})}else{this.element.innerHTML=d}if(this.width!=undefined&&parseInt(this.width)>0){this.host.width(parseInt(this.width))}if(this.height!=undefined&&parseInt(this.height)>0){this.host.height(parseInt(this.height))}this.isPercentage=false;if(this.width!=null&&this.width.toString().indexOf("%")!=-1){this.host.width(this.width);this.isPercentage=true}if(this.height!=null&&this.height.toString().indexOf("%")!=-1){this.host.height(this.height);this.isPercentage=true}if(this.isPercentage){var e=this;a.jqx.utilities.resize(this.host,function(){e._arrange()},false)}this.thumbCapture=false;this.scrollOuterWrap=a(this.element.firstChild);this.scrollWrap=a(this.scrollOuterWrap[0].firstChild);this.btnUp=a(this.scrollWrap[0].firstChild);this.areaUp=a(this.btnUp[0].nextSibling);this.btnThumb=a(this.areaUp[0].nextSibling);this.arrowUp=a("<div></div>");this.arrowUp.appendTo(this.btnUp);this.areaDown=a(this.btnThumb[0].nextSibling);this.btnDown=a(this.areaDown[0].nextSibling);this.arrowDown=a("<div></div>");this.arrowDown.appendTo(this.btnDown);var b=this.element.id;this.btnUp[0].id="jqxScrollBtnUp"+b;this.btnDown[0].id="jqxScrollBtnDown"+b;this.btnThumb[0].id="jqxScrollThumb"+b;this.areaUp[0].id="jqxScrollAreaUp"+b;this.areaDown[0].id="jqxScrollAreaDown"+b;this.scrollWrap[0].id="jqxScrollWrap"+b;this.scrollOuterWrap[0].id="jqxScrollOuterWrap"+b;if(!this.host.jqxRepeatButton){throw new Error("jqxScrollBar: Missing reference to jqxbuttons.js.");return}this.btnUp.jqxRepeatButton({_ariaDisabled:true,overrideTheme:true,disabled:this.disabled});this.btnDown.jqxRepeatButton({_ariaDisabled:true,overrideTheme:true,disabled:this.disabled});this.btnDownInstance=a.data(this.btnDown[0],"jqxRepeatButton").instance;this.btnUpInstance=a.data(this.btnUp[0],"jqxRepeatButton").instance;this.areaUp.jqxRepeatButton({_scrollAreaButton:true,_ariaDisabled:true,overrideTheme:true});this.areaDown.jqxRepeatButton({_scrollAreaButton:true,_ariaDisabled:true,overrideTheme:true});this.btnThumb.jqxButton({_ariaDisabled:true,overrideTheme:true,disabled:this.disabled});this.propertyChangeMap.value=function(f,h,g,i){if(!(isNaN(i))){if(g!=i){f.setPosition(parseFloat(i),true)}}};this.propertyChangeMap.width=function(f,h,g,i){if(f.width!=undefined&&parseInt(f.width)>0){f.host.width(parseInt(f.width));f._arrange()}};this.propertyChangeMap.height=function(f,h,g,i){if(f.height!=undefined&&parseInt(f.height)>0){f.host.height(parseInt(f.height));f._arrange()}};this.propertyChangeMap.theme=function(f,h,g,i){f.setTheme()};this.propertyChangeMap.max=function(f,h,g,i){if(!(isNaN(i))){if(g!=i){f.max=parseInt(i);if(f.min>f.max){f.max=f.min+1}f._arrange();f.setPosition(f.value)}}};this.propertyChangeMap.min=function(f,h,g,i){if(!(isNaN(i))){if(g!=i){f.min=parseInt(i);if(f.min>f.max){f.max=f.min+1}f._arrange();f.setPosition(f.value)}}};this.propertyChangeMap.disabled=function(f,h,g,i){if(g!=i){if(i){f.host.addClass(f.toThemeProperty("jqx-fill-state-disabled"))}else{f.host.removeClass(f.toThemeProperty("jqx-fill-state-disabled"))}f.btnUp.jqxRepeatButton("disabled",f.disabled);f.btnDown.jqxRepeatButton("disabled",f.disabled);f.btnThumb.jqxButton("disabled",f.disabled)}};this.propertyChangeMap.touchMode=function(f,h,g,i){if(g!=i){f._updateTouchBehavior();if(i===true){f.showButtons=false;f.refresh()}else{if(i===false){f.showButtons=true;f.refresh()}}}};this.buttonUpCapture=false;this.buttonDownCapture=false;this._updateTouchBehavior();this.setPosition(this.value);this._addHandlers();this.setTheme()},resize:function(c,b){this.width=c;this.height=b;this._arrange()},_updateTouchBehavior:function(){this.isTouchDevice=a.jqx.mobile.isTouchDevice();if(this.touchMode==true){if(a.jqx.browser.msie&&a.jqx.browser.version<9){this.setTheme();return}this.isTouchDevice=true;a.jqx.mobile.setMobileSimulator(this.btnThumb[0]);this._removeHandlers();this._addHandlers();this.setTheme()}else{if(this.touchMode==false){this.isTouchDevice=false}}},_addHandlers:function(){var e=this;var d=false;try{if(("ontouchstart" in window)||window.DocumentTouch&&document instanceof DocumentTouch){d=true;this._touchSupport=true}}catch(h){}if(e.isTouchDevice||d){this.addHandler(this.btnThumb,a.jqx.mobile.getTouchEventName("touchend"),function(j){var k=e.vertical?e.toThemeProperty("jqx-scrollbar-thumb-state-pressed"):e.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal");var l=e.toThemeProperty("jqx-fill-state-pressed");e.btnThumb.removeClass(k);e.btnThumb.removeClass(l);if(!e.disabled){e.handlemouseup(e,j)}return false});this.addHandler(this.btnThumb,a.jqx.mobile.getTouchEventName("touchstart"),function(j){if(!e.disabled){if(e.touchMode==true){j.clientX=j.originalEvent.clientX;j.clientY=j.originalEvent.clientY}else{var k=j;if(k.originalEvent.touches&&k.originalEvent.touches.length){j.clientX=k.originalEvent.touches[0].clientX;j.clientY=k.originalEvent.touches[0].clientY}else{j.clientX=j.originalEvent.clientX;j.clientY=j.originalEvent.clientY}}e.handlemousedown(j);if(j.preventDefault){j.preventDefault()}}});a.jqx.mobile.touchScroll(this.element,e.max,function(p,o,k,j,l){if(e.host.css("visibility")=="visible"){if(e.touchMode==true){l.clientX=l.originalEvent.clientX;l.clientY=l.originalEvent.clientY}else{var n=l;if(n.originalEvent.touches&&n.originalEvent.touches.length){l.clientX=n.originalEvent.touches[0].clientX;l.clientY=n.originalEvent.touches[0].clientY}else{l.clientX=l.originalEvent.clientX;l.clientY=l.originalEvent.clientY}}var m=e.vertical?e.toThemeProperty("jqx-scrollbar-thumb-state-pressed"):e.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal");e.btnThumb.addClass(m);e.btnThumb.addClass(e.toThemeProperty("jqx-fill-state-pressed"));e.thumbCapture=true;e.handlemousemove(l)}},e.element.id)}this.addHandler(this.btnUp,"click",function(k){var j=e.step;if(e.rtl&&!e.vertical){j=-e.step}if(e.buttonUpCapture&&!e.isTouchDevice){if(!e.disabled){e.setPosition(e.value-j)}}else{if(!e.disabled&&e.isTouchDevice){e.setPosition(e.value-j)}}});this.addHandler(this.btnDown,"click",function(k){var j=e.step;if(e.rtl&&!e.vertical){j=-e.step}if(e.buttonDownCapture&&!e.isTouchDevice){if(!e.disabled){e.setPosition(e.value+j)}}else{if(!e.disabled&&e.isTouchDevice){e.setPosition(e.value+j)}}});if(!this.isTouchDevice){try{if(document.referrer!=""||window.frameElement){if(window.top!=null&&window.top!=window.self){var i=null;if(window.parent&&document.referrer){i=document.referrer}if(i&&i.indexOf(document.location.host)!=-1){var g=function(j){if(!e.disabled){e.handlemouseup(e,j)}};if(window.top.document.addEventListener){window.top.document.addEventListener("mouseup",g,false)}else{if(window.top.document.attachEvent){window.top.document.attachEvent("onmouseup",g)}}}}}}catch(f){}this.addHandler(this.btnDown,"mouseup",function(k){if(!e.btnDownInstance.base.disabled&&e.buttonDownCapture){e.buttonDownCapture=false;e.btnDown.removeClass(e.toThemeProperty("jqx-scrollbar-button-state-pressed"));e.btnDown.removeClass(e.toThemeProperty("jqx-fill-state-pressed"));e._removeArrowClasses("pressed","down");e.handlemouseup(e,k);var j=e.step;if(e.rtl&&!e.vertical){j=-e.step}e.setPosition(e.value+j);return false}});this.addHandler(this.btnUp,"mouseup",function(k){if(!e.btnUpInstance.base.disabled&&e.buttonUpCapture){e.buttonUpCapture=false;e.btnUp.removeClass(e.toThemeProperty("jqx-scrollbar-button-state-pressed"));e.btnUp.removeClass(e.toThemeProperty("jqx-fill-state-pressed"));e._removeArrowClasses("pressed","up");e.handlemouseup(e,k);var j=e.step;if(e.rtl&&!e.vertical){j=-e.step}e.setPosition(e.value-j);return false}});this.addHandler(this.btnDown,"mousedown",function(j){if(!e.btnDownInstance.base.disabled){e.buttonDownCapture=true;e.btnDown.addClass(e.toThemeProperty("jqx-fill-state-pressed"));e.btnDown.addClass(e.toThemeProperty("jqx-scrollbar-button-state-pressed"));e._addArrowClasses("pressed","down");return false}});this.addHandler(this.btnUp,"mousedown",function(j){if(!e.btnUpInstance.base.disabled){e.buttonUpCapture=true;e.btnUp.addClass(e.toThemeProperty("jqx-fill-state-pressed"));e.btnUp.addClass(e.toThemeProperty("jqx-scrollbar-button-state-pressed"));e._addArrowClasses("pressed","up");return false}})}var c="click";if(this.isTouchDevice){c=a.jqx.mobile.getTouchEventName("touchend")}this.addHandler(this.areaUp,c,function(k){if(!e.disabled){var j=e.largestep;if(e.rtl&&!e.vertical){j=-e.largestep}e.setPosition(e.value-j);return false}});this.addHandler(this.areaDown,c,function(k){if(!e.disabled){var j=e.largestep;if(e.rtl&&!e.vertical){j=-e.largestep}e.setPosition(e.value+j);return false}});this.addHandler(this.areaUp,"mousedown",function(j){if(!e.disabled){e.areaUpCapture=true;return false}});this.addHandler(this.areaDown,"mousedown",function(j){if(!e.disabled){e.areaDownCapture=true;return false}});this.addHandler(this.btnThumb,"mousedown",function(j){if(!e.disabled){e.handlemousedown(j)}return false});this.addHandler(this.btnThumb,"dragstart",function(j){return false});this.addHandler(a(document),"mouseup."+this.element.id,function(j){if(!e.disabled){e.handlemouseup(e,j)}});if(!this.isTouchDevice){this.mousemoveFunc=function(j){if(!e.disabled){e.handlemousemove(j)}};this.addHandler(a(document),"mousemove."+this.element.id,this.mousemoveFunc);this.addHandler(a(document),"mouseleave."+this.element.id,function(j){if(!e.disabled){e.handlemouseleave(j)}});this.addHandler(a(document),"mouseenter."+this.element.id,function(j){if(!e.disabled){e.handlemouseenter(j)}});if(!e.disabled){this.addHandler(this.btnUp,"mouseenter",function(){if(!e.disabled&&!e.btnUpInstance.base.disabled&&e.touchMode!=true){e.btnUp.addClass(e.toThemeProperty("jqx-scrollbar-button-state-hover"));e.btnUp.addClass(e.toThemeProperty("jqx-fill-state-hover"));e._addArrowClasses("hover","up")}});this.addHandler(this.btnUp,"mouseleave",function(){if(!e.disabled&&!e.btnUpInstance.base.disabled&&e.touchMode!=true){e.btnUp.removeClass(e.toThemeProperty("jqx-scrollbar-button-state-hover"));e.btnUp.removeClass(e.toThemeProperty("jqx-fill-state-hover"));e._removeArrowClasses("hover","up")}});var b=e.toThemeProperty("jqx-scrollbar-thumb-state-hover");if(!e.vertical){b=e.toThemeProperty("jqx-scrollbar-thumb-state-hover-horizontal")}this.addHandler(this.btnThumb,"mouseenter",function(){if(!e.disabled&&e.touchMode!=true){e.btnThumb.addClass(b);e.btnThumb.addClass(e.toThemeProperty("jqx-fill-state-hover"))}});this.addHandler(this.btnThumb,"mouseleave",function(){if(!e.disabled&&e.touchMode!=true){e.btnThumb.removeClass(b);e.btnThumb.removeClass(e.toThemeProperty("jqx-fill-state-hover"))}});this.addHandler(this.btnDown,"mouseenter",function(){if(!e.disabled&&!e.btnDownInstance.base.disabled&&e.touchMode!=true){e.btnDown.addClass(e.toThemeProperty("jqx-scrollbar-button-state-hover"));e.btnDown.addClass(e.toThemeProperty("jqx-fill-state-hover"));e._addArrowClasses("hover","down")}});this.addHandler(this.btnDown,"mouseleave",function(){if(!e.disabled&&!e.btnDownInstance.base.disabled&&e.touchMode!=true){e.btnDown.removeClass(e.toThemeProperty("jqx-scrollbar-button-state-hover"));e.btnDown.removeClass(e.toThemeProperty("jqx-fill-state-hover"));e._removeArrowClasses("hover","down")}})}}},destroy:function(){var b=this.btnUp;var f=this.btnDown;var d=this.btnThumb;var c=this.scrollWrap;var h=this.areaUp;var e=this.areaDown;this.arrowUp.remove();delete this.arrowUp;this.arrowDown.remove();delete this.arrowDown;e.removeClass();h.removeClass();f.removeClass();b.removeClass();d.removeClass();b.jqxRepeatButton("destroy");f.jqxRepeatButton("destroy");h.jqxRepeatButton("destroy");e.jqxRepeatButton("destroy");d.jqxButton("destroy");var g=a.data(this.element,"jqxScrollBar");this._removeHandlers();this.btnUp=null;this.btnDown=null;this.scrollWrap=null;this.areaUp=null;this.areaDown=null;this.scrollOuterWrap=null;delete this.mousemoveFunc;delete this.btnDownInstance;delete this.btnUpInstance;delete this.scrollOuterWrap;delete this.scrollWrap;delete this.btnDown;delete this.areaDown;delete this.areaUp;delete this.btnDown;delete this.btnUp;delete this.btnThumb;delete this.propertyChangeMap.value;delete this.propertyChangeMap.min;delete this.propertyChangeMap.max;delete this.propertyChangeMap.touchMode;delete this.propertyChangeMap.disabled;delete this.propertyChangeMap.theme;delete this.propertyChangeMap;if(g){delete g.instance}this.host.removeData();this.host.remove();delete this.host;delete this.set;delete this.get;delete this.call;delete this.element},_removeHandlers:function(){this.removeHandler(this.btnUp,"mouseenter");this.removeHandler(this.btnDown,"mouseenter");this.removeHandler(this.btnThumb,"mouseenter");this.removeHandler(this.btnUp,"mouseleave");this.removeHandler(this.btnDown,"mouseleave");this.removeHandler(this.btnThumb,"mouseleave");this.removeHandler(this.btnUp,"click");this.removeHandler(this.btnDown,"click");this.removeHandler(this.btnDown,"mouseup");this.removeHandler(this.btnUp,"mouseup");this.removeHandler(this.btnDown,"mousedown");this.removeHandler(this.btnUp,"mousedown");this.removeHandler(this.areaUp,"mousedown");this.removeHandler(this.areaDown,"mousedown");this.removeHandler(this.areaUp,"click");this.removeHandler(this.areaDown,"click");this.removeHandler(this.btnThumb,"mousedown");this.removeHandler(this.btnThumb,"dragstart");this.removeHandler(a(document),"mouseup."+this.element.id);if(!this.mousemoveFunc){this.removeHandler(a(document),"mousemove."+this.element.id)}else{this.removeHandler(a(document),"mousemove."+this.element.id,this.mousemoveFunc)}this.removeHandler(a(document),"mouseleave."+this.element.id);this.removeHandler(a(document),"mouseenter."+this.element.id);var b=this},_addArrowClasses:function(c,b){if(c=="pressed"){c="selected"}if(c!=""){c="-"+c}if(this.vertical){if(b=="up"||b==undefined){this.arrowUp.addClass(this.toThemeProperty("jqx-icon-arrow-up"+c))}if(b=="down"||b==undefined){this.arrowDown.addClass(this.toThemeProperty("jqx-icon-arrow-down"+c))}}else{if(b=="up"||b==undefined){this.arrowUp.addClass(this.toThemeProperty("jqx-icon-arrow-left"+c))}if(b=="down"||b==undefined){this.arrowDown.addClass(this.toThemeProperty("jqx-icon-arrow-right"+c))}}},_removeArrowClasses:function(c,b){if(c=="pressed"){c="selected"}if(c!=""){c="-"+c}if(this.vertical){if(b=="up"||b==undefined){this.arrowUp.removeClass(this.toThemeProperty("jqx-icon-arrow-up"+c))}if(b=="down"||b==undefined){this.arrowDown.removeClass(this.toThemeProperty("jqx-icon-arrow-down"+c))}}else{if(b=="up"||b==undefined){this.arrowUp.removeClass(this.toThemeProperty("jqx-icon-arrow-left"+c))}if(b=="down"||b==undefined){this.arrowDown.removeClass(this.toThemeProperty("jqx-icon-arrow-right"+c))}}},setTheme:function(){var o=this.btnUp;var m=this.btnDown;var p=this.btnThumb;var e=this.scrollWrap;var g=this.areaUp;var h=this.areaDown;var f=this.arrowUp;var i=this.arrowDown;this.scrollWrap[0].className=this.toThemeProperty("jqx-reset");this.scrollOuterWrap[0].className=this.toThemeProperty("jqx-reset");var k=this.toThemeProperty("jqx-reset");this.areaDown[0].className=k;this.areaUp[0].className=k;var d=this.toThemeProperty("jqx-scrollbar")+" "+this.toThemeProperty("jqx-widget")+" "+this.toThemeProperty("jqx-widget-content");this.host.addClass(d);m[0].className=this.toThemeProperty("jqx-scrollbar-button-state-normal");o[0].className=this.toThemeProperty("jqx-scrollbar-button-state-normal");var q="";if(this.vertical){f[0].className=k+" "+this.toThemeProperty("jqx-icon-arrow-up");i[0].className=k+" "+this.toThemeProperty("jqx-icon-arrow-down");q=this.toThemeProperty("jqx-scrollbar-thumb-state-normal")}else{f[0].className=k+" "+this.toThemeProperty("jqx-icon-arrow-left");i[0].className=k+" "+this.toThemeProperty("jqx-icon-arrow-right");q=this.toThemeProperty("jqx-scrollbar-thumb-state-normal-horizontal")}q+=" "+this.toThemeProperty("jqx-fill-state-normal");p[0].className=q;if(this.disabled){e.addClass(this.toThemeProperty("jqx-fill-state-disabled"));e.removeClass(this.toThemeProperty("jqx-scrollbar-state-normal"))}else{e.addClass(this.toThemeProperty("jqx-scrollbar-state-normal"));e.removeClass(this.toThemeProperty("jqx-fill-state-disabled"))}if(this.roundedCorners=="all"){this.host.addClass(this.toThemeProperty("jqx-rc-all"));if(this.vertical){var j=a.jqx.cssroundedcorners("top");j=this.toThemeProperty(j);o.addClass(j);var c=a.jqx.cssroundedcorners("bottom");c=this.toThemeProperty(c);m.addClass(c)}else{var n=a.jqx.cssroundedcorners("left");n=this.toThemeProperty(n);o.addClass(n);var l=a.jqx.cssroundedcorners("right");l=this.toThemeProperty(l);m.addClass(l)}}else{var b=a.jqx.cssroundedcorners(this.roundedCorners);b=this.toThemeProperty(b);elBtnUp.addClass(b);elBtnDown.addClass(b)}var b=a.jqx.cssroundedcorners(this.roundedCorners);b=this.toThemeProperty(b);if(!p.hasClass(b)){p.addClass(b)}if(this.isTouchDevice&&this.touchModeStyle!=false){this.showButtons=false;p.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-normal-touch"))}},isScrolling:function(){if(this.thumbCapture==undefined||this.buttonDownCapture==undefined||this.buttonUpCapture==undefined||this.areaDownCapture==undefined||this.areaUpCapture==undefined){return false}return this.thumbCapture||this.buttonDownCapture||this.buttonUpCapture||this.areaDownCapture||this.areaUpCapture},handlemousedown:function(c){if(this.thumbCapture==undefined||this.thumbCapture==false){this.thumbCapture=true;var b=this.btnThumb;if(b!=null){b.addClass(this.toThemeProperty("jqx-fill-state-pressed"));if(this.vertical){b.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-pressed"))}else{b.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal"))}}}this.dragStartX=c.clientX;this.dragStartY=c.clientY;this.dragStartValue=this.value},toggleHover:function(c,b){},refresh:function(){this._arrange()},_setElementPosition:function(c,b,d){if(!isNaN(b)){if(parseInt(c[0].style.left)!=parseInt(b)){c[0].style.left=b+"px"}}if(!isNaN(d)){if(parseInt(c[0].style.top)!=parseInt(d)){c[0].style.top=d+"px"}}},_setElementTopPosition:function(b,c){if(!isNaN(c)){b[0].style.top=c+"px"}},_setElementLeftPosition:function(c,b){if(!isNaN(b)){c[0].style.left=b+"px"}},handlemouseleave:function(e){var b=this.btnUp;var d=this.btnDown;if(this.buttonDownCapture||this.buttonUpCapture){b.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed"));d.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed"));this._removeArrowClasses("pressed")}if(this.thumbCapture!=true){return}var c=this.btnThumb;var f=this.vertical?this.toThemeProperty("jqx-scrollbar-thumb-state-pressed"):this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal");c.removeClass(f);c.removeClass(this.toThemeProperty("jqx-fill-state-pressed"))},handlemouseenter:function(e){var b=this.btnUp;var d=this.btnDown;if(this.buttonUpCapture){b.addClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed"));b.addClass(this.toThemeProperty("jqx-fill-state-pressed"));this._addArrowClasses("pressed","up")}if(this.buttonDownCapture){d.addClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed"));d.addClass(this.toThemeProperty("jqx-fill-state-pressed"));this._addArrowClasses("pressed","down")}if(this.thumbCapture!=true){return}var c=this.btnThumb;if(this.vertical){c.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-pressed"))}else{c.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal"))}c.addClass(this.toThemeProperty("jqx-fill-state-pressed"))},handlemousemove:function(b){var i=this.btnUp;var e=this.btnDown;var d=0;if(e==null||i==null){return}if(i!=null&&e!=null&&this.buttonDownCapture!=undefined&&this.buttonUpCapture!=undefined){if(this.buttonDownCapture&&b.which==d){e.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed"));e.removeClass(this.toThemeProperty("jqx-fill-state-pressed"));this._removeArrowClasses("pressed","down");this.buttonDownCapture=false}else{if(this.buttonUpCapture&&b.which==d){i.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed"));i.removeClass(this.toThemeProperty("jqx-fill-state-pressed"));this._removeArrowClasses("pressed","up");this.buttonUpCapture=false}}}if(this.thumbCapture!=true){return false}var k=this.btnThumb;if(b.which==d&&!this.isTouchDevice&&!this._touchSupport){this.thumbCapture=false;this._arrange();var j=this.vertical?this.toThemeProperty("jqx-scrollbar-thumb-state-pressed"):this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal");k.removeClass(j);k.removeClass(this.toThemeProperty("jqx-fill-state-pressed"));return true}if(b.preventDefault!=undefined){b.preventDefault()}if(b.originalEvent!=null){b.originalEvent.mouseHandled=true}if(b.stopPropagation!=undefined){b.stopPropagation()}var l=0;try{if(!this.vertical){l=b.clientX-this.dragStartX}else{l=b.clientY-this.dragStartY}var f=this._btnAndThumbSize;if(!this._btnAndThumbSize){f=(this.vertical)?i.height()+e.height()+k.height():i.width()+e.width()+k.width()}var g=(this.max-this.min)/(this.scrollBarSize-f);if(this.thumbStep=="auto"){l*=g}else{l*=g;if(Math.abs(this.dragStartValue+l-this.value)>=parseInt(this.thumbStep)){var c=Math.round(parseInt(l)/this.thumbStep)*this.thumbStep;if(this.rtl&&!this.vertical){this.setPosition(this.dragStartValue-c)}else{this.setPosition(this.dragStartValue+c)}return false}else{return false}}var c=l;if(this.rtl&&!this.vertical){c=-l}this.setPosition(this.dragStartValue+c)}catch(h){alert(h)}return false},handlemouseup:function(d,g){var c=false;if(this.thumbCapture){this.thumbCapture=false;var e=this.btnThumb;var h=this.vertical?this.toThemeProperty("jqx-scrollbar-thumb-state-pressed"):this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal");e.removeClass(h);e.removeClass(this.toThemeProperty("jqx-fill-state-pressed"));c=true;this._mouseup=new Date()}this.areaDownCapture=this.areaUpCapture=false;if(this.buttonUpCapture||this.buttonDownCapture){var b=this.btnUp;var f=this.btnDown;this.buttonUpCapture=false;this.buttonDownCapture=false;b.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed"));f.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed"));b.removeClass(this.toThemeProperty("jqx-fill-state-pressed"));f.removeClass(this.toThemeProperty("jqx-fill-state-pressed"));this._removeArrowClasses("pressed");c=true;this._mouseup=new Date()}if(c){if(g.preventDefault!=undefined){g.preventDefault()}if(g.originalEvent!=null){g.originalEvent.mouseHandled=true}if(g.stopPropagation!=undefined){g.stopPropagation()}}},setPosition:function(b,g){var d=this.element;if(b==undefined||b==NaN){b=this.min}if(b>=this.max){b=this.max}if(b<this.min){b=this.min}if(this.value!==b||g==true){if(b==this.max){var c=new jQuery.Event("complete");this.host.trigger(c)}var f=this.value;if(this._triggervaluechanged){var e=new jQuery.Event("valuechanged");e.previousValue=this.value;e.currentValue=b}this.value=b;this._positionelements();if(this._triggervaluechanged){this.host.trigger(e)}if(this.valuechanged){this.valuechanged({currentValue:this.value,previousvalue:f})}}return b},_getThumbSize:function(b){var d=this.max-this.min;var c=0;if(d>1){c=(b/(d+b)*b)}else{if(d==1){c=b}}if(this.thumbSize>0){c=this.thumbSize}if(c<this.thumbMinSize){c=this.thumbMinSize}return Math.min(c,b)},_positionelements:function(){var g=this.element;var n=this.areaUp;var e=this.areaDown;var h=this.btnUp;var f=this.btnDown;var o=this.btnThumb;var b=this.scrollWrap;var p=this._height?this._height:this.host.height();var c=this._width?this._width:this.host.width();var l=(!this.vertical)?p:c;if(!this.showButtons){l=0}var m=(!this.vertical)?c:p;this.scrollBarSize=m;var d=this._getThumbSize(m-2*l);d=Math.round(d);if(d<this.thumbMinSize){d=this.thumbMinSize}if(p==NaN||p<10){p=10}if(c==NaN||c<10){c=10}l+=2;this.btnSize=l;var i=this._btnAndThumbSize;if(!this._btnAndThumbSize){var i=(this.vertical)?2*this.btnSize+o.outerHeight():2*this.btnSize+o.outerWidth();i=Math.round(i)}var k=(m-i)/(this.max-this.min)*(this.value-this.min);if(this.rtl&&!this.vertical){k=(m-i)/(this.max-this.min)*(this.max-this.value-this.min)}k=Math.round(k);if(k<0){k=0}if(this.vertical){var j=m-k-i;if(j<0){j=0}e[0].style.height=j+"px";n[0].style.height=k+"px";this._setElementTopPosition(n,l);this._setElementTopPosition(o,l+k);this._setElementTopPosition(e,l+k+d)}else{n[0].style.width=k+"px";if(m-k-i>=0){e[0].style.width=m-k-i+"px"}else{e[0].style.width="0px"}this._setElementLeftPosition(n,l);this._setElementLeftPosition(o,l+k);this._setElementLeftPosition(e,2+l+k+d)}},_arrange:function(){if(this._initialLayout){this._initialLayout=false;return}var d=this.element;var g=this.areaUp;var r=this.areaDown;var c=this.btnUp;var k=this.btnDown;var s=this.btnThumb;var n=this.scrollWrap;var l=parseInt(this.element.style.height);var o=parseInt(this.element.style.width);if(this.isPercentage){var l=this.host.height();var o=this.host.width()}if(isNaN(l)){l=0}if(isNaN(o)){o=0}this._width=o;this._height=l;var b=(!this.vertical)?l:o;if(!this.showButtons){b=0}c[0].style.width=b+"px";c[0].style.height=b+"px";k[0].style.width=b+"px";k[0].style.height=b+"px";if(this.vertical){n[0].style.width=o+2+"px"}else{n[0].style.height=l+2+"px"}this._setElementPosition(c,0,0);var q=b+2;if(this.vertical){this._setElementPosition(k,0,l-q)}else{this._setElementPosition(k,o-q,0)}var e=(!this.vertical)?o:l;this.scrollBarSize=e;var h=this._getThumbSize(e-2*b);h=Math.round(h);if(h<this.thumbMinSize){h=this.thumbMinSize}var m=false;if(this.isTouchDevice&&this.touchModeStyle!=false){m=true}if(!this.vertical){s[0].style.width=h+"px";s[0].style.height=l+"px";if(m&&this.thumbTouchSize!==0){s.css({height:this.thumbTouchSize+"px"});s.css("margin-top",(this.host.height()-this.thumbTouchSize)/2)}}else{s[0].style.width=o+"px";s[0].style.height=h+"px";if(m&&this.thumbTouchSize!==0){s.css({width:this.thumbTouchSize+"px"});s.css("margin-left",(this.host.width()-this.thumbTouchSize)/2)}}if(l==NaN||l<10){l=10}if(o==NaN||o<10){o=10}b+=2;this.btnSize=b;var f=(this.vertical)?2*this.btnSize+(2+parseInt(s[0].style.height)):2*this.btnSize+(2+parseInt(s[0].style.width));f=Math.round(f);this._btnAndThumbSize=f;var u=(e-f)/(this.max-this.min)*(this.value-this.min);if(this.rtl&&!this.vertical){u=(e-f)/(this.max-this.min)*(this.max-this.value-this.min)}u=Math.round(u);if(u===-Infinity||u==Infinity){u=0}if(isNaN(u)){u=0}if(u<0){u=0}if(this.vertical){var t=(e-u-f);if(t<0){t=0}r[0].style.height=t+"px";r[0].style.width=o+"px";g[0].style.height=u+"px";g[0].style.width=o+"px";var i=parseInt(this.element.style.height);if(this.isPercentage){i=this.host.height()}s[0].style.visibility="inherit";if(i-3*parseInt(b)<0){s[0].style.visibility="hidden"}else{if(i<f){s[0].style.visibility="hidden"}else{if(this.element.style.visibility=="visible"){s[0].style.visibility="inherit"}}}this._setElementPosition(g,0,b);this._setElementPosition(s,0,b+u);this._setElementPosition(r,0,b+u+h)}else{if(u>0){g[0].style.width=u+"px"}if(l>0){g[0].style.height=l+"px"}var j=(e-u-f);if(j<0){j=0}r[0].style.width=j+"px";r[0].style.height=l+"px";var p=parseInt(this.element.style.width);if(this.isPercentage){p=this.host.width()}s[0].style.visibility="inherit";if(p-3*parseInt(b)<0){s[0].style.visibility="hidden"}else{if(p<f){s[0].style.visibility="hidden"}else{if(this.element.style.visibility=="visible"){s[0].style.visibility="inherit"}}}this._setElementPosition(g,b,0);this._setElementPosition(s,b+u,0);this._setElementPosition(r,2+b+u+h,0)}}})})(jQuery);




(function (a) { a.jqx.jqxWidget("jqxDropDownList", "", {}); a.extend(a.jqx._jqxDropDownList.prototype, { defineInstance: function () { this.disabled = false; this.width = null; this.height = null; this.items = new Array(); this.selectedIndex = -1; this.source = null; this.scrollBarSize = 15; this.arrowSize = 19; this.enableHover = true; this.enableSelection = true; this.visualItems = new Array(); this.groups = new Array(); this.equalItemsWidth = true; this.itemHeight = -1; this.visibleItems = new Array(); this.emptyGroupText = "Group"; this.checkboxes = false; if (this.openDelay == undefined) { this.openDelay = 250 } if (this.closeDelay == undefined) { this.closeDelay = 300 } this.animationType = "default"; this.autoOpen = false; this.dropDownWidth = "auto"; this.dropDownHeight = "200px"; this.autoDropDownHeight = false; this.keyboardSelection = true; this.enableBrowserBoundsDetection = false; this.dropDownHorizontalAlignment = "left"; this.displayMember = ""; this.valueMember = ""; this.searchMode = "startswithignorecase"; this.incrementalSearch = true; this.incrementalSearchDelay = 700; this.renderer = null; this.placeHolder = "Please Choose:"; this.promptText = "Please Choose:"; this.emptyString = ""; this.rtl = false; this.selectionRenderer = null; this.listBox = null; this.popupZIndex = 9999999999999; this.renderMode = "default"; this.touchMode = "auto"; this._checkForHiddenParent = true; this.autoBind = true; this.focusable = true; this.aria = { "aria-disabled": { name: "disabled", type: "boolean"} }; this.events = ["open", "close", "select", "unselect", "change", "checkChange", "bindingComplete"] }, createInstance: function (b) { this.render() }, render: function () { if (!this.width) { this.width = 200 } if (!this.height) { this.height = 25 } this.element.innerHTML = ""; this.isanimating = false; this.id = this.element.id || a.jqx.utilities.createId(); this.host.attr("role", "combobox"); a.jqx.aria(this, "aria-autocomplete", "both"); a.jqx.aria(this, "aria-readonly", false); var d = a("<div style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; border: 0px; position: relative;'><div id='dropdownlistWrapper' style='outline: none; background-color: transparent; border: none; float: left; width:100%; height: 100%; position: relative;'><div id='dropdownlistContent' unselectable='on' style='outline: none; background-color: transparent; border: none; float: left; position: relative;'/><div id='dropdownlistArrow' unselectable='on' style='background-color: transparent; border: none; float: right; position: relative;'><div unselectable='on'></div></div></div></div>"); this._addInput(); if (a.jqx._jqxListBox == null || a.jqx._jqxListBox == undefined) { throw new Error("jqxDropDownList: Missing reference to jqxlistbox.js.") } if (this.host.attr("tabindex")) { d.attr("tabindex", this.host.attr("tabindex")); this.host.removeAttr("tabindex") } else { d.attr("tabindex", 0) } var h = this; this.touch = a.jqx.mobile.isTouchDevice(); this.comboStructure = d; this.host.append(d); this.dropdownlistWrapper = this.host.find("#dropdownlistWrapper"); this.dropdownlistArrow = this.host.find("#dropdownlistArrow"); this.arrow = a(this.dropdownlistArrow.children()[0]); this.dropdownlistContent = this.host.find("#dropdownlistContent"); this.dropdownlistContent.addClass(this.toThemeProperty("jqx-dropdownlist-content")); this.dropdownlistWrapper.addClass(this.toThemeProperty("jqx-disableselect")); if (this.rtl) { this.dropdownlistContent.addClass(this.toThemeProperty("jqx-rtl")); this.dropdownlistContent.addClass(this.toThemeProperty("jqx-dropdownlist-content-rtl")) } this.addHandler(this.dropdownlistWrapper, "selectstart", function () { return false }); this.dropdownlistWrapper[0].id = "dropdownlistWrapper" + this.element.id; this.dropdownlistArrow[0].id = "dropdownlistArrow" + this.element.id; this.dropdownlistContent[0].id = "dropdownlistContent" + this.element.id; if (this.promptText != "Please Choose:") { this.placeHolder = this.promptText } var j = this.toThemeProperty("jqx-widget") + " " + this.toThemeProperty("jqx-dropdownlist-state-normal") + " " + this.toThemeProperty("jqx-rc-all") + " " + this.toThemeProperty("jqx-fill-state-normal"); this.element.className += " " + j; this._firstDiv = this.host.find("div:first"); try { var k = "listBox" + this.id; var f = a(a.find("#" + k)); if (f.length > 0) { f.remove() } a.jqx.aria(this, "aria-owns", k); a.jqx.aria(this, "aria-haspopup", true); var b = a("<div style='overflow: hidden; background-color: transparent; border: none; position: absolute;' id='listBox" + this.id + "'><div id='innerListBox" + this.id + "'></div></div>"); b.hide(); b.appendTo(document.body); this.container = b; this.listBoxContainer = a(a.find("#innerListBox" + this.id)); var c = this.width; if (this.dropDownWidth != "auto") { c = this.dropDownWidth } if (c == null) { c = this.host.width(); if (c == 0) { c = this.dropDownWidth } } if (this.dropDownHeight == null) { this.dropDownHeight = 200 } var h = this; this.container.width(parseInt(c) + 25); this.container.height(parseInt(this.dropDownHeight) + 25); this.addHandler(this.listBoxContainer, "bindingComplete", function (e) { h._raiseEvent("6") }); this.listBoxContainer.jqxListBox({ autoBind: this.autoBind, _checkForHiddenParent: false, focusable: this.focusable, touchMode: this.touchMode, checkboxes: this.checkboxes, rtl: this.rtl, emptyString: this.emptyString, itemHeight: this.itemHeight, width: c, searchMode: this.searchMode, incrementalSearch: this.incrementalSearch, incrementalSearchDelay: this.incrementalSearchDelay, displayMember: this.displayMember, valueMember: this.valueMember, height: this.dropDownHeight, autoHeight: this.autoDropDownHeight, scrollBarSize: this.scrollBarSize, selectedIndex: this.selectedIndex, source: this.source, theme: this.theme, rendered: function () { if (h.selectedIndex != h.listBoxContainer.jqxListBox("selectedIndex")) { h.listBox = a.data(h.listBoxContainer[0], "jqxListBox").instance; h.listBoxContainer.jqxListBox({ selectedIndex: h.selectedIndex }); h.renderSelection("mouse") } else { h.renderSelection("mouse") } }, renderer: this.renderer }); this.listBoxContainer.css({ position: "absolute", zIndex: this.popupZIndex, top: 0, left: 0 }); this.listBox = a.data(this.listBoxContainer[0], "jqxListBox").instance; this.listBox.enableSelection = this.enableSelection; this.listBox.enableHover = this.enableHover; this.listBox.equalItemsWidth = this.equalItemsWidth; this.listBox.selectIndex(this.selectedIndex); this.listBox._arrange(); this.listBoxContainer.addClass(this.toThemeProperty("jqx-popup")); if (a.jqx.browser.msie) { this.listBoxContainer.addClass(this.toThemeProperty("jqx-noshadow")) } this.addHandler(this.listBoxContainer, "unselect", function (e) { h._raiseEvent("3", { index: e.args.index, type: e.args.type, item: e.args.item }) }); this.addHandler(this.listBoxContainer, "change", function (e) { if (e.args.type != "keyboard") { h._raiseEvent("4", { index: e.args.index, type: e.args.type, item: e.args.item }) } else { if (e.args.type == "keyboard") { if (!h.isOpened()) { h._raiseEvent("4", { index: h.selectedIndex, type: "keyboard", item: h.getItem(h.selectedIndex) }) } } } }); if (this.animationType == "none") { this.container.css("display", "none") } else { this.container.hide() } } catch (g) { } var l = this; this.propertyChangeMap.disabled = function (e, n, m, o) { if (o) { e.host.addClass(l.toThemeProperty("jqx-dropdownlist-state-disabled")); e.host.addClass(l.toThemeProperty("jqx-fill-state-disabled")); e.dropdownlistContent.addClass(l.toThemeProperty("jqx-dropdownlist-content-disabled")) } else { e.host.removeClass(l.toThemeProperty("jqx-dropdownlist-state-disabled")); e.host.removeClass(l.toThemeProperty("jqx-fill-state-disabled")); e.dropdownlistContent.removeClass(l.toThemeProperty("jqx-dropdownlist-content-disabled")) } a.jqx.aria(e, "aria-disabled", e.disabled) }; if (this.disabled) { this.host.addClass(this.toThemeProperty("jqx-dropdownlist-state-disabled")); this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")); this.dropdownlistContent.addClass(this.toThemeProperty("jqx-dropdownlist-content-disabled")) } this.arrow.addClass(this.toThemeProperty("jqx-icon-arrow-down")); this.arrow.addClass(this.toThemeProperty("jqx-icon")); if (this.renderMode === "simple") { this.arrow.remove(); this.host.removeClass(this.toThemeProperty("jqx-fill-state-normal")); this.host.removeClass(this.toThemeProperty("jqx-rc-all")) } this._updateHandlers(); this._setSize(); this._arrange(); if (this.listBox) { this.renderSelection() } if (a.jqx.browser.msie && a.jqx.browser.version < 8) { if (this.host.parents(".jqx-window").length > 0) { var i = this.host.parents(".jqx-window").css("z-index"); b.css("z-index", i + 10); this.listBoxContainer.css("z-index", i + 10) } } }, resize: function (c, b) { this.width = c; this.height = b; this._setSize(); this._arrange() }, val: function (c) { if (!this.dropdownlistContent) { return "" } if (this.input && arguments.length == 0) { return this.input.val() } var b = this.getItemByValue(c); if (b != null) { this.selectItem(b) } if (this.input) { return this.input.val() } }, focus: function () { try { var d = this; var c = function () { d.host.focus(); if (d._firstDiv) { d._firstDiv.focus() } }; c(); setTimeout(function () { c() }, 10) } catch (b) { } }, _addInput: function () { var b = this.host.attr("name"); this.input = a("<input type='hidden'/>"); this.host.append(this.input); if (b) { this.input.attr("name", b) } }, getItems: function () { if (!this.listBox) { return new Array() } return this.listBox.items }, getVisibleItems: function () { return this.listBox.getVisibleItems() }, _setSize: function () { if (this.width != null && this.width.toString().indexOf("px") != -1) { this.host.width(this.width) } else { if (this.width != undefined && !isNaN(this.width)) { this.host.width(this.width) } } if (this.height != null && this.height.toString().indexOf("px") != -1) { this.host.height(this.height) } else { if (this.height != undefined && !isNaN(this.height)) { this.host.height(this.height) } } var e = false; if (this.width != null && this.width.toString().indexOf("%") != -1) { e = true; this.host.width(this.width) } if (this.height != null && this.height.toString().indexOf("%") != -1) { e = true; this.host.height(this.height) } var c = this; var d = function () { c._arrange(); if (c.dropDownWidth == "auto") { var f = c.host.width(); c.listBoxContainer.jqxListBox({ width: f }); c.container.width(parseInt(f) + 25) } }; if (e) { var b = this.host.width(); if (this.dropDownWidth != "auto") { b = this.dropDownWidth } this.listBoxContainer.jqxListBox({ width: b }); this.container.width(parseInt(b) + 25) } a.jqx.utilities.resize(this.host, function () { d() }, false, this._checkForHiddenParent) }, isOpened: function () { var c = this; var b = a.data(document.body, "openedJQXListBox" + this.id); if (b != null && b == c.listBoxContainer) { return true } return false }, _updateHandlers: function () { var c = this; var d = false; this.removeHandlers(); if (!this.touch) { this.addHandler(this.host, "mouseenter", function () { if (!c.disabled && c.enableHover && c.renderMode !== "simple") { d = true; c.host.addClass(c.toThemeProperty("jqx-dropdownlist-state-hover")); c.arrow.addClass(c.toThemeProperty("jqx-icon-arrow-down-hover")); c.host.addClass(c.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this.host, "mouseleave", function () { if (!c.disabled && c.enableHover && c.renderMode !== "simple") { c.host.removeClass(c.toThemeProperty("jqx-dropdownlist-state-hover")); c.host.removeClass(c.toThemeProperty("jqx-fill-state-hover")); c.arrow.removeClass(c.toThemeProperty("jqx-icon-arrow-down-hover")); d = false } }) } if (this.host.parents()) { this.addHandler(this.host.parents(), "scroll.dropdownlist" + this.element.id, function (e) { var f = c.isOpened(); if (f) { c.close() } }) } var b = "mousedown"; if (this.touch) { b = a.jqx.mobile.getTouchEventName("touchstart") } this.addHandler(this.dropdownlistWrapper, b, function (f) { if (!c.disabled) { var e = c.container.css("display") == "block"; if (!c.isanimating) { if (e) { c.hideListBox(); return false } else { c.showListBox(); if (!c.focusable) { if (f.preventDefault) { f.preventDefault() } } else { c.focus() } } } } }); if (c.autoOpen) { this.addHandler(this.host, "mouseenter", function () { var e = c.isOpened(); if (!e && c.autoOpen) { c.open(); c.host.focus() } }); a(document).on("mousemove." + c.id, function (h) { var g = c.isOpened(); if (g && c.autoOpen) { var l = c.host.coord(); var k = l.top; var j = l.left; var i = c.container.coord(); var e = i.left; var f = i.top; canClose = true; if (h.pageY >= k && h.pageY <= k + c.host.height()) { if (h.pageX >= j && h.pageX < j + c.host.width()) { canClose = false } } if (h.pageY >= f && h.pageY <= f + c.container.height()) { if (h.pageX >= e && h.pageX < e + c.container.width()) { canClose = false } } if (canClose) { c.close() } } }) } if (this.touch) { this.addHandler(a(document), a.jqx.mobile.getTouchEventName("touchstart") + "." + this.id, c.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.id }) } else { this.addHandler(a(document), "mousedown." + this.id, c.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.id }) } this.addHandler(this.host, "keydown", function (f) { var e = c.container.css("display") == "block"; if (c.host.css("display") == "none") { return true } if (f.keyCode == "13" || f.keyCode == "9") { if (!c.isanimating) { if (e) { c.renderSelection(); if (f.keyCode == "13" && c.focusable) { c._firstDiv.focus() } c.hideListBox(); if (!c.keyboardSelection) { c._raiseEvent("2", { index: c.selectedIndex, type: "keyboard", item: c.getItem(c.selectedIndex) }) } if (f.keyCode == "13") { c._raiseEvent("4", { index: c.selectedIndex, type: "keyboard", item: c.getItem(c.selectedIndex) }) } } if (e && f.keyCode != "9") { return false } return true } } if (f.keyCode == 115) { if (!c.isanimating) { if (!c.isOpened()) { c.showListBox() } else { if (c.isOpened()) { c.hideListBox() } } } return false } if (f.altKey) { if (c.host.css("display") == "block") { if (f.keyCode == 38) { if (c.isOpened()) { c.hideListBox(); return true } } else { if (f.keyCode == 40) { if (!c.isOpened()) { c.showListBox(); return true } } } } } if (f.keyCode == "27") { if (!c.ishiding) { if (c.isOpened()) { c.hideListBox(); if (c.tempSelectedIndex != undefined) { c.selectIndex(c.tempSelectedIndex) } } return true } } if (!c.disabled) { return c.listBox._handleKeyDown(f) } }); this.addHandler(this.listBoxContainer, "checkChange", function (e) { c.renderSelection(); c._updateInputSelection(); c._raiseEvent(5, { label: e.args.label, value: e.args.value, checked: e.args.checked, item: e.args.item }) }); this.addHandler(this.listBoxContainer, "select", function (e) { if (!c.disabled) { if (e.args.type == "keyboard" && !c.isOpened()) { c.renderSelection() } if (e.args.type != "keyboard" || c.keyboardSelection) { c.renderSelection(); c._raiseEvent("2", { index: e.args.index, type: e.args.type, item: e.args.item, originalEvent: e.args.originalEvent }); if (e.args.type == "mouse") { if (!c.checkboxes) { c.hideListBox(); if (c._firstDiv && c.focusable) { c._firstDiv.focus() } } } } } }); if (this.listBox) { if (this.listBox.content) { this.addHandler(this.listBox.content, "click", function (e) { if (!c.disabled) { if (c.listBox.itemswrapper && e.target === c.listBox.itemswrapper[0]) { return true } c.renderSelection("mouse"); if (!c.touch) { if (!c.ishiding) { if (!c.checkboxes) { c.hideListBox(); if (c._firstDiv && c.focusable) { c._firstDiv.focus() } } } } if (!c.keyboardSelection) { if (c._oldSelectedInd == undefined) { c._oldSelectedIndx = c.selectedIndex } if (c.selectedIndex != c._oldSelectedIndx) { c._raiseEvent("2", { index: c.selectedIndex, type: "keyboard", item: c.getItem(c.selectedIndex) }); c._oldSelectedIndx = c.selectedIndex } } } }) } } this.addHandler(this.host, "focus", function (e) { if (c.renderMode !== "simple") { c.host.addClass(c.toThemeProperty("jqx-dropdownlist-state-focus")); c.host.addClass(c.toThemeProperty("jqx-fill-state-focus")) } }); this.addHandler(this.host, "blur", function () { if (c.renderMode !== "simple") { c.host.removeClass(c.toThemeProperty("jqx-dropdownlist-state-focus")); c.host.removeClass(c.toThemeProperty("jqx-fill-state-focus")) } }); this.addHandler(this._firstDiv, "focus", function (e) { if (c.renderMode !== "simple") { c.host.addClass(c.toThemeProperty("jqx-dropdownlist-state-focus")); c.host.addClass(c.toThemeProperty("jqx-fill-state-focus")) } }); this.addHandler(this._firstDiv, "blur", function () { if (c.renderMode !== "simple") { c.host.removeClass(c.toThemeProperty("jqx-dropdownlist-state-focus")); c.host.removeClass(c.toThemeProperty("jqx-fill-state-focus")) } }) }, removeHandlers: function () { var c = this; var b = "mousedown"; if (this.touch) { b = a.jqx.mobile.getTouchEventName("touchstart") } this.removeHandler(this.dropdownlistWrapper, b); if (this.listBox) { if (this.listBox.content) { this.removeHandler(this.listBox.content, "click") } } this.removeHandler(this.host, "loadContent"); this.removeHandler(this.listBoxContainer, "checkChange"); this.removeHandler(this.host, "keydown"); this.removeHandler(this.host, "focus"); this.removeHandler(this.host, "blur"); this.removeHandler(this._firstDiv, "focus"); this.removeHandler(this._firstDiv, "blur"); this.removeHandler(this.host, "mouseenter"); this.removeHandler(this.host, "mouseleave"); this.removeHandler(a(document), "mousemove." + c.id) }, getItem: function (b) { var c = this.listBox.getItem(b); return c }, getItemByValue: function (c) { var b = this.listBox.getItemByValue(c); return b }, selectItem: function (b) { if (this.listBox != undefined) { this.listBox.selectItem(b); this.selectedIndex = this.listBox.selectedIndex; this.renderSelection("mouse") } }, unselectItem: function (b) { if (this.listBox != undefined) { this.listBox.unselectItem(b); this.renderSelection("mouse") } }, checkItem: function (b) { if (this.listBox != undefined) { this.listBox.checkItem(b) } }, uncheckItem: function (b) { if (this.listBox != undefined) { this.listBox.uncheckItem(b) } }, indeteterminateItem: function (b) { if (this.listBox != undefined) { this.listBox.indeteterminateItem(b) } }, renderSelection: function () { if (this.listBox == null) { return } if (this.height && this.height.toString().indexOf("%") != -1) { this._arrange() } var q = this.listBox.visibleItems[this.listBox.selectedIndex]; var n = this; if (this.checkboxes) { var h = this.getCheckedItems(); if (h != null && h.length > 0) { q = h[0] } else { q = null } } if (q == null) { var d = a('<span unselectable="on" style="color: inherit; border: none; background-color: transparent;"></span>'); d.appendTo(a(document.body)); d.addClass(this.toThemeProperty("jqx-widget")); d.addClass(this.toThemeProperty("jqx-listitem-state-normal")); d.addClass(this.toThemeProperty("jqx-item")); a.jqx.utilities.html(d, this.placeHolder); var c = this.dropdownlistContent.css("padding-top"); var r = this.dropdownlistContent.css("padding-bottom"); d.css("padding-top", c); d.css("padding-bottom", r); var b = d.outerHeight(); d.remove(); d.removeClass(); a.jqx.utilities.html(this.dropdownlistContent, d); var p = this.host.height(); if (this.height != null && this.height != undefined) { if (this.height.toString().indexOf("%") === -1) { p = parseInt(this.height) } } var o = parseInt((parseInt(p) - parseInt(b)) / 2); if (o > 0) { this.dropdownlistContent.css("margin-top", o + "px"); this.dropdownlistContent.css("margin-bottom", o + "px") } if (this.selectionRenderer) { a.jqx.utilities.html(this.dropdownlistContent, this.selectionRenderer(d, -1, "", "")); this.dropdownlistContent.css("margin-top", "0px"); this.dropdownlistContent.css("margin-bottom", "0px"); this._updateInputSelection() } this.selectedIndex = this.listBox.selectedIndex; if (this.width === "auto") { this._arrange() } if (this.focusable && this.isOpened()) { this.focus() } return } this.selectedIndex = this.listBox.selectedIndex; var d = a('<span unselectable="on" style="color: inherit; border: none; background-color: transparent;"></span>'); d.appendTo(a(document.body)); d.addClass(this.toThemeProperty("jqx-widget")); d.addClass(this.toThemeProperty("jqx-listitem-state-normal")); d.addClass(this.toThemeProperty("jqx-item")); var e = false; try { if (q.html != undefined && q.html != null && q.html.toString().length > 0) { a.jqx.utilities.html(d, q.html) } else { if (q.label != undefined && q.label != null && q.label.toString().length > 0) { a.jqx.utilities.html(d, q.label) } else { if (q.label === null || q.label === "") { e = true; a.jqx.utilities.html(d, "") } else { if (q.value != undefined && q.value != null && q.value.toString().length > 0) { a.jqx.utilities.html(d, q.value) } else { if (q.title != undefined && q.title != null && q.title.toString().length > 0) { a.jqx.utilities.html(d, q.title) } else { if (q.label == "" || q.label == null) { e = true; a.jqx.utilities.html(d, "") } } } } } } } catch (m) { var j = m } var c = this.dropdownlistContent.css("padding-top"); var r = this.dropdownlistContent.css("padding-bottom"); d.css("padding-top", c); d.css("padding-bottom", r); var b = d.outerHeight(); if (b === 0) { b = 16 } if ((q.label == "" || q.label == null) && e) { a.jqx.utilities.html(d, "") } var g = this.width && this.width.toString().indexOf("%") <= 0; d.remove(); d.removeClass(); if (this.selectionRenderer) { a.jqx.utilities.html(this.dropdownlistContent, this.selectionRenderer(d, q.index, q.label, q.value)); if (this.focusable && this.isOpened()) { this.focus() } } else { if (this.checkboxes) { var k = this.getCheckedItems(); var l = ""; for (var f = 0; f < k.length; f++) { if (f == k.length - 1) { l += k[f].label } else { l += k[f].label + "," } } d.text(l); if (g) { d.css("max-width", this.host.width() - 30) } d.css("overflow", "hidden"); d.css("display", "block"); if (!this.rtl) { if (g) { d.css("width", this.host.width() - 30) } } d.css("text-overflow", "ellipsis"); d.css("padding-bottom", 1 + parseInt(r)); this.dropdownlistContent.html(d); if (this.focusable && this.isOpened()) { this.focus() } } else { if (this.width && this.width !== "auto") { if (g) { if (!this.rtl) { d.css("max-width", this.host.width() - this.arrowSize - 3) } } d.css("overflow", "hidden"); d.css("display", "block"); d.css("padding-bottom", 1 + parseInt(r)); if (!this.rtl) { if (g) { d.css("width", this.host.width() - this.arrowSize - 3) } } d.css("text-overflow", "ellipsis") } this.dropdownlistContent.html(d); if (this.focusable && this.isOpened()) { this.focus() } } } var p = this.host.height(); if (this.height != null && this.height != undefined) { if (this.height.toString().indexOf("%") === -1) { p = parseInt(this.height) } } var o = parseInt((parseInt(p) - parseInt(b)) / 2); if (o > 0) { this.dropdownlistContent.css("margin-top", o + "px"); this.dropdownlistContent.css("margin-bottom", o + "px") } if (this.selectionRenderer) { this.dropdownlistContent.css("margin-top", "0px"); this.dropdownlistContent.css("margin-bottom", "0px") } if (this.dropdownlistContent && this.input) { this._updateInputSelection() } if (this.listBox && this.listBox._activeElement) { a.jqx.aria(this, "aria-activedescendant", this.listBox._activeElement.id) } if (this.width === "auto") { this._arrange() } }, _updateInputSelection: function () { if (this.input) { if (this.selectedIndex == -1) { this.input.val("") } else { var e = this.getSelectedItem(); if (e != null) { this.input.val(e.value) } else { this.input.val(this.dropdownlistContent.text()) } } if (this.checkboxes) { var b = this.getCheckedItems(); var f = ""; if (b != null) { for (var c = 0; c < b.length; c++) { var d = b[c].value; if (d == undefined) { continue } if (c == b.length - 1) { f += d } else { f += d + "," } } } this.input.val(f) } } }, setContent: function (b) { a.jqx.utilities.html(this.dropdownlistContent, b); this._updateInputSelection() }, dataBind: function () { this.listBoxContainer.jqxListBox({ source: this.source }); this.renderSelection("mouse"); if (this.source == null) { this.clearSelection() } }, clear: function () { this.listBoxContainer.jqxListBox({ source: null }); this.clearSelection() }, clearSelection: function (b) { this.selectedIndex = -1; this._updateInputSelection(); this.listBox.clearSelection(); this.renderSelection(); if (!this.selectionRenderer) { a.jqx.utilities.html(this.dropdownlistContent, this.placeHolder) } }, unselectIndex: function (b, c) { if (isNaN(b)) { return } this.listBox.unselectIndex(b, c); this.renderSelection() }, selectIndex: function (b, d, e, c) { this.listBox.selectIndex(b, d, e, c, "api") }, getSelectedIndex: function () { return this.selectedIndex }, getSelectedItem: function () { return this.listBox.getVisibleItem(this.selectedIndex) }, getCheckedItems: function () { return this.listBox.getCheckedItems() }, checkIndex: function (b) { this.listBox.checkIndex(b) }, uncheckIndex: function (b) { this.listBox.uncheckIndex(b) }, indeterminateIndex: function (b) { this.listBox.indeterminateIndex(b) }, checkAll: function () { this.listBox.checkAll(); this.renderSelection("mouse") }, uncheckAll: function () { this.listBox.uncheckAll(); this.renderSelection("mouse") }, addItem: function (b) { return this.listBox.addItem(b) }, insertAt: function (c, b) { if (c == null) { return false } return this.listBox.insertAt(c, b) }, removeAt: function (c) { var b = this.listBox.removeAt(c); this.renderSelection("mouse"); return b }, removeItem: function (c) { var b = this.listBox.removeItem(c); this.renderSelection("mouse"); return b }, updateItem: function (c, d) { var b = this.listBox.updateItem(c, d); this.renderSelection("mouse"); return b }, updateAt: function (d, c) { var b = this.listBox.updateAt(d, c); this.renderSelection("mouse"); return b }, ensureVisible: function (b) { return this.listBox.ensureVisible(b) }, disableAt: function (b) { return this.listBox.disableAt(b) }, enableAt: function (b) { return this.listBox.enableAt(b) }, disableItem: function (b) { return this.listBox.disableItem(b) }, enableItem: function (b) { return this.listBox.enableItem(b) }, _findPos: function (c) { while (c && (c.type == "hidden" || c.nodeType != 1 || a.expr.filters.hidden(c))) { c = c.nextSibling } var b = a(c).coord(true); return [b.left, b.top] }, testOffset: function (h, f, c) { var g = h.outerWidth(); var j = h.outerHeight(); var i = a(window).width() + a(window).scrollLeft(); var e = a(window).height() + a(window).scrollTop(); if (f.left + g > i) { if (g > this.host.width()) { var d = this.host.coord().left; var b = g - this.host.width(); f.left = d - b + 2 } } if (f.left < 0) { f.left = parseInt(this.host.coord().left) + "px" } f.top -= Math.min(f.top, (f.top + j > e && e > j) ? Math.abs(j + c + 22) : 0); return f }, open: function () { this.showListBox() }, close: function () { this.hideListBox() }, _getBodyOffset: function () { var c = 0; var b = 0; if (a("body").css("border-top-width") != "0px") { c = parseInt(a("body").css("border-top-width")); if (isNaN(c)) { c = 0 } } if (a("body").css("border-left-width") != "0px") { b = parseInt(a("body").css("border-left-width")); if (isNaN(b)) { b = 0 } } return { left: b, top: c} }, showListBox: function () { a.jqx.aria(this, "aria-expanded", true); if (this.dropDownWidth == "auto" && this.width != null && this.width.indexOf && (this.width.indexOf("%") != -1 || this.width.indexOf("auto") != -1)) { if (this.listBox.host.width() != this.host.width()) { var c = this.host.width(); this.listBoxContainer.jqxListBox({ width: c }); this.container.width(parseInt(c) + 25) } } var q = this; var e = this.listBoxContainer; var k = this.listBox; var n = a(window).scrollTop(); var i = a(window).scrollLeft(); var l = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + "px"; var g, h = parseInt(Math.round(this.host.coord(true).left)); g = h + "px"; var p = a.jqx.mobile.isSafariMobileBrowser() || a.jqx.mobile.isWindowsPhone(); if (this.listBox == null) { return } var d = a.jqx.utilities.hasTransform(this.host); this.ishiding = false; if (!this.keyboardSelection) { this.listBox.selectIndex(this.selectedIndex); this.listBox.ensureVisible(this.selectedIndex) } this.tempSelectedIndex = this.selectedIndex; if (this.autoDropDownHeight) { this.container.height(this.listBoxContainer.height() + 25) } if (d || (p != null && p)) { g = a.jqx.mobile.getLeftPos(this.element); l = a.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight()); if (a("body").css("border-top-width") != "0px") { l = parseInt(l) - this._getBodyOffset().top + "px" } if (a("body").css("border-left-width") != "0px") { g = parseInt(g) - this._getBodyOffset().left + "px" } } e.stop(); if (this.renderMode !== "simple") { this.host.addClass(this.toThemeProperty("jqx-dropdownlist-state-selected")); this.host.addClass(this.toThemeProperty("jqx-fill-state-pressed")); this.arrow.addClass(this.toThemeProperty("jqx-icon-arrow-down-selected")) } this.container.css("left", g); this.container.css("top", l); k._arrange(); var f = true; var r = false; if (this.dropDownHorizontalAlignment == "right" || this.rtl) { var m = this.container.outerWidth(); var b = Math.abs(m - this.host.width()); if (m > this.host.width()) { this.container.css("left", 25 + parseInt(Math.round(h)) - b + "px") } else { this.container.css("left", 25 + parseInt(Math.round(h)) + b + "px") } } if (this.enableBrowserBoundsDetection) { var j = this.testOffset(e, { left: parseInt(this.container.css("left")), top: parseInt(l) }, parseInt(this.host.outerHeight())); if (parseInt(this.container.css("top")) != j.top) { r = true; e.css("top", 23); e.addClass(this.toThemeProperty("jqx-popup-up")) } else { e.css("top", 0) } this.container.css("top", j.top); if (parseInt(this.container.css("left")) != j.left) { this.container.css("left", j.left) } } if (this.animationType == "none") { this.container.css("display", "block"); a.data(document.body, "openedJQXListBoxParent", q); a.data(document.body, "openedJQXListBox" + this.id, e); e.css("margin-top", 0); e.css("opacity", 1); k._renderItems(); q._raiseEvent("0", k) } else { this.container.css("display", "block"); q.isanimating = true; if (this.animationType == "fade") { e.css("margin-top", 0); e.css("opacity", 0); e.animate({ opacity: 1 }, this.openDelay, function () { a.data(document.body, "openedJQXListBoxParent", q); a.data(document.body, "openedJQXListBox" + q.id, e); q.ishiding = false; q.isanimating = false; k._renderItems(); q._raiseEvent("0", k) }) } else { e.css("opacity", 1); var o = e.outerHeight(); if (r) { e.css("margin-top", o) } else { e.css("margin-top", -o) } e.animate({ "margin-top": 0 }, this.openDelay, function () { a.data(document.body, "openedJQXListBoxParent", q); a.data(document.body, "openedJQXListBox" + q.id, e); q.ishiding = false; q.isanimating = false; k._renderItems(); q._raiseEvent("0", k) }) } } if (!r) { this.host.addClass(this.toThemeProperty("jqx-rc-b-expanded")); e.addClass(this.toThemeProperty("jqx-rc-t-expanded")) } else { this.host.addClass(this.toThemeProperty("jqx-rc-t-expanded")); e.addClass(this.toThemeProperty("jqx-rc-b-expanded")) } if (this.renderMode !== "simple") { e.addClass(this.toThemeProperty("jqx-fill-state-focus")); this.host.addClass(this.toThemeProperty("jqx-dropdownlist-state-focus")); this.host.addClass(this.toThemeProperty("jqx-fill-state-focus")) } }, hideListBox: function () { a.jqx.aria(this, "aria-expanded", false); var f = this.listBoxContainer; var g = this.listBox; var c = this.container; var d = this; a.data(document.body, "openedJQXListBox" + this.id, null); if (this.animationType == "none") { this.container.css("display", "none") } else { if (!d.ishiding) { f.stop(); var b = f.outerHeight(); f.css("margin-top", 0); d.isanimating = true; var e = -b; if (parseInt(this.container.coord().top) < parseInt(this.host.coord().top)) { e = b } if (this.animationType == "fade") { f.css({ opacity: 1 }); f.animate({ opacity: 0 }, this.closeDelay, function () { c.css("display", "none"); d.isanimating = false; d.ishiding = false }) } else { f.animate({ "margin-top": e }, this.closeDelay, function () { c.css("display", "none"); d.isanimating = false; d.ishiding = false }) } } } this.ishiding = true; this.host.removeClass(this.toThemeProperty("jqx-dropdownlist-state-selected")); this.host.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); this.arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-down-selected")); this.host.removeClass(this.toThemeProperty("jqx-rc-b-expanded")); f.removeClass(this.toThemeProperty("jqx-rc-t-expanded")); this.host.removeClass(this.toThemeProperty("jqx-rc-t-expanded")); f.removeClass(this.toThemeProperty("jqx-rc-b-expanded")); f.removeClass(this.toThemeProperty("jqx-fill-state-focus")); this.host.removeClass(this.toThemeProperty("jqx-dropdownlist-state-focus")); this.host.removeClass(this.toThemeProperty("jqx-fill-state-focus")); this._raiseEvent("1", g) }, closeOpenedListBox: function (e) { var d = e.data.me; var b = a(e.target); var c = e.data.listbox; if (c == null) { return true } if (a(e.target).ischildof(e.data.me.host)) { return true } if (!d.isOpened()) { return true } var f = d; var g = false; a.each(b.parents(), function () { if (this.className != "undefined") { if (this.className.indexOf) { if (this.className.indexOf("jqx-listbox") != -1) { g = true; return false } if (this.className.indexOf("jqx-dropdownlist") != -1) { if (d.element.id == this.id) { g = true } return false } } } }); if (c != null && !g && d.isOpened()) { d.hideListBox() } return true }, loadFromSelect: function (b) { this.listBox.loadFromSelect(b) }, refresh: function (b) { if (b !== true) { this._setSize(); this._arrange(); if (this.listBox) { this.renderSelection() } } }, _arrange: function () { var f = parseInt(this.host.width()); var b = parseInt(this.host.height()); var e = this.arrowSize; var d = this.arrowSize; var g = 3; var c = f - d - 2 * g; if (c > 0 && this.width !== "auto") { this.dropdownlistContent.width(c + "px") } if (this.width === "auto") { this.dropdownlistContent.css("width", "auto"); f = this.dropdownlistContent.width() + d + 2 * g; this.host.width(f) } this.dropdownlistContent.height(b); this.dropdownlistContent.css("left", 0); this.dropdownlistContent.css("top", 0); this.dropdownlistArrow.width(d); this.dropdownlistArrow.height(b); if (this.rtl) { this.dropdownlistArrow.css("float", "left"); this.dropdownlistContent.css("float", "right") } }, destroy: function () { a.jqx.utilities.resize(this.host, null, true); this.removeHandler(this.listBoxContainer, "select"); this.removeHandler(this.listBoxContainer, "unselect"); this.removeHandler(this.listBoxContainer, "change"); this.removeHandler(this.dropdownlistWrapper, "selectstart"); this.removeHandler(this.dropdownlistWrapper, "mousedown"); this.removeHandler(this.host, "keydown"); this.removeHandler(this.listBoxContainer, "select"); this.removeHandler(this.listBox.content, "click"); this.removeHandler(this.listBoxContainer, "bindingComplete"); if (this.host.parents()) { this.removeHandler(this.host.parents(), "scroll.dropdownlist" + this.element.id) } this.removeHandlers(); this.listBoxContainer.jqxListBox("destroy"); this.listBoxContainer.remove(); this.host.removeClass(); this.removeHandler(a(document), "mousedown." + this.id, this.closeOpenedListBox); if (this.touch) { this.removeHandler(a(document), a.jqx.mobile.getTouchEventName("touchstart") + "." + this.id) } this.dropdownlistArrow.remove(); delete this.dropdownlistArrow; delete this.dropdownlistWrapper; delete this.listBoxContainer; delete this.input; delete this.arrow; delete this.dropdownlistContent; delete this.listBox; delete this._firstDiv; this.container.remove(); delete this.container; var b = a.data(this.element, "jqxDropDownList"); if (b) { delete b.instance } this.host.removeData(); this.host.remove(); delete this.comboStructure; delete this.host; delete this.set; delete this.get; delete this.call; delete this.element }, _raiseEvent: function (f, c) { if (c == undefined) { c = { owner: null} } var d = this.events[f]; args = c; args.owner = this; var e = new jQuery.Event(d); e.owner = this; if (f == 2 || f == 3 || f == 4 || f == 5) { e.args = c } var b = this.host.trigger(e); return b }, propertyChangedHandler: function (b, c, f, e) { if (b.isInitialized == undefined || b.isInitialized == false) { return } if (c == "enableSelection") { b.listBoxContainer.jqxListBox({ enableSelection: e }) } if (c == "enableHover") { b.listBoxContainer.jqxListBox({ enableHover: e }) } if (c == "autoOpen") { b._updateHandlers() } if (c == "emptyString") { b.listBox.emptyString = b.emptyString } if (c == "itemHeight") { b.listBoxContainer.jqxListBox({ itemHeight: e }) } if (c == "renderer") { b.listBoxContainer.jqxListBox({ renderer: e }) } if (c == "rtl") { if (e) { b.dropdownlistArrow.css("float", "left"); b.dropdownlistContent.css("float", "right") } else { b.dropdownlistArrow.css("float", "right"); b.dropdownlistContent.css("float", "left") } b.listBoxContainer.jqxListBox({ rtl: b.rtl }) } if (c == "source") { b.listBoxContainer.jqxListBox({ source: b.source }); b.listBox.selectedIndex = -1; b.listBox.selectIndex(this.selectedIndex); b.renderSelection(); if (e == null) { b.clear() } } if (c == "displayMember" || c == "valueMember") { b.listBoxContainer.jqxListBox({ displayMember: b.displayMember, valueMember: b.valueMember }); b.renderSelection() } if (c == "placeHolder") { b.renderSelection() } if (c == "theme" && e != null) { b.listBoxContainer.jqxListBox({ theme: e }); b.listBoxContainer.addClass(b.toThemeProperty("jqx-popup")); if (a.jqx.browser.msie) { b.listBoxContainer.addClass(b.toThemeProperty("jqx-noshadow")) } b.dropdownlistContent.removeClass(); b.dropdownlistContent.addClass(b.toThemeProperty("jqx-dropdownlist-content")); b.dropdownlistWrapper.removeClass(); b.dropdownlistWrapper.addClass(b.toThemeProperty("jqx-disableselect")); b.host.removeClass(); b.host.addClass(b.toThemeProperty("jqx-fill-state-normal")); b.host.addClass(b.toThemeProperty("jqx-dropdownlist-state-normal")); b.host.addClass(b.toThemeProperty("jqx-rc-all")); b.host.addClass(b.toThemeProperty("jqx-widget")); b.arrow.removeClass(); b.arrow.addClass(b.toThemeProperty("jqx-icon-arrow-down")); b.arrow.addClass(b.toThemeProperty("jqx-icon")) } if (c == "autoDropDownHeight") { b.listBoxContainer.jqxListBox({ autoHeight: b.autoDropDownHeight }); if (b.autoDropDownHeight) { b.container.height(b.listBoxContainer.height() + 25) } else { b.listBoxContainer.jqxListBox({ height: b.dropDownHeight }); b.container.height(parseInt(b.dropDownHeight) + 25) } b.listBox._arrange(); b.listBox._updatescrollbars() } if (c == "searchMode") { b.listBoxContainer.jqxListBox({ searchMode: b.searchMode }) } if (c == "incrementalSearch") { b.listBoxContainer.jqxListBox({ incrementalSearch: b.incrementalSearch }) } if (c == "incrementalSearchDelay") { b.listBoxContainer.jqxListBox({ incrementalSearchDelay: b.incrementalSearchDelay }) } if (c == "dropDownHeight") { if (!b.autoDropDownHeight) { b.listBoxContainer.jqxListBox({ height: b.dropDownHeight }); b.container.height(parseInt(b.dropDownHeight) + 25) } } if (c == "dropDownWidth" || c == "scrollBarSize") { var d = b.width; if (b.dropDownWidth != "auto") { d = b.dropDownWidth } b.listBoxContainer.jqxListBox({ width: d, scrollBarSize: b.scrollBarSize }); b.container.width(parseInt(d) + 25) } if (c == "width" || c == "height") { if (e != f) { this.refresh(); if (c == "width") { if (b.dropDownWidth == "auto") { var d = b.host.width(); b.listBoxContainer.jqxListBox({ width: d }); b.container.width(parseInt(d) + 25) } } } } if (c == "checkboxes") { b.listBoxContainer.jqxListBox({ checkboxes: b.checkboxes }) } if (c == "selectedIndex") { if (b.listBox != null) { b.listBox.selectIndex(parseInt(e)); b.renderSelection() } } } }) })(jQuery);


(function (a) { a.jqx.jqxWidget("jqxListBox", "", {}); a.extend(a.jqx._jqxListBox.prototype, { defineInstance: function () { var b = { disabled: false, width: null, height: null, items: new Array(), multiple: false, selectedIndex: -1, selectedIndexes: new Array(), source: null, scrollBarSize: a.jqx.utilities.scrollBarSize, enableHover: true, enableSelection: true, visualItems: new Array(), groups: new Array(), equalItemsWidth: true, itemHeight: -1, visibleItems: new Array(), emptyGroupText: "Group", checkboxes: false, hasThreeStates: false, autoHeight: false, autoItemsHeight: false, roundedcorners: true, touchMode: "auto", displayMember: "", valueMember: "", searchMode: "startswithignorecase", incrementalSearch: true, incrementalSearchDelay: 1000, incrementalSearchKeyDownDelay: 300, allowDrag: false, allowDrop: true, dropAction: "default", touchModeStyle: "auto", keyboardNavigation: true, enableMouseWheel: true, multipleextended: false, selectedValues: new Array(), emptyString: "", rtl: false, rendered: null, renderer: null, dragStart: null, dragEnd: null, focusable: true, ready: null, _checkForHiddenParent: true, autoBind: true, filterable: false, filterHeight: 27, filterPlaceHolder: "Looking for", filterDelay: 100, aria: { "aria-disabled": { name: "disabled", type: "boolean" } }, events: ["select", "unselect", "change", "checkChange", "dragStart", "dragEnd", "bindingComplete"] }; a.extend(true, this, b) }, createInstance: function (c) { var b = this; if (a.jqx.utilities.scrollBarSize != 15) { b.scrollBarSize = a.jqx.utilities.scrollBarSize } if (b.width == null) { b.width = 200 } if (b.height == null) { b.height = 200 } b.render(); var d = b; a.jqx.utilities.resize(b.host, function () { d._updateSize() }, false, b._checkForHiddenParent) }, resize: function (c, b) { this.width = c; this.height = b; this._updateSize() }, render: function () { var l = this; var k = l.element.nodeName.toLowerCase(); if (k == "select" || k == "ul" || k == "ol") { l.field = l.element; if (l.field.className) { l._className = l.field.className } var h = { title: l.field.title }; if (l.field.id.length) { h.id = l.field.id.replace(/[^\w]/g, "_") + "_jqxListBox" } else { h.id = a.jqx.utilities.createId() + "_jqxListBox" } var b = a("<div></div>", h); if (!l.width) { l.width = a(l.field).width() } if (!l.height) { l.height = a(l.field).outerHeight() } a(l.field).hide().after(b); l.host = b; l.element = b[0]; if (l.field.tabIndex) { var c = l.field.tabIndex; l.field.tabIndex = -1; l.element.tabIndex = c } } l.element.innerHTML = ""; var l = l; var g = l.element.className; g += " " + l.toThemeProperty("jqx-listbox"); g += " " + l.toThemeProperty("jqx-reset"); g += " " + l.toThemeProperty("jqx-rc-all"); g += " " + l.toThemeProperty("jqx-widget"); g += " " + l.toThemeProperty("jqx-widget-content"); l.element.className = g; var f = false; if (l.width != null && l.width.toString().indexOf("%") != -1) { l.host.width(l.width); f = true } if (l.height != null && l.height.toString().indexOf("%") != -1) { l.host.height(l.height); if (l.host.height() == 0) { l.host.height(200) } f = true } if (l.width != null && l.width.toString().indexOf("px") != -1) { l.host.width(l.width) } else { if (l.width != undefined && !isNaN(l.width)) { l.element.style.width = parseInt(l.width) + "px" } } if (l.height != null && l.height.toString().indexOf("px") != -1) { l.host.height(l.height) } else { if (l.height != undefined && !isNaN(l.height)) { l.element.style.height = parseInt(l.height) + "px" } } if (l.multiple || l.multipleextended || l.checkboxes) { a.jqx.aria(l, "aria-multiselectable", true) } else { a.jqx.aria(l, "aria-multiselectable", false) } var e = a("<div style='-webkit-appearance: none; background: transparent; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'><div style='-webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'><div id='filter" + l.element.id + "' style='display: none; visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><input style='position: absolute;'/></div><div id='listBoxContent' style='-webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/><div id='verticalScrollBar" + l.element.id + "' style='visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/><div id='horizontalScrollBar" + l.element.id + "' style='visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/><div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'/></div></div>"); if (l._checkForHiddenParent) { l._addInput(); if (!l.host.attr("tabIndex")) { l.host.attr("tabIndex", 1) } } l.host.attr("role", "listbox"); l.host.append(e); l.filter = l.host.find("#filter" + l.element.id); l.filterInput = l.filter.find("input"); l.filterInput.attr("placeholder", l.filterPlaceHolder); l.filterInput.addClass(l.toThemeProperty("jqx-widget jqx-input jqx-rc-all")); l.addHandler(l.filterInput, "keyup.textchange", function (n) { if (n.keyCode == 13) { l._search(n) } else { if (l.filterDelay > 0) { if (l._filterTimer) { clearTimeout(l._filterTimer) } l._filterTimer = setTimeout(function () { l._search(n) }, l.filterDelay) } } n.stopPropagation() }); var i = l.host.find("#verticalScrollBar" + l.element.id); if (!l.host.jqxButton) { throw new Error("jqxListBox: Missing reference to jqxbuttons.js."); return } if (!i.jqxScrollBar) { throw new Error("jqxListBox: Missing reference to jqxscrollbar.js."); return } var d = parseInt(l.host.height()) / 2; if (d == 0) { d = 10 } l.vScrollBar = i.jqxScrollBar({ _initialLayout: true, vertical: true, rtl: l.rtl, theme: l.theme, touchMode: l.touchMode, largestep: d }); var m = l.host.find("#horizontalScrollBar" + l.element.id); l.hScrollBar = m.jqxScrollBar({ _initialLayout: true, vertical: false, rtl: l.rtl, touchMode: l.touchMode, theme: l.theme }); l.content = l.host.find("#listBoxContent"); l.content[0].id = "listBoxContent" + l.element.id; l.bottomRight = l.host.find("#bottomRight").addClass(l.toThemeProperty("jqx-listbox-bottomright")).addClass(l.toThemeProperty("jqx-scrollbar-state-normal")); l.bottomRight[0].id = "bottomRight" + l.element.id; l.vScrollInstance = a.data(l.vScrollBar[0], "jqxScrollBar").instance; l.hScrollInstance = a.data(l.hScrollBar[0], "jqxScrollBar").instance; if (l.isTouchDevice()) { if (!(a.jqx.browser.msie && a.jqx.browser.version < 9)) { var j = a("<div class='overlay' unselectable='on' style='z-index: 99; -webkit-appearance: none; border: none; background: black; opacity: 0.01; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>"); l.content.parent().append(j); l.overlayContent = l.host.find(".overlay") } } l._updateTouchScrolling(); l.host.addClass("jqx-disableselect"); if (l.host.jqxDragDrop) { jqxListBoxDragDrop() } }, _highlight: function (b, c) { var d = c.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"); return b.replace(new RegExp("(" + d + ")", "ig"), function (e, f) { return "<b>" + f + "</b>" }) }, _addInput: function () { var b = this.host.attr("name"); if (b) { this.host.attr("name", "") } this.input = a("<input type='hidden'/>"); this.host.append(this.input); this.input.attr("name", b) }, _updateTouchScrolling: function () { var b = this; if (this.isTouchDevice()) { b.enableHover = false; var c = this.overlayContent ? this.overlayContent : this.content; this.removeHandler(a(c), a.jqx.mobile.getTouchEventName("touchstart") + ".touchScroll"); this.removeHandler(a(c), a.jqx.mobile.getTouchEventName("touchmove") + ".touchScroll"); this.removeHandler(a(c), a.jqx.mobile.getTouchEventName("touchend") + ".touchScroll"); this.removeHandler(a(c), "touchcancel.touchScroll"); a.jqx.mobile.touchScroll(c, b.vScrollInstance.max, function (f, e) { if (b.vScrollBar.css("visibility") != "hidden") { var d = b.vScrollInstance.value; b.vScrollInstance.setPosition(d + e); b._lastScroll = new Date() } if (b.hScrollBar.css("visibility") != "hidden") { var d = b.hScrollInstance.value; b.hScrollInstance.setPosition(d + f); b._lastScroll = new Date() } }, this.element.id, this.hScrollBar, this.vScrollBar); if (b.vScrollBar.css("visibility") != "visible" && b.hScrollBar.css("visibility") != "visible") { a.jqx.mobile.setTouchScroll(false, this.element.id) } else { a.jqx.mobile.setTouchScroll(true, this.element.id) } this._arrange() } }, isTouchDevice: function () { var b = a.jqx.mobile.isTouchDevice(); if (this.touchMode == true) { if (this.touchDevice) { return true } if (a.jqx.browser.msie && a.jqx.browser.version < 9) { return false } this.touchDevice = true; b = true; a.jqx.mobile.setMobileSimulator(this.element) } else { if (this.touchMode == false) { b = false } } if (b && this.touchModeStyle != false) { this.scrollBarSize = a.jqx.utilities.touchScrollBarSize } if (b) { this.host.addClass(this.toThemeProperty("jqx-touch")) } return b }, beginUpdate: function () { this.updatingListBox = true }, endUpdate: function () { this.updatingListBox = false; this._addItems(); this._renderItems() }, beginUpdateLayout: function () { this.updating = true }, resumeUpdateLayout: function () { this.updating = false; this.vScrollInstance.value = 0; this._render(false) }, propertyChangedHandler: function (b, c, e, d) { if (this.isInitialized == undefined || this.isInitialized == false) { return } if (c == "filterable") { b.refresh() } if (c == "filterHeight") { b._arrange() } if (c == "filterPlaceHolder") { b.filterInput.attr("placeholder", d) } if (c == "renderer") { b._cachedItemHtml = new Array(); b.refresh() } if (c == "itemHeight") { b.refresh() } if (c == "source" || c == "checkboxes") { if (d == null && e && e.unbindBindingUpdate) { e.unbindBindingUpdate(b.element.id); e.unbindDownloadComplete(b.element.id) } b.clearSelection(); b.refresh() } if (c == "scrollBarSize" || c == "equalItemsWidth") { if (d != e) { b._updatescrollbars() } } if (c == "disabled") { b._renderItems(); b.vScrollBar.jqxScrollBar({ disabled: d }); b.hScrollBar.jqxScrollBar({ disabled: d }) } if (c == "touchMode" || c == "rtl") { b._removeHandlers(); b.vScrollBar.jqxScrollBar({ touchMode: d }); b.hScrollBar.jqxScrollBar({ touchMode: d }); if (c == "touchMode") { if (!(a.jqx.browser.msie && a.jqx.browser.version < 9)) { var g = a("<div class='overlay' unselectable='on' style='z-index: 99; -webkit-appearance: none; border: none; background: black; opacity: 0.01; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>"); b.content.parent().append(g); b.overlayContent = b.host.find(".overlay") } } b._updateTouchScrolling(); b._addHandlers(); b._render(false) } if (!this.updating) { if (c == "width" || c == "height") { b._updateSize() } } if (c == "theme") { if (e != d) { b.hScrollBar.jqxScrollBar({ theme: b.theme }); b.vScrollBar.jqxScrollBar({ theme: b.theme }); b.host.removeClass(); b.host.addClass(b.toThemeProperty("jqx-listbox")); b.host.addClass(b.toThemeProperty("jqx-widget")); b.host.addClass(b.toThemeProperty("jqx-widget-content")); b.host.addClass(b.toThemeProperty("jqx-reset")); b.host.addClass(b.toThemeProperty("jqx-rc-all")); b.refresh() } } if (c == "selectedIndex") { b.clearSelection(); b.selectIndex(d, true) } if (c == "displayMember" || c == "valueMember") { if (e != d) { var f = b.selectedIndex; b.refresh(); b.selectedIndex = f; b.selectedIndexes[f] = f } b._renderItems() } if (c == "autoHeight") { if (e != d) { b._render(false) } else { b._updatescrollbars(); b._renderItems() } } if (b._checkForHiddenParent && a.jqx.isHidden(b.host)) { a.jqx.utilities.resize(this.host, function () { b._updateSize() }, false, b._checkForHiddenParent) } }, loadFromSelect: function (g) { if (g == null) { return } var c = "#" + g; var d = a(c); if (d.length > 0) { var b = a.jqx.parseSourceTag(d[0]); var f = b.items; var e = b.index; this.source = f; this.fromSelect = true; this.clearSelection(); this.selectedIndex = e; this.selectedIndexes[this.selectedIndex] = this.selectedIndex; this.refresh() } }, invalidate: function () { this._cachedItemHtml = []; this._renderItems(); this.virtualSize = null; this._updateSize() }, refresh: function (c) { var b = this; if (this.vScrollBar == undefined) { return } this._cachedItemHtml = []; this.visibleItems = new Array(); var d = function (e) { if (e == true) { if (b.selectedIndex != -1) { var f = b.selectedIndex; b.selectedIndex = -1; b._stopEvents = true; b.selectIndex(f, false, true); if (b.selectedIndex == -1) { b.selectedIndex = f } b._stopEvents = false } } }; if (this.itemswrapper != null) { this.itemswrapper.remove(); this.itemswrapper = null } if (a.jqx.dataAdapter && this.source != null && this.source._source) { this.databind(this.source, c); d(c); return } if (this.autoBind || (!this.autoBind && !c)) { if (this.field) { this.loadSelectTag() } this.items = this.loadItems(this.source) } this._raiseEvent("6"); this._render(false, c == true); d(c) }, loadSelectTag: function () { var b = a.jqx.parseSourceTag(this.field); this.source = b.items; if (this.selectedIndex == -1) { this.selectedIndex = b.index } }, _render: function (c, b) { this._addItems(); this._renderItems(); this.vScrollInstance.setPosition(0); this._cachedItemHtml = new Array(); if (c == undefined || c) { if (this.items != undefined && this.items != null) { if (this.selectedIndex >= 0 && this.selectedIndex < this.items.length) { this.selectIndex(this.selectedIndex, true, true, true) } } } if (this.allowDrag && this._enableDragDrop) { this._enableDragDrop(); if (this.isTouchDevice()) { this._removeHandlers(); if (this.overlayContent) { this.overlayContent.remove(); this.overlayContent = null } this._updateTouchScrolling(); this._addHandlers(); return } } this._updateTouchScrolling(); if (this.rendered) { this.rendered() } if (this.ready) { this.ready() } }, _hitTest: function (c, f) { if (this.filterable) { f -= this.filterHeight; if (f < 0) { f = 0 } } var e = parseInt(this.vScrollInstance.value); var b = this._searchFirstVisibleIndex(f + e, this.renderedVisibleItems); if (this.renderedVisibleItems[b] != undefined && this.renderedVisibleItems[b].isGroup) { return null } if (this.renderedVisibleItems.length > 0) { var d = this.renderedVisibleItems[this.renderedVisibleItems.length - 1]; if (d.height + d.top < f + e) { return null } } b = this._searchFirstVisibleIndex(f + e); return this.visibleItems[b]; return null }, _searchFirstVisibleIndex: function (e, f) { if (e == undefined) { e = parseInt(this.vScrollInstance.value) } var c = 0; if (f == undefined || f == null) { f = this.visibleItems } var b = f.length; while (c <= b) { mid = parseInt((c + b) / 2); var d = f[mid]; if (d == undefined) { break } if (d.initialTop > e && d.initialTop + d.height > e) { b = mid - 1 } else { if (d.initialTop < e && d.initialTop + d.height <= e) { c = mid + 1 } else { return mid; break } } } return 0 }, _renderItems: function () { if (this.items == undefined || this.items.length == 0) { this.visibleItems = new Array(); return } if (this.updatingListBox == true) { return } var N = this.isTouchDevice(); var G = this.vScrollInstance; var h = this.hScrollInstance; var g = parseInt(G.value); var f = parseInt(h.value); if (this.rtl) { if (this.hScrollBar[0].style.visibility != "hidden") { f = h.max - f } } var B = this.items.length; var M = this.host.width(); var K = parseInt(this.content[0].style.width); var b = K + parseInt(h.max); var q = parseInt(this.vScrollBar[0].style.width) + 2; if (this.vScrollBar[0].style.visibility == "hidden") { q = 0 } if (this.hScrollBar[0].style.visibility != "visible") { b = K } var l = this._getVirtualItemsCount(); var L = new Array(); var F = 0; var E = parseInt(this.element.style.height) + 2; if (this.element.style.height.indexOf("%") != -1) { E = this.host.outerHeight() } if (isNaN(E)) { E = 0 } var t = 0; var s = 0; var Q = 0; if (G.value == 0 || this.visibleItems.length == 0) { for (var r = 0; r < this.items.length; r++) { var x = this.items[r]; if (x.visible) { x.top = -g; x.initialTop = -g; if (!x.isGroup && x.visible) { this.visibleItems[s++] = x; x.visibleIndex = s - 1 } this.renderedVisibleItems[Q++] = x; x.left = -f; var c = x.top + x.height; if (c >= 0 && x.top - x.height <= E) { L[F++] = { index: r, item: x } } g -= x.height } } } var m = g > 0 ? this._searchFirstVisibleIndex(this.vScrollInstance.value, this.renderedVisibleItems) : 0; var O = 0; F = 0; var z = this.vScrollInstance.value; var J = 0; while (O < 100 + E) { var x = this.renderedVisibleItems[m]; if (x == undefined) { break } if (x.visible) { x.left = -f; var c = x.top + x.height - z; if (c >= 0 && x.initialTop - z - x.height <= 2 * E) { L[F++] = { index: m, item: x } } } m++; if (x.visible) { O += x.initialTop - z + x.height - O } J++; if (J > this.items.length - 1) { break } } var o = this.toThemeProperty("jqx-listitem-state-normal") + " " + this.toThemeProperty("jqx-item"); var i = this.toThemeProperty("jqx-listitem-state-group"); var P = this.toThemeProperty("jqx-listitem-state-disabled") + " " + this.toThemeProperty("jqx-fill-state-disabled"); var C = 0; var n = this; for (var r = 0; r < this.visualItems.length; r++) { var D = this.visualItems[r]; var I = function () { var y = D[0].firstChild; if (n.checkboxes) { y = D[0].lastChild } if (y != null) { y.style.visibility = "hidden"; y.className = "" } if (n.checkboxes) { var R = D.find(".chkbox"); R.css({ visibility: "hidden" }) } }; if (r < L.length) { var x = L[r].item; if (x.initialTop - z >= E) { I(); continue } var A = a(D[0].firstChild); if (this.checkboxes) { A = a(D[0].lastChild) } if (A.length == 0) { continue } if (A[0] == null) { continue } A[0].className = ""; A[0].style.display = "block"; A[0].style.visibility = "inherit"; var p = ""; if (!x.isGroup && !this.selectedIndexes[x.index] >= 0) { p = o } else { p = i } if (x.disabled || this.disabled) { p += " " + P } if (this.roundedcorners) { p += " " + this.toThemeProperty("jqx-rc-all") } if (N) { p += " " + this.toThemeProperty("jqx-listitem-state-normal-touch") } A[0].className = p; if (this.renderer) { if (!x.key) { x.key = this.generatekey() } if (!this._cachedItemHtml) { this._cachedItemHtml = new Array() } if (this._cachedItemHtml[x.key]) { if (A[0].innerHTML != this._cachedItemHtml[x.key]) { A[0].innerHTML = this._cachedItemHtml[x.key] } } else { var w = this.renderer(x.index, x.label, x.value); A[0].innerHTML = w; this._cachedItemHtml[x.key] = A[0].innerHTML } } else { if (this.itemHeight !== -1) { var k = 2 + 2 * parseInt(A.css("padding-top")); A[0].style.lineHeight = (x.height - k) + "px"; A.css("vertical-align", "middle") } if (x.html != null && x.html.toString().length > 0) { A[0].innerHTML = x.html } else { if (x.label != null || x.value != null) { if (x.label != null) { if (A[0].innerHTML !== x.label) { A[0].innerHTML = x.label } if (a.trim(x.label) == "") { A[0].innerHTML = this.emptyString; if (this.emptyString == "") { A[0].style.height = (x.height - 8) + "px" } } if (!this.incrementalSearch && !x.disabled) { if (this.searchString != undefined && this.searchString != "") { A[0].innerHTML = this._highlight(x.label.toString(), this.searchString) } } } else { if (x.label === null) { A[0].innerHTML = this.emptyString; if (this.emptyString == "") { A[0].style.height = (x.height - 8) + "px" } } else { if (A[0].innerHTML !== x.value) { A[0].innerHTML = x.value } else { if (x.label == "") { A[0].innerHTML = " " } } } } } else { if (x.label == "" || x.label == null) { A[0].innerHTML = ""; A[0].style.height = (x.height - 8) + "px" } } } } D[0].style.left = x.left + "px"; D[0].style.top = x.initialTop - z + "px"; x.element = A[0]; if (x.title) { A[0].title = x.title } if (this.equalItemsWidth && !x.isGroup) { if (t == 0) { var d = parseInt(b); var v = parseInt(A.outerWidth()) - parseInt(A.width()); d -= v; var H = 1; if (H != null) { H = parseInt(H) } else { H = 0 } d -= 2 * H; t = d; if (this.checkboxes && this.hScrollBar[0].style.visibility == "hidden") { t -= 18 } } if (K > this.virtualSize.width) { A[0].style.width = t + "px"; x.width = t } else { A[0].style.width = -4 + this.virtualSize.width + "px"; x.width = this.virtualSize.width - 4 } } else { if (A.width() < this.host.width()) { A.width(this.host.width() - 2) } } if (this.rtl) { A[0].style.textAlign = "right" } if (this.autoItemsHeight) { A[0].style.whiteSpace = "normal"; A.width(t); x.width = t } C = 0; if (this.checkboxes && !x.isGroup) { if (C == 0) { C = (x.height - 16) / 2; C++ } var e = a(D.children()[0]); e[0].item = x; if (!this.rtl) { if (A[0].style.left != "18px") { A[0].style.left = "18px" } } else { if (A[0].style.left != "0px") { A[0].style.left = "0px" } } if (this.rtl) { e.css("left", 8 + x.width + "px") } e[0].style.top = C + "px"; e[0].style.display = "block"; e[0].style.visibility = "inherit"; var u = x.checked; var j = x.checked ? " " + this.toThemeProperty("jqx-checkbox-check-checked") : ""; if (e[0].firstChild && e[0].firstChild.firstChild && e[0].firstChild.firstChild.firstChild) { if (e[0].firstChild.firstChild) { if (u) { e[0].firstChild.firstChild.firstChild.className = j } else { if (u === false) { e[0].firstChild.firstChild.firstChild.className = "" } else { if (u === null) { e[0].firstChild.firstChild.firstChild.className = this.toThemeProperty("jqx-checkbox-check-indeterminate") } } } } } if (a.jqx.ariaEnabled) { if (u) { D[0].setAttribute("aria-selected", true) } else { D[0].removeAttribute("aria-selected") } } } else { if (this.checkboxes) { var e = a(D.children()[0]); e.css({ display: "none", visibility: "inherit" }) } } if (!x.disabled && ((!this.filterable && this.selectedIndexes[x.visibleIndex] >= 0) || (x.selected && this.filterable))) { A.addClass(this.toThemeProperty("jqx-listitem-state-selected")); A.addClass(this.toThemeProperty("jqx-fill-state-pressed")); if (a.jqx.ariaEnabled) { D[0].setAttribute("aria-selected", true); this._activeElement = D[0] } } else { if (!this.checkboxes) { if (a.jqx.ariaEnabled) { D[0].removeAttribute("aria-selected") } } } } else { I() } } }, generatekey: function () { var b = function () { return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1) }; return (b() + b() + "-" + b() + "-" + b() + "-" + b() + "-" + b() + b() + b()) }, _calculateVirtualSize: function () { var o = 0; var m = 2; var g = 0; var n = a("<span></span>"); if (this.equalItemsWidth) { n.css("float", "left") } var h = 0; var i = this.host.outerHeight(); a(document.body).append(n); var e = this.items.length; var j = this.host.width(); if (this.autoItemsHeight) { j -= 10; if (this.vScrollBar.css("visibility") != "hidden") { j -= 20 } } if (this.autoItemsHeight || this.renderer || this.groups.length > 1 || (e > 0 && this.items[0].html != null && this.items[0].html != "")) { for (var g = 0; g < e; g++) { var r = this.items[g]; if (r.isGroup && (r.label == "" && r.html == "")) { continue } if (!r.visible) { continue } var d = ""; if (!r.isGroup) { d += this.toThemeProperty("jqx-listitem-state-normal jqx-rc-all") } else { d += this.toThemeProperty("jqx-listitem-state-group jqx-rc-all") } d += " " + this.toThemeProperty("jqx-fill-state-normal"); if (this.isTouchDevice()) { d += " " + this.toThemeProperty("jqx-touch") } n[0].className = d; if (this.autoItemsHeight) { n[0].style.whiteSpace = "normal"; var b = this.checkboxes ? -20 : 0; n[0].style.width = (b + j) + "px" } if (this.renderer) { var k = this.renderer(r.index, r.label, r.value); n[0].innerHTML = k } else { if (r.html != null && r.html.toString().length > 0) { n[0].innerHTML = r.html } else { if (r.label != null || r.value != null) { if (r.label != null) { n[0].innerHTML = r.label; if (r.label == "") { n[0].innerHTML = "Empty" } } else { n[0].innerHTML = r.value } } } } var q = n.outerHeight(); var s = n.outerWidth(); if (this.itemHeight > -1) { q = this.itemHeight } r.height = q; r.width = s; m += q; o = Math.max(o, s); if (m <= i) { h++ } } } else { var m = 0; var l = 0; var c = ""; var t = 0; var f = 0; var p = -1; for (var g = 0; g < e; g++) { var r = this.items[g]; if (r.isGroup && (r.label == "" && r.html == "")) { continue } if (!r.visible) { continue } p++; var d = ""; if (p == 0) { d += this.toThemeProperty("jqx-listitem-state-normal jqx-rc-all"); d += " " + this.toThemeProperty("jqx-fill-state-normal"); d += " " + this.toThemeProperty("jqx-widget"); d += " " + this.toThemeProperty("jqx-listbox"); d += " " + this.toThemeProperty("jqx-widget-content"); if (this.isTouchDevice()) { d += " " + this.toThemeProperty("jqx-touch"); d += " " + this.toThemeProperty("jqx-listitem-state-normal-touch") } n[0].className = d; if (this.autoItemsHeight) { n[0].style.whiteSpace = "normal"; var b = this.checkboxes ? -20 : 0; n[0].style.width = (b + j) + "px" } if (r.html == null || (r.label == "" || r.label == null)) { n[0].innerHTML = "Item" } else { if (r.html != null && r.html.toString().length > 0) { n[0].innerHTML = r.html } else { if (r.label != null || r.value != null) { if (r.label != null) { if (r.label.toString().match(new RegExp("\\w")) != null || r.label.toString().match(new RegExp("\\d")) != null) { n[0].innerHTML = r.label } else { n[0].innerHTML = "Item" } } else { n[0].innerHTML = r.value } } } } var q = 1 + n.outerHeight(); if (this.itemHeight > -1) { q = this.itemHeight } l = q } if (t != undefined) { f = t } if (r.html != null && r.html.toString().length > 0) { t = Math.max(t, r.html.toString().length); if (f != t) { c = r.html } } else { if (r.label != null) { t = Math.max(t, r.label.length); if (f != t) { c = r.label } } else { if (r.value != null) { t = Math.max(t, r.value.length); if (f != t) { c = r.value } } } } r.height = l; m += l; if (m <= i) { h++ } } n[0].innerHTML = c; o = n.outerWidth() } m += 2; if (h < 10) { h = 10 } if (this.filterable) { m += this.filterHeight } n.remove(); return { width: o, height: m, itemsPerPage: h } }, _getVirtualItemsCount: function () { if (this.virtualItemsCount == 0) { var b = parseInt(this.host.height()) / 5; if (b > this.items.length) { b = this.items.length } return b } else { return this.virtualItemsCount } }, _addItems: function (p) { var t = this; if (t.updatingListBox == true) { return } if (t.items == undefined || t.items.length == 0) { t.virtualSize = { width: 0, height: 0, itemsPerPage: 0 }; t._updatescrollbars(); t.renderedVisibleItems = new Array(); if (t.itemswrapper) { t.itemswrapper.children().remove() } return } if (p == false) { var b = t._calculateVirtualSize(); var f = b.itemsPerPage * 2; if (t.autoHeight) { f = t.items.length } t.virtualItemsCount = Math.min(f, t.items.length); var o = b.width; t.virtualSize = b; t._updatescrollbars(); return } var l = this; var j = 0; t.visibleItems = new Array(); t.renderedVisibleItems = new Array(); t._removeHandlers(); if (t.allowDrag && t._enableDragDrop) { t.itemswrapper = null } if (t.itemswrapper == null) { t.content[0].innerHTML = ""; t.itemswrapper = a('<div style="outline: 0 none; overflow:hidden; width:100%; position: relative;"></div>'); t.itemswrapper.height(2 * t.host.height()); t.content.append(t.itemswrapper) } var b = t._calculateVirtualSize(); var f = b.itemsPerPage * 2; if (t.autoHeight) { f = t.items.length } t.virtualItemsCount = Math.min(f, t.items.length); var t = this; var o = b.width; t.virtualSize = b; t.itemswrapper.width(Math.max(t.host.width(), 17 + b.width)); var c = 0; var g = ""; var e = a.jqx.browser.msie && a.jqx.browser.version < 9; var q = e ? ' unselectable="on"' : ""; for (var h = c; h < t.virtualItemsCount; h++) { var s = t.items[h]; var n = "listitem" + h + t.element.id; g += "<div" + q + " role='option' id='" + n + "' class='jqx-listitem-element'>"; if (t.checkboxes) { g += '<div style="background-color: transparent; padding: 0; margin: 0; position: absolute; float: left; width: 16px; height: 16px;" class="chkbox">'; var m = '<div class="' + t.toThemeProperty("jqx-checkbox-default") + " " + t.toThemeProperty("jqx-fill-state-normal") + " " + t.toThemeProperty("jqx-rc-all") + '"><div style="cursor: pointer; width: 13px; height: 13px;">'; var u = s.checked ? " " + t.toThemeProperty("jqx-checkbox-check-checked") : ""; m += '<span style="width: 13px; height: 13px;" class="checkBoxCheck' + u + '"></span>'; m += "</div></div>"; g += m; g += "</div>" } g += "<span" + q + " style='-ms-touch-action: none;'></span></div>" } if (l.WinJS) { t.itemswrapper.html(g) } else { t.itemswrapper[0].innerHTML = g } var d = t.itemswrapper.children(); for (var h = c; h < t.virtualItemsCount; h++) { var s = t.items[h]; var r = a(d[h]); if (t.allowDrag && t._enableDragDrop) { r.addClass("draggable") } if (t.checkboxes) { var i = a(r.children()[0]); r.css("float", "left"); var k = a(r[0].firstChild); k.css("float", "left") } r[0].style.height = s.height + "px"; r[0].style.top = j + "px"; j += s.height; t.visualItems[h] = r } t._addHandlers(); t._updatescrollbars(); if (t.autoItemsHeight) { var b = t._calculateVirtualSize(); var f = b.itemsPerPage * 2; if (t.autoHeight) { f = t.items.length } t.virtualItemsCount = Math.min(f, t.items.length); var t = this; var o = b.width; t.virtualSize = b; t._updatescrollbars() } if (a.jqx.browser.msie && a.jqx.browser.version < 8) { t.host.attr("hideFocus", true); t.host.find("div").attr("hideFocus", true) } }, _updatescrollbars: function () { var k = this; if (!k.virtualSize) { return } var n = k.virtualSize.height; var j = k.virtualSize.width; var f = k.vScrollInstance; var e = k.hScrollInstance; k._arrange(false); var l = false; var o = k.host.outerWidth(); var m = k.host.outerHeight(); var b = 0; if (j > o) { b = k.hScrollBar.outerHeight() + 2 } if (n + b > m) { var d = f.max; f.max = 2 + parseInt(n) + b - parseInt(m - 2); if (k.vScrollBar[0].style.visibility != "inherit") { k.vScrollBar[0].style.visibility = "inherit"; l = true } if (d != f.max) { f._arrange() } } else { if (k.vScrollBar[0].style.visibility != "hidden") { k.vScrollBar[0].style.visibility = "hidden"; l = true; f.setPosition(0) } } var h = 0; if (k.vScrollBar[0].style.visibility != "hidden") { h = k.scrollBarSize + 6 } var g = k.checkboxes ? 20 : 0; if (k.autoItemsHeight) { k.hScrollBar[0].style.visibility = "hidden" } else { if (j >= o - h - g) { var i = e.max; if (k.vScrollBar[0].style.visibility == "inherit") { e.max = g + h + parseInt(j) - k.host.width() + 4 } else { e.max = g + parseInt(j) - k.host.width() + 6 } if (k.hScrollBar[0].style.visibility != "inherit") { k.hScrollBar[0].style.visibility = "inherit"; l = true } if (i != e.max) { e._arrange() } if (k.vScrollBar[0].style.visibility == "inherit") { f.max = 2 + parseInt(n) + k.hScrollBar.outerHeight() + 2 - parseInt(k.host.height()) } } else { if (k.hScrollBar[0].style.visibility != "hidden") { k.hScrollBar[0].style.visibility = "hidden"; l = true } } } e.setPosition(0); if (l) { k._arrange() } if (k.itemswrapper) { k.itemswrapper[0].style.width = Math.max(0, Math.max(o - 2, 17 + j)) + "px"; k.itemswrapper[0].style.height = Math.max(0, 2 * m) + "px" } var c = k.isTouchDevice(); if (c) { if (k.vScrollBar.css("visibility") != "visible" && k.hScrollBar.css("visibility") != "visible") { a.jqx.mobile.setTouchScroll(false, k.element.id) } else { a.jqx.mobile.setTouchScroll(true, k.element.id) } } }, clear: function () { this.source = null; this.clearSelection(); this.refresh() }, clearSelection: function (b) { for (var c = 0; c < this.selectedIndexes.length; c++) { if (this.selectedIndexes[c] && this.selectedIndexes[c] != -1) { this._raiseEvent("1", { index: c, type: "api", item: this.getVisibleItem(c), originalEvent: null }) } this.selectedIndexes[c] = -1 } this.selectedIndex = -1; this.selectedValue = null; this.selectedValues = new Array(); if (b != false) { this._renderItems() } }, unselectIndex: function (b, c) { if (isNaN(b)) { return } this.selectedIndexes[b] = -1; var e = false; for (var d = 0; d < this.selectedIndexes.length; d++) { var b = this.selectedIndexes[d]; if (b != -1 && b != undefined) { e = true } } if (!e) { this.selectedValue = null; this.selectedIndex = -1; if (this.selectedValues[this.getVisibleItem(b).value]) { this.selectedValues[this.getVisibleItem(b).value] = null } } if (c == undefined || c == true) { this._renderItems(); this._raiseEvent("1", { index: b, type: "api", item: this.getVisibleItem(b), originalEvent: null }) } this._updateInputSelection(); this._raiseEvent("2", { index: b, type: "api", item: this.getItem(b) }) }, getItem: function (c) { if (c == -1 || isNaN(c) || typeof (c) === "string") { if (c === -1) { return null } return this.getItemByValue(c) } var b = null; var d = a.each(this.items, function () { if (this.index == c) { b = this; return false } }); return b }, getVisibleItem: function (b) { if (b == -1 || isNaN(b) || typeof (b) === "string") { if (b === -1) { return null } return this.getItemByValue(b) } return this.visibleItems[b] }, getVisibleItems: function () { return this.visibleItems }, checkIndex: function (b, c, e) { if (!this.checkboxes) { return } if (isNaN(b)) { return } if (b < 0 || b >= this.visibleItems.length) { return } if (this.visibleItems[b] != null && this.visibleItems[b].disabled) { return } if (this.disabled) { return } var d = this.getItem(b); if (this.groups.length > 0) { var d = this.getVisibleItem(b) } if (d != null) { var f = a(d.checkBoxElement); d.checked = true; if (c == undefined || c == true) { this._updateCheckedItems() } } if (e == undefined || e == true) { this._raiseEvent(3, { label: d.label, value: d.value, checked: true, item: d }) } }, getCheckedItems: function () { if (!this.checkboxes) { return null } var b = new Array(); if (this.items == undefined) { return } a.each(this.items, function () { if (this.checked) { b[b.length] = this } }); return b }, checkAll: function (b) { if (!this.checkboxes) { return } if (this.disabled) { return } var c = this; a.each(this.items, function () { var d = this; if (b !== false && d.checked !== true) { c._raiseEvent(3, { label: d.label, value: d.value, checked: true, item: d }) } this.checked = true }); this._updateCheckedItems() }, uncheckAll: function (b) { if (!this.checkboxes) { return } if (this.disabled) { return } var c = this; a.each(this.items, function () { var d = this; if (b !== false && d.checked !== false) { this.checked = false; c._raiseEvent(3, { label: d.label, value: d.value, checked: false, item: d }) } this.checked = false }); this._updateCheckedItems() }, uncheckIndex: function (b, c, e) { if (!this.checkboxes) { return } if (isNaN(b)) { return } if (b < 0 || b >= this.visibleItems.length) { return } if (this.visibleItems[b] != null && this.visibleItems[b].disabled) { return } if (this.disabled) { return } var d = this.getItem(b); if (this.groups.length > 0) { var d = this.getVisibleItem(b) } if (d != null) { var f = a(d.checkBoxElement); d.checked = false; if (c == undefined || c == true) { this._updateCheckedItems() } } if (e == undefined || e == true) { this._raiseEvent(3, { label: d.label, value: d.value, checked: false, item: d }) } }, indeterminateIndex: function (b, c, e) { if (!this.checkboxes) { return } if (isNaN(b)) { return } if (b < 0 || b >= this.visibleItems.length) { return } if (this.visibleItems[b] != null && this.visibleItems[b].disabled) { return } if (this.disabled) { return } var d = this.getItem(b); if (this.groups.length > 0) { var d = this.getVisibleItem(b) } if (d != null) { var f = a(d.checkBoxElement); d.checked = null; if (c == undefined || c == true) { this._updateCheckedItems() } } if (e == undefined || e == true) { this._raiseEvent(3, { checked: null }) } }, getSelectedIndex: function () { return this.selectedIndex }, getSelectedItems: function () { var b = this.getVisibleItems(); var e = this.selectedIndexes; var d = []; for (var c in e) { if (e[c] != -1) { d[d.length] = b[c] } } return d }, getSelectedItem: function () { return this.getItem(this.selectedIndex) }, _updateCheckedItems: function () { var b = this.selectedIndex; this.clearSelection(false); var c = this.getCheckedItems(); this.selectedIndex = b; this._renderItems(); var d = a.data(this.element, "hoveredItem"); if (d != null) { a(d).addClass(this.toThemeProperty("jqx-listitem-state-hover")); a(d).addClass(this.toThemeProperty("jqx-fill-state-hover")) } this._updateInputSelection() }, getItemByValue: function (d) { if (this.visibleItems == null) { return } if (d && d.value) { d = d.value } if (this.itemsByValue) { return this.itemsByValue[a.trim(d).split(" ").join("")] } var b = this.visibleItems; for (var c = 0; c < b.length; c++) { if (b[c].value == d) { return b[c]; break } } }, checkItem: function (c) { if (c != null) { var b = this._getItemByParam(c); return this.checkIndex(b.index, true) } return false }, uncheckItem: function (c) { if (c != null) { var b = this._getItemByParam(c); return this.uncheckIndex(b.index, true) } return false }, indeterminateItem: function (c) { if (c != null) { var b = this._getItemByParam(c); return this.indeterminateIndex(b.index, true) } return false }, val: function (c) { if (!this.input) { return } var d = function (f) { for (var e in f) { if (f.hasOwnProperty(e)) { return false } } if (typeof c == "number") { return false } if (typeof c == "date") { return false } if (typeof c == "boolean") { return false } if (typeof c == "string") { return false } return true }; if (d(c) || arguments.length == 0) { return this.input.val() } var b = this.getItemByValue(c); if (b != null) { this.selectItem(b) } if (this.input) { return this.input.val() } }, selectItem: function (c) { if (c != null) { if (c.index == undefined) { var b = this.getItemByValue(c); if (b) { c = b } } return this.selectIndex(c.visibleIndex, true) } return false }, unselectItem: function (c) { if (c != null) { if (c.index == undefined) { var b = this.getItemByValue(c); if (b) { c = b } } return this.unselectIndex(c.visibleIndex, true) } return false }, selectIndex: function (j, q, c, d, m, b) { if (isNaN(j)) { return } if (this.filterable) { this.selectedIndex = -1 } if (j < -1 || j >= this.visibleItems.length) { return } if (this.visibleItems[j] != null && this.visibleItems[j].disabled) { return } if (this.disabled) { return } if (!this.multiple && !this.multipleextended && this.selectedIndex == j && !d) { if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) { h = this.getVisibleItem(j); if (h) { this.selectedValue = h.value; this.selectedValues[h.value] = h.value } } return } if (this.checkboxes) { this._updateCheckedItems(); return } this.focused = true; var p = false; if (this.selectedIndex != j) { p = true } var o = this.selectedIndex; if (this.selectedIndex == j && !this.multiple) { o = -1 } if (m == undefined) { m = "none" } var h = this.getItem(j); var r = this.getItem(o); if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) { h = this.getVisibleItem(j); r = this.getVisibleItem(o) } if (d != undefined && d) { this._raiseEvent("1", { index: o, type: m, item: r, originalEvent: b }); this.selectedIndex = j; this.selectedIndexes[o] = -1; this.selectedIndexes[j] = j; if (h) { this.selectedValue = h.value; this.selectedValues[h.value] = h.value } this._raiseEvent("0", { index: j, type: m, item: h, originalEvent: b }) } else { var l = this; var e = function (s, w, u, v, t, i) { l._raiseEvent("1", { index: w, type: u, item: v, originalEvent: i }); l.selectedIndex = s; l.selectedIndexes = []; w = s; l.selectedIndexes[s] = s; l.selectedValues = new Array(); if (t) { l.selectedValues[t.value] = t.value } l._raiseEvent("0", { index: s, type: u, item: t, originalEvent: i }) }; var k = function (s, w, u, v, t, i) { if (l.selectedIndexes[s] == undefined || l.selectedIndexes[s] == -1) { l.selectedIndexes[s] = s; l.selectedIndex = s; if (t) { l.selectedValues[t.value] = t.value; l._raiseEvent("0", { index: s, type: u, item: t, originalEvent: i }) } } else { w = l.selectedIndexes[s]; v = l.getVisibleItem(w); if (v) { l.selectedValues[v.value] = null } l.selectedIndexes[s] = -1; l.selectedIndex = -1; l._raiseEvent("1", { index: w, type: u, item: v, originalEvent: i }) } }; if (this.multipleextended) { if (!this._shiftKey && !this._ctrlKey) { if (m != "keyboard" && m != "mouse") { k(j, o, m, r, h, b); l._clickedIndex = j } else { this.clearSelection(false); l._clickedIndex = j; e(j, o, m, r, h, b) } } else { if (this._ctrlKey) { if (m == "keyboard") { this.clearSelection(false); l._clickedIndex = j } k(j, o, m, r, h, b) } else { if (this._shiftKey) { if (l._clickedIndex == undefined) { l._clickedIndex = o } var f = Math.min(l._clickedIndex, j); var n = Math.max(l._clickedIndex, j); this.clearSelection(false); for (var g = f; g <= n; g++) { l.selectedIndexes[g] = g; l.selectedValues[l.getVisibleItem(g).value] = l.getVisibleItem(g).value; l._raiseEvent("0", { index: g, type: m, item: this.getVisibleItem(g), originalEvent: b }) } if (m != "keyboard") { l.selectedIndex = l._clickedIndex } else { l.selectedIndex = j } } } } } else { if (this.multiple) { k(j, o, m, r, h, b) } else { if (h) { this.selectedValue = h.value } e(j, o, m, r, h, b) } } } if (c == undefined || c == true) { this._renderItems() } if (q != undefined && q != null && q == true) { this.ensureVisible(j) } this._raiseEvent("2", { index: j, item: h, oldItem: r, type: m, originalEvent: b }); this._updateInputSelection(); return p }, _updateInputSelection: function () { this._syncSelection(); var c = new Array(); if (this.input) { if (this.selectedIndex == -1) { this.input.val("") } else { if (this.items) { if (this.items[this.selectedIndex] != undefined) { this.input.val(this.items[this.selectedIndex].value); c.push(this.items[this.selectedIndex].value) } } } if (this.multiple || this.multipleextended || this.checkboxes) { var b = !this.checkboxes ? this.getSelectedItems() : this.getCheckedItems(); var e = ""; if (b) { for (var d = 0; d < b.length; d++) { if (undefined != b[d]) { if (d == b.length - 1) { e += b[d].value } else { e += b[d].value + "," } c.push(b[d].value) } } this.input.val(e) } } } if (this.field && this.input) { if (this.field.nodeName.toLowerCase() == "select") { a.each(this.field, function (f, g) { a(this).removeAttr("selected"); this.selected = c.indexOf(this.value) >= 0; if (this.selected) { a(this).attr("selected", true) } }) } else { a.each(this.items, function (f, g) { a(this.originalItem.originalItem).removeAttr("data-selected"); this.selected = c.indexOf(this.value) >= 0; if (this.selected) { a(this.originalItem.originalItem).attr("data-selected", true) } }) } } }, isIndexInView: function (c) { if (isNaN(c)) { return false } if (!this.items) { return false } if (c < 0 || c >= this.items.length) { return false } var d = this.vScrollInstance.value; if (this.filterable) { d -= this.filterHeight } var e = this.visibleItems[c]; if (e == undefined) { return true } var b = e.initialTop; var f = e.height; if (b - d < 0 || b - d + f >= this.host.outerHeight()) { return false } return true }, _itemsInPage: function () { var b = 0; var c = this; if (this.items) { a.each(this.items, function () { if ((this.initialTop + this.height) >= c.content.height()) { return false } b++ }) } return b }, _firstItemIndex: function () { if (this.visibleItems != null) { if (this.visibleItems[0]) { if (this.visibleItems[0].isGroup) { return this._nextItemIndex(0) } else { return 0 } } else { return 0 } } return -1 }, _lastItemIndex: function () { if (this.visibleItems != null) { if (this.visibleItems[this.visibleItems.length - 1]) { if (this.visibleItems[this.visibleItems.length - 1].isGroup) { return this._prevItemIndex(this.visibleItems.length - 1) } else { return this.visibleItems.length - 1 } } else { return this.visibleItems.length - 1 } } return -1 }, _nextItemIndex: function (b) { for (indx = b + 1; indx < this.visibleItems.length; indx++) { if (this.visibleItems[indx]) { if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) { return indx } } } return -1 }, _prevItemIndex: function (b) { for (indx = b - 1; indx >= 0; indx--) { if (this.visibleItems[indx]) { if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) { return indx } } } return -1 }, _search: function (c) { var b = this; var d = b.filterInput.val(); if (c.keyCode == 9) { return } if (b.searchMode == "none" || b.searchMode == null || b.searchMode == "undefined") { return } if (c.keyCode == 16 || c.keyCode == 17 || c.keyCode == 20) { return } if (c.keyCode == 37 || c.keyCode == 39) { return false } if (c.altKey || c.keyCode == 18) { return } if (c.keyCode >= 33 && c.keyCode <= 40) { return } if (c.ctrlKey || b.ctrlKey) { if (c.keyCode != 88 && c.keyCode != 86) { return } } if (d === b.searchString) { return } b._updateItemsVisibility(d) }, _updateItemsVisibility: function (h) { var e = this.getItems(); if (e == undefined) { return { index: -1, matchItem: new Array() } } var f = this; var d = -1; var i = new Array(); var g = 0; a.each(e, function (k) { var m = ""; if (!this.isGroup) { if (this.label) { m = this.label } else { if (this.value) { m = this.value } else { if (this.title) { m = this.title } else { m = "jqxItem" } } } m = m.toString(); var l = false; switch (f.searchMode) { case "containsignorecase": l = a.jqx.string.containsIgnoreCase(m, h); break; case "contains": l = a.jqx.string.contains(m, h); break; case "equals": l = a.jqx.string.equals(m, h); break; case "equalsignorecase": l = a.jqx.string.equalsIgnoreCase(m, h); break; case "startswith": l = a.jqx.string.startsWith(m, h); break; case "startswithignorecase": l = a.jqx.string.startsWithIgnoreCase(m, h); break; case "endswith": l = a.jqx.string.endsWith(m, h); break; case "endswithignorecase": l = a.jqx.string.endsWithIgnoreCase(m, h); break } if (!l) { this.visible = false } if (l) { i[g++] = this; this.visible = true; d = this.visibleIndex } if (h == "") { this.visible = true; l = false } } }); f.renderedVisibleItems = new Array(); f.visibleItems = new Array(); f.vScrollInstance.setPosition(0, true); f._addItems(false); f._renderItems(); for (var b = 0; b < f.items.length; b++) { f.selectedIndexes[b] = -1 } f.selectedIndex = -1; for (var c in f.selectedValues) { var h = f.selectedValues[c]; var j = f.getItemByValue(h); if (j) { if (j.visible) { f.selectedIndex = j.visibleIndex; f.selectedIndexes[j.visibleIndex] = j.visibleIndex } } } f._syncSelection() }, _getMatches: function (g, d) { if (g == undefined || g.length == 0) { return -1 } if (d == undefined) { d = 0 } var b = this.getItems(); var f = this; var c = -1; var e = 0; a.each(b, function (h) { var k = ""; if (!this.isGroup) { if (this.label) { k = this.label.toString() } else { if (this.value) { k = this.value.toString() } else { if (this.title) { k = this.title.toString() } else { k = "jqxItem" } } } var j = false; switch (f.searchMode) { case "containsignorecase": j = a.jqx.string.containsIgnoreCase(k, g); break; case "contains": j = a.jqx.string.contains(k, g); break; case "equals": j = a.jqx.string.equals(k, g); break; case "equalsignorecase": j = a.jqx.string.equalsIgnoreCase(k, g); break; case "startswith": j = a.jqx.string.startsWith(k, g); break; case "startswithignorecase": j = a.jqx.string.startsWithIgnoreCase(k, g); break; case "endswith": j = a.jqx.string.endsWith(k, g); break; case "endswithignorecase": j = a.jqx.string.endsWithIgnoreCase(k, g); break } if (j && this.visibleIndex >= d) { c = this.visibleIndex; return false } } }); return c }, findItems: function (e) { var b = this.getItems(); var d = this; var c = 0; var f = new Array(); a.each(b, function (g) { var j = ""; if (!this.isGroup) { if (this.label) { j = this.label } else { if (this.value) { j = this.value } else { if (this.title) { j = this.title } else { j = "jqxItem" } } } var h = false; switch (d.searchMode) { case "containsignorecase": h = a.jqx.string.containsIgnoreCase(j, e); break; case "contains": h = a.jqx.string.contains(j, e); break; case "equals": h = a.jqx.string.equals(j, e); break; case "equalsignorecase": h = a.jqx.string.equalsIgnoreCase(j, e); break; case "startswith": h = a.jqx.string.startsWith(j, e); break; case "startswithignorecase": h = a.jqx.string.startsWithIgnoreCase(j, e); break; case "endswith": h = a.jqx.string.endsWith(j, e); break; case "endswithignorecase": h = a.jqx.string.endsWithIgnoreCase(j, e); break } if (h) { f[c++] = this } } }); return f }, _syncSelection: function () { var d = this; if (d.filterable) { for (var b = 0; b < d.items.length; b++) { var c = d.items[b]; c.selected = false } for (var b = 0; b < d.visibleItems.length; b++) { var c = d.visibleItems[b]; if (d.selectedIndexes && d.selectedIndexes[b] == c.visibleIndex) { c.selected = true } } if (d.itemswrapper) { d._renderItems() } } }, _handleKeyDown: function (n) { var s = n.keyCode; var k = this; var g = k.selectedIndex; var d = k.selectedIndex; var l = false; if (!this.keyboardNavigation || !this.enableSelection) { return } if (this.filterInput && n.target == this.filterInput[0]) { return } var j = function () { if (k.multiple) { k.clearSelection(false) } }; if (n.altKey) { s = -1 } if (k.incrementalSearch) { var o = -1; if (!k._searchString) { k._searchString = "" } if ((s == 8 || s == 46) && k._searchString.length >= 1) { k._searchString = k._searchString.substr(0, k._searchString.length - 1) } var r = String.fromCharCode(s); var m = (!isNaN(parseInt(r))); var i = false; if ((s >= 65 && s <= 97) || m || s == 8 || s == 32 || s == 46) { if (!n.shiftKey) { r = r.toLocaleLowerCase() } var e = 1 + k.selectedIndex; if (s != 8 && s != 32 && s != 46) { if (k._searchString.length > 0 && k._searchString.substr(0, 1) == r) { e = 1 + k.selectedIndex } else { k._searchString += r } } if (s == 32) { k._searchString += " " } var b = this._getMatches(k._searchString, e); o = b; if (o == k._lastMatchIndex || o == -1) { var b = this._getMatches(k._searchString, 0); o = b } k._lastMatchIndex = o; if (o >= 0) { var h = function () { j(); k.selectIndex(o, false, false, false, "keyboard", n); var t = k.isIndexInView(o); if (!t) { k.ensureVisible(o) } else { k._renderItems() } }; if (k._toSelectTimer) { clearTimeout(k._toSelectTimer) } k._toSelectTimer = setTimeout(function () { h() }, k.incrementalSearchKeyDownDelay) } i = true } if (k._searchTimer != undefined) { clearTimeout(k._searchTimer) } if (s == 27 || s == 13) { k._searchString = "" } k._searchTimer = setTimeout(function () { k._searchString = ""; k._renderItems() }, k.incrementalSearchDelay); if (o >= 0) { return } if (i) { return false } } if (this.checkboxes) { return true } if (s == 33) { var p = k._itemsInPage(); if (k.selectedIndex - p >= 0) { j(); k.selectIndex(d - p, false, false, false, "keyboard", n) } else { j(); k.selectIndex(k._firstItemIndex(), false, false, false, "keyboard", n) } k._searchString = "" } if (s == 32 && this.checkboxes) { var f = this.getItem(g); if (f != null) { k._updateItemCheck(f, g); n.preventDefault() } k._searchString = "" } if (s == 36) { j(); k.selectIndex(k._firstItemIndex(), false, false, false, "keyboard", n); k._searchString = "" } if (s == 35) { j(); k.selectIndex(k._lastItemIndex(), false, false, false, "keyboard", n); k._searchString = "" } if (s == 34) { var p = k._itemsInPage(); if (k.selectedIndex + p < k.visibleItems.length) { j(); k.selectIndex(d + p, false, false, false, "keyboard", n) } else { j(); k.selectIndex(k._lastItemIndex(), false, false, false, "keyboard", n) } k._searchString = "" } if (s == 38) { k._searchString = ""; if (k.selectedIndex > 0) { var c = k._prevItemIndex(k.selectedIndex); if (c != k.selectedIndex && c != -1) { j(); k.selectIndex(c, false, false, false, "keyboard", n) } else { return true } } else { return false } } else { if (s == 40) { k._searchString = ""; if (k.selectedIndex + 1 < k.visibleItems.length) { var c = k._nextItemIndex(k.selectedIndex); if (c != k.selectedIndex && c != -1) { j(); k.selectIndex(c, false, false, false, "keyboard", n) } else { return true } } else { return false } } } if (s == 35 || s == 36 || s == 38 || s == 40 || s == 34 || s == 33) { var q = k.isIndexInView(k.selectedIndex); if (!q) { k.ensureVisible(k.selectedIndex) } else { k._renderItems() } return false } return true }, _updateItemCheck: function (b, c) { if (this.disabled) { return } if (b.checked == true) { b.checked = (b.hasThreeStates && this.hasThreeStates) ? null : false } else { b.checked = b.checked != null } switch (b.checked) { case true: this.checkIndex(c); break; case false: this.uncheckIndex(c); break; default: this.indeterminateIndex(c); break } }, wheel: function (d, c) { if (c.autoHeight || !c.enableMouseWheel) { d.returnValue = true; return true } if (c.disabled) { return true } var e = 0; if (!d) { d = window.event } if (d.originalEvent && d.originalEvent.wheelDelta) { d.wheelDelta = d.originalEvent.wheelDelta } if (d.wheelDelta) { e = d.wheelDelta / 120 } else { if (d.detail) { e = -d.detail / 3 } } if (e) { var b = c._handleDelta(e); if (b) { if (d.preventDefault) { d.preventDefault() } if (d.originalEvent != null) { d.originalEvent.mouseHandled = true } if (d.stopPropagation != undefined) { d.stopPropagation() } } if (b) { b = false; d.returnValue = b; return b } else { return false } } if (d.preventDefault) { d.preventDefault() } d.returnValue = false }, _handleDelta: function (d) { var c = this.vScrollInstance.value; if (d < 0) { this.scrollDown() } else { this.scrollUp() } var b = this.vScrollInstance.value; if (c != b) { return true } return false }, focus: function () { try { this.focused = true; this.host.focus(); var c = this; setTimeout(function () { c.host.focus() }, 10) } catch (b) { } }, _removeHandlers: function () { var b = this; this.removeHandler(a(document), "keydown.listbox" + this.element.id); this.removeHandler(a(document), "keyup.listbox" + this.element.id); this.removeHandler(this.vScrollBar, "valueChanged"); this.removeHandler(this.hScrollBar, "valueChanged"); if (this._mousewheelfunc) { this.removeHandler(this.host, "mousewheel", this._mousewheelfunc) } else { this.removeHandler(this.host, "mousewheel") } this.removeHandler(this.host, "keydown"); this.removeHandler(this.content, "mouseleave"); this.removeHandler(this.content, "focus"); this.removeHandler(this.content, "blur"); this.removeHandler(this.host, "focus"); this.removeHandler(this.host, "blur"); this.removeHandler(this.content, "mouseenter"); this.removeHandler(this.content, "mouseup"); this.removeHandler(this.content, "mousedown"); this.removeHandler(this.content, "touchend"); if (this._mousemovefunc) { this.removeHandler(this.content, "mousemove", this._mousemovefunc) } else { this.removeHandler(this.content, "mousemove") } this.removeHandler(this.content, "selectstart"); if (this.overlayContent) { this.removeHandler(this.overlayContent, a.jqx.mobile.getTouchEventName("touchend")) } }, _updateSize: function () { if (!this.virtualSize) { this._oldheight = null; this.virtualSize = this._calculateVirtualSize() } var b = this; b._arrange(); if (b.host.height() != b._oldheight || b.host.width() != b._oldwidth) { var c = b.host.width() != b._oldwidth; if (b.autoItemsHeight) { b._render(false) } else { if (b.items) { if (b.items.length > 0 && b.virtualItemsCount * b.items[0].height < b._oldheight - 2) { b._render(false) } else { var d = b.vScrollInstance.value; b._updatescrollbars(); b._renderItems(); if (d < b.vScrollInstance.max) { b.vScrollInstance.setPosition(d) } else { b.vScrollInstance.setPosition(b.vScrollInstance.max) } } } } b._oldwidth = b.host.width(); b._oldheight = b.host.height() } }, _addHandlers: function () { var l = this; this.focused = false; var m = false; var j = 0; var g = null; var j = 0; var b = 0; var h = new Date(); var e = this.isTouchDevice(); this.addHandler(this.vScrollBar, "valueChanged", function (n) { if (a.jqx.browser.msie && a.jqx.browser.version > 9) { setTimeout(function () { l._renderItems() }, 1) } else { l._renderItems() } }); this.addHandler(this.hScrollBar, "valueChanged", function () { l._renderItems() }); if (this._mousewheelfunc) { this.removeHandler(this.host, "mousewheel", this._mousewheelfunc) } this._mousewheelfunc = function (n) { l.wheel(n, l) }; this.addHandler(this.host, "mousewheel", this._mousewheelfunc); this.addHandler(a(document), "keydown.listbox" + this.element.id, function (n) { l._ctrlKey = n.ctrlKey; l._shiftKey = n.shiftKey }); this.addHandler(a(document), "keyup.listbox" + this.element.id, function (n) { l._ctrlKey = n.ctrlKey; l._shiftKey = n.shiftKey }); this.addHandler(this.host, "keydown", function (n) { return l._handleKeyDown(n) }); this.addHandler(this.content, "mouseleave", function (n) { l.focused = false; var o = a.data(l.element, "hoveredItem"); if (o != null) { a(o).removeClass(l.toThemeProperty("jqx-listitem-state-hover")); a(o).removeClass(l.toThemeProperty("jqx-fill-state-hover")); a.data(l.element, "hoveredItem", null) } }); this.addHandler(this.content, "focus", function (n) { if (!l.disabled) { l.host.addClass(l.toThemeProperty("jqx-fill-state-focus")); l.focused = true } }); this.addHandler(this.content, "blur", function (n) { l.focused = false; l.host.removeClass(l.toThemeProperty("jqx-fill-state-focus")) }); this.addHandler(this.host, "focus", function (n) { if (!l.disabled) { l.host.addClass(l.toThemeProperty("jqx-fill-state-focus")); l.focused = true } }); this.addHandler(this.host, "blur", function (n) { if (a.jqx.browser.msie && a.jqx.browser.version < 9 && l.focused) { return } l.host.removeClass(l.toThemeProperty("jqx-fill-state-focus")); l.focused = false }); this.addHandler(this.content, "mouseenter", function (n) { l.focused = true }); var c = a.jqx.utilities.hasTransform(this.host); if (this.enableSelection) { var f = l.isTouchDevice() && this.touchMode !== true; var i = !f ? "mousedown" : "touchend"; var k = !f ? "mouseup" : "touchend"; if (this.overlayContent) { this.addHandler(this.overlayContent, a.jqx.mobile.getTouchEventName("touchend"), function (p) { if (!l.enableSelection) { return true } if (f) { l._newScroll = new Date(); if (l._newScroll - l._lastScroll < 500) { return true } } var s = a.jqx.mobile.getTouches(p); var t = s[0]; if (t != undefined) { var n = l.host.offset(); var r = parseInt(t.pageX); var q = parseInt(t.pageY); if (l.touchMode == true) { if (t._pageX != undefined) { r = parseInt(t._pageX); q = parseInt(t._pageY) } } r = r - n.left; q = q - n.top; var o = l._hitTest(r, q); if (o != null && !o.isGroup) { l._newScroll = new Date(); if (l._newScroll - l._lastScroll < 500) { return false } if (l.checkboxes) { l._updateItemCheck(o, o.visibleIndex); return } if (o.html.indexOf("href") != -1) { setTimeout(function () { l.selectIndex(o.visibleIndex, false, true, false, "mouse", p); l.content.trigger("click"); return false }, 100) } else { l.selectIndex(o.visibleIndex, false, true, false, "mouse", p); if (p.preventDefault) { p.preventDefault() } l.content.trigger("click"); return false } } } }) } else { var d = false; this.addHandler(this.content, i, function (n) { if (!l.enableSelection) { return true } d = true; if (f) { l._newScroll = new Date(); if (l._newScroll - l._lastScroll < 500) { return false } } l.focused = true; if (!l.isTouchDevice() && l.focusable) { l.host.focus() } if (n.target.id != ("listBoxContent" + l.element.id) && l.itemswrapper[0] != n.target) { var r = n.target; var z = a(r).offset(); var q = l.host.offset(); if (c) { var o = a.jqx.mobile.getLeftPos(r); var t = a.jqx.mobile.getTopPos(r); z.left = o; z.top = t; o = a.jqx.mobile.getLeftPos(l.element); t = a.jqx.mobile.getTopPos(l.element); q.left = o; q.top = t } var s = parseInt(z.top) - parseInt(q.top); var v = parseInt(z.left) - parseInt(q.left); var w = l._hitTest(v, s); if (w != null && !w.isGroup) { var p = function (y, x) { if (!l._shiftKey) { l._clickedIndex = y.visibleIndex } if (!l.checkboxes) { l.selectIndex(y.visibleIndex, false, true, false, "mouse", x) } else { l.selectedIndex = y.visibleIndex; v = 20 + x.pageX - z.left; if (l.rtl) { var A = l.hScrollBar.css("visibility") != "hidden" ? l.hScrollInstance.max : l.host.width(); if (v <= l.host.width() - 20) { if (!l.allowDrag) { l._updateItemCheck(y, y.visibleIndex) } else { setTimeout(function () { if (!l._dragItem) { if (!d) { l._updateItemCheck(y, y.visibleIndex) } } }, 200) } } } else { if (v + l.hScrollInstance.value >= 20) { if (!l.allowDrag) { l._updateItemCheck(y, y.visibleIndex) } else { setTimeout(function () { if (!l._dragItem) { if (!d) { l._updateItemCheck(y, y.visibleIndex) } } }, 200) } } } } }; if (!w.disabled) { if (w.html.indexOf("href") != -1) { setTimeout(function () { p(w, n) }, 100) } else { p(w, n) } } } if (i == "mousedown") { var u = false; if (n.which) { u = (n.which == 3) } else { if (n.button) { u = (n.button == 2) } } if (u) { return true } return false } } return true }) } this.addHandler(this.content, "mouseup", function (n) { l.vScrollInstance.handlemouseup(l, n); d = false }); if (a.jqx.browser.msie) { this.addHandler(this.content, "selectstart", function (n) { return false }) } } var e = this.isTouchDevice(); if (this.enableHover && !e) { this._mousemovefunc = function (n) { if (e) { return true } if (!l.enableHover) { return true } var p = a.jqx.browser.msie == true && a.jqx.browser.version < 9 ? 0 : 1; if (n.target == null) { return true } if (l.disabled) { return true } l.focused = true; var r = l.vScrollInstance.isScrolling(); if (!r && n.target.id != ("listBoxContent" + l.element.id)) { if (l.itemswrapper[0] != n.target) { var t = n.target; var B = a(t).offset(); var s = l.host.offset(); if (c) { var o = a.jqx.mobile.getLeftPos(t); var v = a.jqx.mobile.getTopPos(t); B.left = o; B.top = v; o = a.jqx.mobile.getLeftPos(l.element); v = a.jqx.mobile.getTopPos(l.element); s.left = o; s.top = v } var u = parseInt(B.top) - parseInt(s.top); var w = parseInt(B.left) - parseInt(s.left); var A = l._hitTest(w, u); if (A != null && !A.isGroup && !A.disabled) { var q = a.data(l.element, "hoveredItem"); if (q != null) { a(q).removeClass(l.toThemeProperty("jqx-listitem-state-hover")); a(q).removeClass(l.toThemeProperty("jqx-fill-state-hover")) } a.data(l.element, "hoveredItem", A.element); var z = a(A.element); z.addClass(l.toThemeProperty("jqx-listitem-state-hover")); z.addClass(l.toThemeProperty("jqx-fill-state-hover")) } } } }; this.addHandler(this.content, "mousemove", this._mousemovefunc) } }, _arrange: function (u) { if (u == undefined) { u = true } var t = this; var p = null; var n = null; var g = t.filterable ? t.filterHeight : 0; var j = function (h) { h = t.host.height(); if (h == 0) { h = 200; t.host.height(h) } return h }; if (t.width != null && t.width.toString().indexOf("px") != -1) { p = t.width } else { if (t.width != undefined && !isNaN(t.width)) { p = t.width } } if (t.height != null && t.height.toString().indexOf("px") != -1) { n = t.height } else { if (t.height != undefined && !isNaN(t.height)) { n = t.height } } if (t.width != null && t.width.toString().indexOf("%") != -1) { t.host.css("width", t.width); p = t.host.width() } if (t.height != null && t.height.toString().indexOf("%") != -1) { t.host.css("height", t.height); n = j(n) } if (p != null) { p = parseInt(p); if (parseInt(t.element.style.width) != parseInt(t.width)) { t.host.width(t.width) } } if (!t.autoHeight) { if (n != null) { n = parseInt(n); if (parseInt(t.element.style.height) != parseInt(t.height)) { t.host.height(t.height); j(n) } } } else { if (t.virtualSize) { if (t.hScrollBar.css("visibility") != "hidden") { t.host.height(t.virtualSize.height + parseInt(t.scrollBarSize) + 3); t.height = t.virtualSize.height + parseInt(t.scrollBarSize) + 3; n = t.height } else { t.host.height(t.virtualSize.height); t.height = t.virtualSize.height; n = t.virtualSize.height } } } var c = t.scrollBarSize; if (isNaN(c)) { c = parseInt(c); if (isNaN(c)) { c = "17px" } else { c = c + "px" } } c = parseInt(c); var m = 4; var e = 2; var f = 0; if (t.vScrollBar) { if (t.vScrollBar[0].style.visibility != "hidden") { f = c + m } else { t.vScrollInstance.setPosition(0) } } else { return } if (t.hScrollBar) { if (t.hScrollBar[0].style.visibility != "hidden") { e = c + m } else { t.hScrollInstance.setPosition(0) } } else { return } if (t.autoItemsHeight) { t.hScrollBar[0].style.visibility = "hidden"; e = 0 } if (n == null) { n = 0 } var q = parseInt(n) - m - c; if (q < 0) { q = 0 } if (parseInt(t.hScrollBar[0].style.height) != c) { if (parseInt(c) < 0) { c = 0 } t.hScrollBar[0].style.height = parseInt(c) + "px" } if (t.hScrollBar[0].style.top != q + "px") { t.hScrollBar[0].style.top = q + "px"; t.hScrollBar[0].style.left = "0px" } var b = p - c - m; if (b < 0) { b = 0 } var l = b + "px"; if (t.hScrollBar[0].style.width != l) { t.hScrollBar[0].style.width = l } if (f == 0) { if (p >= 2) { t.hScrollBar[0].style.width = parseInt(p - 2) + "px" } } if (c != parseInt(t.vScrollBar[0].style.width)) { t.vScrollBar[0].style.width = parseInt(c) + "px" } if ((parseInt(n) - e) != parseInt(t.vScrollBar[0].style.height)) { var s = parseInt(n) - e; if (s < 0) { s = 0 } t.vScrollBar[0].style.height = s + "px" } if (p == null) { p = 0 } var d = parseInt(p) - parseInt(c) - m + "px"; if (d != t.vScrollBar[0].style.left) { if (parseInt(d) >= 0) { t.vScrollBar[0].style.left = d } t.vScrollBar[0].style.top = "0px" } var k = t.vScrollInstance; k.disabled = t.disabled; if (u) { k._arrange() } var o = t.hScrollInstance; o.disabled = t.disabled; if (u) { o._arrange() } if ((t.vScrollBar[0].style.visibility != "hidden") && (t.hScrollBar[0].style.visibility != "hidden")) { t.bottomRight[0].style.visibility = "inherit"; t.bottomRight[0].style.left = 1 + parseInt(t.vScrollBar[0].style.left) + "px"; t.bottomRight[0].style.top = 1 + parseInt(t.hScrollBar[0].style.top) + "px"; if (t.rtl) { t.bottomRight.css({ left: 0 }) } t.bottomRight[0].style.width = parseInt(c) + 3 + "px"; t.bottomRight[0].style.height = parseInt(c) + 3 + "px" } else { t.bottomRight[0].style.visibility = "hidden" } if (parseInt(t.content[0].style.width) != (parseInt(p) - f)) { var i = parseInt(p) - f; if (i < 0) { i = 0 } t.content[0].style.width = i + "px" } if (t.rtl) { t.vScrollBar.css({ left: 0 + "px", top: "0px" }); t.hScrollBar.css({ left: t.vScrollBar.width() + 2 + "px" }); if (t.vScrollBar[0].style.visibility != "hidden") { t.content.css("margin-left", 4 + t.vScrollBar.width()) } else { t.content.css("margin-left", 0); t.hScrollBar.css({ left: "0px" }) } } if (parseInt(t.content[0].style.height) != (parseInt(n) - e)) { var r = parseInt(n) - e; if (r < 0) { r = 0 } t.content[0].style.height = r + "px"; t.content[0].style.top = "0px" } if (g > 0) { t.content[0].style.top = g + "px"; t.content[0].style.height = parseInt(t.content[0].style.height) - g + "px" } if (t.filterable) { t.filterInput[0].style.height = (g - 6) + "px"; t.filterInput[0].style.top = "3px"; t.filterInput[0].style.left = parseInt(t.content.css("left")) + 3 + "px"; t.filterInput[0].style.width = parseInt(t.content.css("width")) - 7 + "px"; t.filter[0].style.display = "block" } else { t.filter[0].style.display = "none" } if (t.overlayContent) { t.overlayContent.width(parseInt(p) - f); t.overlayContent.height(parseInt(n) - e) } }, ensureVisible: function (e) { if (isNaN(e)) { var f = this.getItemByValue(e); if (f) { e = f.index } } var c = this.isIndexInView(e); if (!c) { if (e < 0) { return } if (this.autoHeight) { var b = a.data(this.vScrollBar[0], "jqxScrollBar").instance; b.setPosition(0) } else { for (indx = 0; indx < this.visibleItems.length; indx++) { var f = this.visibleItems[indx]; if (f.visibleIndex == e && !f.isGroup) { var b = a.data(this.vScrollBar[0], "jqxScrollBar").instance; var g = b.value; if (this.filterable) { g -= (this.filterHeight + 2) } var d = this.hScrollBar.css("visibility") === "hidden"; var h = d ? 0 : this.scrollBarSize + 4; if (f.initialTop < g) { b.setPosition(f.initialTop) } else { if (f.initialTop + f.height > g + this.host.height()) { if (this.filterable) { b.setPosition(this.filterHeight + 2 + f.initialTop + f.height + 2 - this.host.height() + h) } else { b.setPosition(f.initialTop + f.height + 2 - this.host.height() + h) } } } break } } } } this._renderItems() }, scrollTo: function (c, b) { if (this.vScrollBar.css("visibility") != "hidden") { this.vScrollInstance.setPosition(b) } if (this.hScrollBar.css("visibility") != "hidden") { this.hScrollInstance.setPosition(c) } }, scrollDown: function () { if (this.vScrollBar.css("visibility") == "hidden") { return false } var b = this.vScrollInstance; if (b.value + b.largestep <= b.max) { b.setPosition(b.value + b.largestep); return true } else { b.setPosition(b.max); return true } return false }, scrollUp: function () { if (this.vScrollBar.css("visibility") == "hidden") { return false } var b = this.vScrollInstance; if (b.value - b.largestep >= b.min) { b.setPosition(b.value - b.largestep); return true } else { if (b.value != b.min) { b.setPosition(b.min); return true } } return false }, databind: function (b, d) { this.records = new Array(); var f = b._source ? true : false; var c = new a.jqx.dataAdapter(b, { autoBind: false }); if (f) { c = b; b = b._source } var e = function (k) { if (b.type != undefined) { c._options.type = b.type } if (b.formatdata != undefined) { c._options.formatData = b.formatdata } if (b.contenttype != undefined) { c._options.contentType = b.contenttype } if (b.async != undefined) { c._options.async = b.async } }; var h = function (p, q) { var s = function (t) { if (typeof t === "string") { var v = t; var w = t } else { if (p.displayMember != undefined && p.displayMember != "") { var w = t[p.valueMember]; var v = t[p.displayMember] } } if (!p.valueMember && !p.displayMember) { v = w = t } if (t && t.label != undefined) { var v = t.label; var w = t.value } var u = new a.jqx._jqxListBox.item(); u.label = v; u.value = w; u.html = ""; u.visible = true; u.originalItem = t; u.group = ""; u.groupHtml = ""; u.disabled = false; u.hasThreeStates = true; return u }; if (q != undefined) { var k = c._changedrecords[0]; if (k) { a.each(c._changedrecords, function () { var t = this.index; var u = this.record; if (q != "remove") { var v = s(u) } switch (q) { case "update": p.updateAt(v, t); break; case "add": p.insertAt(v, t); break; case "remove": p.removeAt(t); break } }); return } } p.records = c.records; var m = p.records.length; p.items = new Array(); p.itemsByValue = new Array(); for (var l = 0; l < m; l++) { var n = p.records[l]; var o = s(n); o.index = l; p.items[l] = o; var r = o.value; if (o.value == "" || o.value == null) { r = l } p.itemsByValue[a.trim(r).split(" ").join("")] = o } p._render(); p._raiseEvent("6") }; e(this); var i = this; switch (b.datatype) { case "local": case "array": default: if (b.localdata != null) { c.unbindBindingUpdate(this.element.id); if (this.autoBind || (!this.autoBind && !d)) { c.dataBind() } h(this); c.bindBindingUpdate(this.element.id, function (k) { h(i, k) }) } break; case "json": case "jsonp": case "xml": case "xhtml": case "script": case "text": case "csv": case "tab": if (b.localdata != null) { c.unbindBindingUpdate(this.element.id); if (this.autoBind || (!this.autoBind && !d)) { c.dataBind() } h(this); c.bindBindingUpdate(this.element.id, function () { h(i) }); return } var j = {}; if (c._options.data) { a.extend(c._options.data, j) } else { if (b.data) { a.extend(j, b.data) } c._options.data = j } var g = function () { h(i) }; c.unbindDownloadComplete(i.element.id); c.bindDownloadComplete(i.element.id, g); if (this.autoBind || (!this.autoBind && !d)) { c.dataBind() } } }, loadItems: function (m) { if (m == null) { this.groups = new Array(); this.items = new Array(); this.visualItems = new Array(); return } var s = this; var k = 0; var d = 0; var b = 0; this.groups = new Array(); this.items = new Array(); this.visualItems = new Array(); var e = new Array(); this.itemsByValue = new Array(); a.map(m, function (v) { if (v == undefined) { return null } var j = new a.jqx._jqxListBox.item(); var w = v.group; var i = v.groupHtml; var x = v.title; if (x == null || x == undefined) { x = "" } if (w == null || w == undefined) { w = "" } if (i == null || i == undefined) { i = "" } if (!s.groups[w]) { s.groups[w] = { items: new Array(), index: -1, caption: w, captionHtml: i }; k++; var t = k + "jqxGroup"; s.groups[t] = s.groups[w]; d++; s.groups.length = d } var u = s.groups[w]; u.index++; u.items[u.index] = j; if (typeof v === "string") { j.label = v; j.value = v } else { if (v.label == null && v.value == null && v.html == null && v.group == null && v.groupHtml == null) { j.label = v.toString(); j.value = v.toString() } else { j.label = v.label || v.value; j.value = v.value || v.label } } if (typeof v != "string") { if (s.displayMember != "") { if (v[s.displayMember] != undefined) { j.label = v[s.displayMember] } else { j.label = "" } } if (s.valueMember != "") { j.value = v[s.valueMember] } } j.hasThreeStates = v.hasThreeStates != undefined ? v.hasThreeStates : true; j.originalItem = v; j.title = x; j.html = v.html || ""; if (v.html && v.html != "") { if (x && x != "") { } } j.group = w; j.checked = v.checked || false; j.groupHtml = v.groupHtml || ""; j.disabled = v.disabled || false; j.visible = v.visible != undefined ? v.visible : true; j.index = b; e[b] = j; b++; return j }); var c = new Array(); var o = 0; if (this.fromSelect == undefined || this.fromSelect == false) { for (var h = 0; h < d; h++) { var k = h + 1; var n = k + "jqxGroup"; var q = this.groups[n]; if (q == undefined || q == null) { break } if (h == 0 && q.caption == "" && q.captionHtml == "" && d <= 1) { for (var g = 0; g < q.items.length; g++) { var p = q.items[g].value; if (q.items[g].value == undefined || q.items[g].value == null) { p = g } this.itemsByValue[a.trim(p).split(" ").join("")] = q.items[g] } return q.items } else { var l = new a.jqx._jqxListBox.item(); l.isGroup = true; l.label = q.caption; if (q.caption == "" && q.captionHtml == "") { q.caption = this.emptyGroupText; l.label = q.caption } l.html = q.captionHtml; c[o] = l; o++ } for (var f = 0; f < q.items.length; f++) { c[o] = q.items[f]; var p = q.items[f].value; if (q.items[f].value == "" || q.items[f].value == null) { p = o } s.itemsByValue[a.trim(p).split(" ").join("")] = q.items[f]; o++ } } } else { var o = 0; var r = new Array(); a.each(e, function () { if (!r[this.group]) { if (this.group != "") { var i = new a.jqx._jqxListBox.item(); i.isGroup = true; i.label = this.group; c[o] = i; o++; r[this.group] = true } } c[o] = this; var j = this.value; if (this.value == "" || this.value == null) { j = o - 1 } s.itemsByValue[a.trim(j).split(" ").join("")] = this; o++ }) } return c }, _mapItem: function (c) { var b = new a.jqx._jqxListBox.item(); if (this.displayMember) { if (c.label == undefined) { c.label = c[this.displayMember] } if (c.value == undefined) { c.value = c[this.valueMember] } } if (typeof c === "string") { b.label = c; b.value = c } else { if (typeof c === "number") { b.label = c.toString(); b.value = c.toString() } else { b.label = c.label || c.value; b.value = c.value || c.label } } if (b.label == undefined && b.value == undefined && b.html == undefined) { b.label = b.value = c } b.html = c.html || ""; b.group = c.group || ""; b.checked = c.checked || false; b.title = c.title || ""; b.groupHtml = c.groupHtml || ""; b.disabled = c.disabled || false; b.visible = c.visible || true; return b }, addItem: function (b) { return this.insertAt(b, this.items ? this.items.length : 0) }, _getItemByParam: function (c) { if (c != null) { if (c.index == undefined) { var b = this.getItemByValue(c); if (b) { c = b } } } return c }, insertItem: function (d, b) { var c = this._getItemByParam(d); return this.insertAt(c, b) }, updateItem: function (c, d) { var b = this._getItemByParam(d); if (b && b.index != undefined) { return this.updateAt(c, b.index) } return false }, updateAt: function (d, c) { if (d != null) { var b = this._mapItem(d); this.itemsByValue[a.trim(b.value).split(" ").join("")] = this.items[c]; this.items[c].value = b.value; this.items[c].label = b.label; this.items[c].html = b.html; this.items[c].disabled = b.disabled } this._cachedItemHtml = []; this._renderItems(); if (this.rendered) { this.rendered() } }, insertAt: function (l, f) { if (l == null) { return false } this._cachedItemHtml = []; if (this.items == undefined || this.items.length == 0) { this.source = new Array(); this.refresh(); var g = this._mapItem(l); g.index = 0; this.items[this.items.length] = g; this._addItems(true); this._renderItems(); if (this.rendered) { this.rendered() } if (this.allowDrag && this._enableDragDrop) { this._enableDragDrop() } var k = g.value; if (g.value == "" || g.value == null) { k = f } this.itemsByValue[a.trim(k).split(" ").join("")] = g; return false } var g = this._mapItem(l); if (f == -1 || f == undefined || f == null || f >= this.items.length) { g.index = this.items.length; this.items[this.items.length] = g } else { var c = new Array(); var j = 0; var e = false; var h = 0; for (var b = 0; b < this.items.length; b++) { if (this.items[b].isGroup == false) { if (h >= f && !e) { c[j++] = g; g.index = f; h++; e = true } } c[j] = this.items[b]; if (!this.items[b].isGroup) { c[j].index = h; h++ } j++ } this.items = c } var k = g.value; if (g.value == "" || g.value == null) { k = f } this.itemsByValue[a.trim(k).split(" ").join("")] = g; this.visibleItems = new Array(); this.renderedVisibleItems = new Array(); var d = a.data(this.vScrollBar[0], "jqxScrollBar").instance; var i = d.value; d.setPosition(0); if ((this.allowDrag && this._enableDragDrop) || (this.virtualSize && this.virtualSize.height < 10 + this.host.height())) { this._addItems(true) } else { this._addItems(false) } this._renderItems(); if (this.allowDrag && this._enableDragDrop) { this._enableDragDrop() } d.setPosition(i); if (this.rendered) { this.rendered() } return true }, removeAt: function (h) { if (h < 0 || h > this.items.length - 1) { return false } if (h == undefined) { return false } var d = this.items[h].height; var m = this.items[h].value; if (m == "" || m == null) { m = h } this.itemsByValue[a.trim(m).split(" ").join("")] = null; this.items.splice(h, 1); var c = new Array(); var l = 0; var f = false; var j = 0; for (var b = 0; b < this.items.length; b++) { c[l] = this.items[b]; if (!this.items[b].isGroup) { c[l].index = j; j++ } l++ } this.items = c; var e = a.data(this.vScrollBar[0], "jqxScrollBar").instance; var e = a.data(this.vScrollBar[0], "jqxScrollBar").instance; var k = e.value; e.setPosition(0); this.visibleItems = new Array(); this.renderedVisibleItems = new Array(); if (this.items.length > 0) { if (this.virtualSize) { this.virtualSize.height -= d; var n = this.virtualSize.itemsPerPage * 2; if (this.autoHeight) { n = this.items.length } this.virtualItemsCount = Math.min(n, this.items.length) } this._updatescrollbars() } else { this._addItems() } this._renderItems(); if (this.allowDrag && this._enableDragDrop) { this._enableDragDrop() } if (this.vScrollBar.css("visibility") != "hidden") { e.setPosition(k) } else { e.setPosition(0) } this.itemsByValue = new Array(); for (var g = 0; g < this.items.length; g++) { var m = this.items[g].value; if (this.items[g].value == "" || this.items[g].value == null) { m = g } this.itemsByValue[a.trim(m).split(" ").join("")] = this.items[g] } if (this.rendered) { this.rendered() } return true }, removeItem: function (e, f) { var d = this._getItemByParam(e); var b = -1; if (d && d.index != undefined && f !== true) { for (var c = 0; c < this.items.length; c++) { if (this.items[c].label == d.label && this.items[c].value == d.value) { b = c; break } } if (b != -1) { return this.removeAt(b) } } if (b == -1) { return this.removeAt(d.index) } }, getItems: function () { return this.items }, disableItem: function (c) { var b = this._getItemByParam(c); this.disableAt(b.index) }, enableItem: function (c) { var b = this._getItemByParam(c); this.enableAt(b.index) }, disableAt: function (b) { if (!this.items) { return false } if (b < 0 || b > this.items.length - 1) { return false } this.items[b].disabled = true; this._renderItems(); return true }, enableAt: function (b) { if (!this.items) { return false } if (b < 0 || b > this.items.length - 1) { return false } this.items[b].disabled = false; this._renderItems(); return true }, destroy: function () { if (this.source && this.source.unbindBindingUpdate) { this.source.unbindBindingUpdate(this.element.id) } this._removeHandlers(); this.vScrollBar.jqxScrollBar("destroy"); this.hScrollBar.jqxScrollBar("destroy"); this.vScrollBar.remove(); this.hScrollBar.remove(); this.content.remove(); a.jqx.utilities.resize(this.host, null, true); var b = a.data(this.element, "jqxListBox"); delete this.hScrollInstance; delete this.vScrollInstance; delete this.vScrollBar; delete this.hScrollBar; delete this.content; delete this.bottomRight; delete this.itemswrapper; delete this.visualItems; delete this.visibleItems; delete this.items; delete this.groups; delete this.renderedVisibleItems; delete this._mousewheelfunc; delete this._mousemovefunc; delete this._cachedItemHtml; delete this.itemsByValue; delete this._activeElement; delete this.source; delete this.events; if (this.input) { this.input.remove(); delete this.input } if (b) { delete b.instance } this.host.removeData(); this.host.removeClass(); this.host.remove(); this.element = null; delete this.element; this.host = null; delete this.set; delete this.get; delete this.call; delete this.host }, _raiseEvent: function (f, c) { if (this._stopEvents == true) { return true } if (c == undefined) { c = { owner: null } } var d = this.events[f]; args = c; args.owner = this; this._updateInputSelection(); var e = new a.Event(d); e.owner = this; e.args = args; if (this.host != null) { var b = this.host.trigger(e) } return b } }) })(jqxBaseFramework); (function (a) { a.jqx.parseSourceTag = function (m) { var l = new Array(); var o = a(m).find("option"); var b = a(m).find("optgroup"); var k = false; if (o.length === 0) { o = a(m).find("li"); if (o.length > 0) { k = true } } var d = null; var j = 0; var d = -1; var h = this; var c = new Array(); a.each(o, function (p) { var q = b.find(this).length > 0; var s = null; if (this.text != null && (this.label == null || this.label == "")) { this.label = this.text } if (k === true) { this.label = a(this).text(); this.selected = a(this).attr("data-selected"); this.checked = this.selected; this.value = a(this).attr("data-value") || p; this.disabled = a(this).attr("disabled") } var r = { style: this.style.cssText, selected: this.selected, html: this.innerHTML, classes: this.className, disabled: this.disabled, value: this.value, label: this.label, title: this.title, originalItem: this }; var i = a.jqx.browser.msie && a.jqx.browser.version < 8; if (i && !k) { if (r.value == "" && this.text != null && this.text.length > 0) { r.value = this.text } } if (q) { s = b.find(this).parent()[0].label; r.group = s; if (!c[s]) { c[s] = new Array(); c.length++ } c[s].push(r) } if (this.selected) { d = p } r.checked = this.selected; if (r.label !== undefined) { l.push(r) } }); if (c.length > 0) { var n = new Array(); for (var f in c) { if (f === "indexOf") { continue } var g = null; for (var e = 0; e < b.length; e++) { if (f === b[e].label || b[e].text) { g = b[e]; break } } a.each(c[f], function (i, p) { if (this.label !== undefined) { n.push(this) } }) } } if (n && n.length > 0) { return { items: n, index: d } } else { return { items: l, index: d } } }; a.jqx._jqxListBox.item = function () { var b = { group: "", groupHtml: "", selected: false, isGroup: false, highlighted: false, value: null, label: "", html: null, visible: true, disabled: false, element: null, width: null, height: null, initialTop: null, top: null, left: null, title: "", index: -1, checkBoxElement: null, originalItem: null, checked: false, visibleIndex: -1 }; return b } })(jqxBaseFramework);
(function (b) { b.jqx.jqxWidget("jqxGrid", "", {}); b.extend(b.jqx._jqxGrid.prototype, { defineInstance: function () { var d = { disabled: false, width: 600, height: 400, pagerheight: 25, groupsheaderheight: 34, pagesize: 10, pagesizeoptions: ["5", "10", "15", "20", "25", "50", "100"], rowsheight: 19, columnsheight: 22, filterrowheight: 31, groupindentwidth: 30, rowdetails: false, enablerowdetailsindent: true, enablemousewheel: true, initrowdetails: null, layoutrowdetails: null, editable: false, editmode: "selectedcell", pageable: false, pagermode: "default", pagerbuttonscount: 5, groupable: false, sortable: false, filterable: false, filtermode: "default", autoshowfiltericon: true, showfiltercolumnbackground: true, showpinnedcolumnbackground: true, showsortcolumnbackground: true, altrows: false, altstart: 1, altstep: 1, showrowdetailscolumn: true, showtoolbar: false, toolbarheight: 34, showstatusbar: false, statusbarheight: 34, enableellipsis: true, groups: [], groupsrenderer: null, groupcolumnrenderer: null, groupsexpandedbydefault: false, pagerrenderer: null, touchmode: "auto", columns: [], selectedrowindex: -1, selectedrowindexes: new Array(), selectedcells: new Array(), autobind: true, selectedcell: null, tableZIndex: 799, headerZIndex: 199, updatefilterconditions: null, showaggregates: false, showfilterrow: false, autorowheight: false, autokoupdates: true, handlekeyboardnavigation: null, showsortmenuitems: true, showfiltermenuitems: true, showgroupmenuitems: true, enablebrowserselection: false, enablekeyboarddelete: true, clipboard: true, ready: null, updatefilterpanel: null, autogeneratecolumns: false, rowdetailstemplate: null, scrollfeedback: null, rendertoolbar: null, renderstatusbar: null, rendered: null, multipleselectionbegins: null, columngroups: null, cellhover: null, source: { beforeprocessing: null, beforesend: null, loaderror: null, localdata: null, data: null, datatype: "array", datafields: [], url: "", root: "", record: "", id: "", totalrecords: 0, recordstartindex: 0, recordendindex: 0, loadallrecords: true, sortcolumn: null, sortdirection: null, sort: null, filter: null, sortcomparer: null }, dataview: null, updatedelay: null, autoheight: false, autowidth: false, showheader: true, showgroupsheader: true, closeablegroups: true, scrollbarsize: b.jqx.utilities.scrollBarSize, touchscrollbarsize: b.jqx.utilities.touchScrollBarSize, scrollbarautoshow: b.jqx.utilities.scrollBarAutoShow, virtualmode: false, sort: null, columnsmenu: true, columnsresize: false, columnsreorder: false, columnsmenuwidth: 15, autoshowcolumnsmenubutton: true, popupwidth: "auto", sorttogglestates: 2, rendergridrows: null, enableanimations: true, enabletooltips: false, selectionmode: "singlerow", enablehover: true, loadingerrormessage: "The data is still loading. When the data binding is completed, the Grid raises the 'bindingcomplete' event. Call this function in the 'bindingcomplete' event handler.", verticalscrollbarstep: 25, verticalscrollbarlargestep: 400, horizontalscrollbarstep: 10, horizontalscrollbarlargestep: 50, keyboardnavigation: true, touchModeStyle: "auto", autoshowloadelement: true, showdefaultloadelement: true, showemptyrow: true, autosavestate: false, autoloadstate: false, _updating: false, _pagescache: new Array(), _pageviews: new Array(), _cellscache: new Array(), _rowdetailscache: new Array(), _rowdetailselementscache: new Array(), _requiresupdate: false, _hasOpenedMenu: false, scrollmode: "physical", deferreddatafields: null, localization: null, rtl: false, menuitemsarray: [], events: ["initialized", "rowClick", "rowSelect", "rowUnselect", "groupExpand", "groupCollapse", "sort", "columnClick", "cellClick", "pageChanged", "pageSizeChanged", "bindingComplete", "groupsChanged", "filter", "columnResized", "cellSelect", "cellUnselect", "cellBeginEdit", "cellEndEdit", "cellValueChanged", "rowExpand", "rowCollapse", "rowDoubleClick", "cellDoubleClick", "columnReordered", "pageChanging"] }; b.extend(true, this, d) }, createInstance: function (h) { this.that = this; this.pagesize = parseInt(this.pagesize); this.toolbarheight = parseInt(this.toolbarheight); this.columnsheight = parseInt(this.columnsheight); this.filterrowheight = parseInt(this.filterrowheight); this.statusbarheight = parseInt(this.statusbarheight); this.groupsheaderheight = parseInt(this.groupsheaderheight); var g = "<div class='jqx-clear jqx-border-reset jqx-overflow-hidden jqx-max-size jqx-position-relative'><div tabindex='1' class='jqx-clear jqx-max-size jqx-position-relative jqx-overflow-hidden jqx-background-reset' id='wrapper" + this.element.id + "'><div class='jqx-clear jqx-position-absolute' id='toolbar' style='visibility: hidden;'></div><div class='jqx-clear jqx-position-absolute' id='groupsheader' style='visibility: hidden;'></div><div class='jqx-clear jqx-overflow-hidden jqx-position-absolute jqx-border-reset jqx-background-reset' id='content" + this.element.id + "'></div><div class='jqx-clear jqx-position-absolute' id='verticalScrollBar" + this.element.id + "'></div><div class='jqx-clear jqx-position-absolute' id='horizontalScrollBar" + this.element.id + "'></div><div class='jqx-clear jqx-position-absolute jqx-border-reset' id='bottomRight'></div><div class='jqx-clear jqx-position-absolute' id='statusbar'></div><div class='jqx-clear jqx-position-absolute' id='pager' style='z-index: 20;'></div></div></div>"; this.element.innerText = ""; this.element.innerHTML = ""; if (b.jqx.utilities.scrollBarSize != 15) { this.scrollbarsize = b.jqx.utilities.scrollBarSize } if (this.source) { if (!this.source.dataBind) { this.source = new b.jqx.dataAdapter(this.source) } var d = this.source._source.datafields; if (d && d.length > 0) { this._camelCase = this.source._source.dataFields !== undefined; this.editmode = this.editmode.toLowerCase(); this.selectionmode = this.selectionmode.toLowerCase() } } this.host.attr("role", "grid"); this.host.attr("align", "left"); this.element.innerHTML = g; this.host.addClass(this.toTP("jqx-grid")); this.host.addClass(this.toTP("jqx-reset")); this.host.addClass(this.toTP("jqx-rc-all")); this.host.addClass(this.toTP("jqx-widget")); this.host.addClass(this.toTP("jqx-widget-content")); this.wrapper = this.host.find("#wrapper" + this.element.id); this.content = this.host.find("#content" + this.element.id); this.content.addClass(this.toTP("jqx-reset")); var j = this.host.find("#verticalScrollBar" + this.element.id); var n = this.host.find("#horizontalScrollBar" + this.element.id); this.bottomRight = this.host.find("#bottomRight").addClass(this.toTP("jqx-grid-bottomright")).addClass(this.toTP("jqx-scrollbar-state-normal")); if (!j.jqxScrollBar) { throw new Error("jqxGrid: Missing reference to jqxscrollbar.js"); return } this.editors = new Array(); this.vScrollBar = j.jqxScrollBar({ vertical: true, rtl: this.rtl, touchMode: this.touchmode, step: this.verticalscrollbarstep, largestep: this.verticalscrollbarlargestep, theme: this.theme, _triggervaluechanged: false }); this.hScrollBar = n.jqxScrollBar({ vertical: false, rtl: this.rtl, touchMode: this.touchmode, step: this.horizontalscrollbarstep, largestep: this.horizontalscrollbarlargestep, theme: this.theme, _triggervaluechanged: false }); this.pager = this.host.find("#pager"); this.pager[0].id = "pager" + this.element.id; this.toolbar = this.host.find("#toolbar"); this.toolbar[0].id = "toolbar" + this.element.id; this.toolbar.addClass(this.toTP("jqx-grid-toolbar")); this.toolbar.addClass(this.toTP("jqx-widget-header")); this.statusbar = this.host.find("#statusbar"); this.statusbar[0].id = "statusbar" + this.element.id; this.statusbar.addClass(this.toTP("jqx-grid-statusbar")); this.statusbar.addClass(this.toTP("jqx-widget-header")); this.pager.addClass(this.toTP("jqx-grid-pager")); this.pager.addClass(this.toTP("jqx-widget-header")); this.groupsheader = this.host.find("#groupsheader"); this.groupsheader.addClass(this.toTP("jqx-grid-groups-header")); this.groupsheader.addClass(this.toTP("jqx-widget-header")); this.vScrollBar.css("visibility", "hidden"); this.hScrollBar.css("visibility", "hidden"); this.vScrollInstance = b.data(this.vScrollBar[0], "jqxScrollBar").instance; this.hScrollInstance = b.data(this.hScrollBar[0], "jqxScrollBar").instance; this.gridtable = null; this.isNestedGrid = this.host.parent() ? this.host.parent().css("z-index") == 2000 : false; this.touchdevice = this.isTouchDevice(); if (this.localizestrings) { this.localizestrings(); if (this.localization != null) { this.localizestrings(this.localization, false) } } if (this.rowdetailstemplate) { if (undefined == this.rowdetailstemplate.rowdetails) { this.rowdetailstemplate.rowdetails = "<div></div>" } if (undefined == this.rowdetailstemplate.rowdetailsheight) { this.rowdetailstemplate.rowdetailsheight = 200 } if (undefined == this.rowdetailstemplate.rowdetailshidden) { this.rowdetailstemplate.rowdetailshidden = true } } if (this.showfilterrow && !this.filterable) { throw new Error('jqxGrid: "showfilterrow" requires setting the "filterable" property to true!'); this.host.remove(); return } if (this.autorowheight && !this.autoheight && !this.pageable) { throw new Error('jqxGrid: "autorowheight" requires setting the "autoheight" or "pageable" property to true!'); this.host.remove(); return } if (this.virtualmode && this.rendergridrows == null) { throw new Error('jqxGrid: "virtualmode" requires setting the "rendergridrows"!'); this.host.remove(); return } if (this.virtualmode && !this.pageable && this.groupable) { throw new Error('jqxGrid: "grouping" in "virtualmode" without paging is not supported!'); this.host.remove(); return } if (this._testmodules()) { return } this._builddataloadelement(); this._cachedcolumns = this.columns; if (this.rowsheight != 25) { this._measureElement("cell") } if (this.columnsheight != 25 || this.columngroups) { this._measureElement("column") } if (this.source) { var d = this.source.datafields; if (d == null && this.source._source) { d = this.source._source.datafields } if (d) { for (var e = 0; e < this.columns.length; e++) { var f = this.columns[e]; if (f && f.cellsformat && f.cellsformat.length > 2) { for (var l = 0; l < d.length; l++) { if (d[l].name == f.datafield && !d[l].format) { d[l].format = f.cellsformat; break } } } } } } this.databind(this.source); if (this.showtoolbar) { this.toolbar.css("visibility", "inherit") } if (this.showstatusbar) { this.statusbar.css("visibility", "inherit") } this._arrange(); if (this.pageable && this._initpager) { this._initpager() } this.tableheight = null; var i = this.that; var k = function () { if (i.content) { i.content[0].scrollTop = 0; i.content[0].scrollLeft = 0 } if (i.gridcontent) { i.gridcontent[0].scrollLeft = 0; i.gridcontent[0].scrollTop = 0 } }; this.addHandler(this.content, "mousedown", function () { k() }); this.addHandler(this.content, "scroll", function (m) { k(); return false }); if (!this.showfilterrow) { if (!this.showstatusbar && !this.showtoolbar) { this.host.addClass("jqx-disableselect") } this.content.addClass("jqx-disableselect") } if (this.enablebrowserselection) { this.content.removeClass("jqx-disableselect"); this.host.removeClass("jqx-disableselect") } this._resizeWindow(); if (this.disabled) { this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")) } this.hasTransform = b.jqx.utilities.hasTransform(this.host); if (this.scrollmode == "logical") { this.vScrollInstance.thumbStep = this.rowsheight; this.vScrollInstance.step = this.rowsheight } if (!b.jqx.isHidden(this.host)) { if (this.filterable || this.groupable || this.sortable) { this._initmenu() } } }, _resizeWindow: function () { var d = this.that; if ((this.width != null && this.width.toString().indexOf("%") != -1) || (this.height != null && this.height.toString().indexOf("%") != -1)) { this._updatesizeonwindowresize = true; b.jqx.utilities.resize(this.host, function (h) { var g = b(window).width(); var e = b(window).height(); var f = d.host.width(); var i = d.host.height(); if (d.autoheight) { d._lastHostWidth = e } if (d._lastHostWidth != f || d._lastHostHeight != i) { if (d.touchdevice && d.editcell && h !== "orientationchange") { return } d._updatesize(d._lastHostWidth != f, d._lastHostHeight != i) } d._lastWidth = g; d._lastHeight = e; d._lastHostWidth = f; d._lastHostHeight = i }) } }, _builddataloadelement: function () { if (this.dataloadelement) { this.dataloadelement.remove() } this.dataloadelement = b('<div style="overflow: hidden; position: absolute;"></div>'); if (this.showdefaultloadelement) { var d = b('<div style="z-index: 99999; margin-left: -66px; left: 50%; top: 50%; margin-top: -24px; position: relative; width: 100px; height: 33px; padding: 5px; font-family: verdana; font-size: 12px; color: #767676; border-color: #898989; border-width: 1px; border-style: solid; background: #f6f6f6; border-collapse: collapse;"><div style="float: left;"><div style="float: left; overflow: hidden; width: 32px; height: 32px;" class="jqx-grid-load"/><span style="margin-top: 10px; float: left; display: block; margin-left: 5px;" >' + this.gridlocalization.loadtext + "</span></div></div>"); d.addClass(this.toTP("jqx-rc-all")); this.dataloadelement.addClass(this.toTP("jqx-rc-all")); d.addClass(this.toTP("jqx-fill-state-normal")); this.dataloadelement.append(d) } else { this.dataloadelement.addClass(this.toTP("jqx-grid-load")) } this.dataloadelement.width(this.width); this.dataloadelement.height(this.height); this.host.prepend(this.dataloadelement) }, _measureElement: function (e) { var d = b("<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>"); d.addClass(this.toTP("jqx-widget")); b(document.body).append(d); if (e == "cell") { this._cellheight = d.height() } else { this._columnheight = d.height() } d.remove() }, _measureMenuElement: function () { var e = b("<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>"); e.addClass(this.toTP("jqx-widget")); e.addClass(this.toTP("jqx-menu")); e.addClass(this.toTP("jqx-menu-item-top")); e.addClass(this.toTP("jqx-fill-state-normal")); b(document.body).append(e); var d = e.outerHeight(); e.remove(); return d }, _measureElementWidth: function (f) { var e = b("<span style='visibility: hidden; white-space: nowrap;'>" + f + "</span>"); e.addClass(this.toTP("jqx-widget")); e.addClass(this.toTP("jqx-grid")); e.addClass(this.toTP("jqx-grid-column-header")); e.addClass(this.toTP("jqx-widget-header")); b(document.body).append(e); var d = e.outerWidth() + 20; e.remove(); return d }, _getBodyOffset: function () { var e = 0; var d = 0; if (b("body").css("border-top-width") != "0px") { e = parseInt(b("body").css("border-top-width")); if (isNaN(e)) { e = 0 } } if (b("body").css("border-left-width") != "0px") { d = parseInt(b("body").css("border-left-width")); if (isNaN(d)) { d = 0 } } return { left: d, top: e } }, _testmodules: function () { var k = ""; var h = this.that; var d = function () { if (k.length != "") { k += "," } }; if (this.columnsmenu && !this.host.jqxMenu && (this.sortable || this.groupable || this.filterable)) { d(); k += " jqxmenu.js" } if (!this.host.jqxScrollBar) { d(); k += " jqxscrollbar.js" } if (!this.host.jqxButton) { d(); k += " jqxbuttons.js" } if (!b.jqx.dataAdapter) { d(); k += " jqxdata.js" } if (this.pageable && !this.gotopage) { d(); k += "jqxgrid.pager.js" } if (this.filterable && !this.applyfilters) { d(); k += " jqxgrid.filter.js" } if (this.groupable && !this._initgroupsheader) { d(); k += " jqxgrid.grouping.js" } if (this.columnsresize && !this.autoresizecolumns) { d(); k += " jqxgrid.columnsresize.js" } if (this.columnsreorder && !this.setcolumnindex) { d(); k += " jqxgrid.columnsreorder.js" } if (this.sortable && !this.sortby) { d(); k += " jqxgrid.sort.js" } if (this.editable && !this.begincelledit) { d(); k += " jqxgrid.edit.js" } if (this.showaggregates && !this.getcolumnaggregateddata) { d(); k += " jqxgrid.aggregates.js" } if (this.keyboardnavigation && !this.selectrow) { d(); k += " jqxgrid.selection.js" } if (k != "" || this.editable || this.filterable || this.pageable) { var f = []; var j = function (i) { switch (i) { case "checkbox": if (!h.host.jqxCheckBox && !f.checkbox) { f.checkbox = true; d(); k += " jqxcheckbox.js" } break; case "numberinput": if (!h.host.jqxNumberInput && !f.numberinput) { f.numberinput = true; d(); k += " jqxnumberinput.js" } break; case "datetimeinput": if (!h.host.jqxDateTimeInput && !f.datetimeinput) { d(); f.datetimeinput = true; k += " jqxdatetimeinput.js(requires: jqxcalendar.js)" } else { if (!h.host.jqxCalendar && !f.calendar) { d(); k += " jqxcalendar.js" } } break; case "combobox": if (!h.host.jqxComboBox && !f.combobox) { d(); f.combobox = true; k += " jqxcombobox.js(requires: jqxlistbox.js)" } else { if (!h.host.jqxListBox && !f.listbox) { d(); f.listbox = true; k += " jqxlistbox.js" } } break; case "dropdownlist": if (!h.host.jqxDropDownList && !f.dropdownlist) { d(); f.dropdownlist = true; k += " jqxdropdownlist.js(requires: jqxlistbox.js)" } else { if (!h.host.jqxListBox && !f.listbox) { d(); f.listbox = true; k += " jqxlistbox.js" } } break } }; if (this.filterable || this.pageable) { j("dropdownlist") } for (var e = 0; e < this.columns.length; e++) { if (this.columns[e] == undefined) { continue } var g = this.columns[e].columntype; j(g); if (this.filterable && this.showfilterrow) { var g = this.columns[e].filtertype; if (g == "checkedlist" || g == "bool") { j("checkbox") } if (g == "date") { j("datetimeinput") } } } if (k != "") { throw new Error("jqxGrid: Missing references to the following module(s): " + k); this.host.remove(); return true } } return false }, focus: function () { try { this.wrapper.focus(); var e = this.that; setTimeout(function () { e.wrapper.focus() }, 25); this.focused = true } catch (d) { } }, hiddenParent: function () { return b.jqx.isHidden(this.host) }, resize: function (e, d) { this.width = e; this.height = d; this._updatesize(true, true) }, _updatesize: function (i, h) { if (this._loading) { return } var f = this.that; f._newmax = null; var g = f.host.width(); var e = f.host.height(); if (!f._oldWidth) { f._oldWidth = g } if (!f._oldHeight) { f._oldHeight = e } if (f._resizeTimer) { clearTimeout(f._resizeTimer) } var d = 5; f._resizeTimer = setTimeout(function () { f.resizingGrid = true; if (b.jqx.isHidden(f.host)) { return } if (f.editcell) { f.endcelledit(f.editcell.row, f.editcell.column, true, true); f._oldselectedcell = null } if (j != f._oldHeight || h == true) { var k = f.groupable && f.groups.length > 0; var p = f.vScrollBar.css("visibility"); if (!f.autoheight) { if (f.virtualmode) { f._pageviews = new Array() } if (!k && !f.rowdetails && !f.pageable) { f._arrange(); f.virtualsizeinfo = f._calculatevirtualheight(); var j = Math.round(f.host.height()) + 2 * f.rowsheight; if (parseInt(j) >= parseInt(f._oldHeight)) { f.prerenderrequired = true } f._renderrows(f.virtualsizeinfo) } else { f._arrange(); f.prerenderrequired = true; var j = Math.round(f.host.height()) + 2 * f.rowsheight; realheight = f._gettableheight(); var r = Math.round(j / f.rowsheight); var m = Math.max(f.dataview.totalrows, f.dataview.totalrecords); if (f.pageable) { m = f.pagesize; if (f.pagesize > Math.max(f.dataview.totalrows, f.dataview.totalrecords) && f.autoheight) { m = Math.max(f.dataview.totalrows, f.dataview.totalrecords) } else { if (!f.autoheight) { if (f.dataview.totalrows < f.pagesize) { m = Math.max(f.dataview.totalrows, f.dataview.totalrecords) } } } } var o = m * f.rowsheight; var l = f._getpagesize(); if (!f.pageable && f.autoheight) { r = m } if (f.virtualsizeinfo) { f.virtualsizeinfo.visiblerecords = r } f.rendergridcontent(true, false); f._renderrows(f.virtualsizeinfo) } if (p != f.vScrollBar.css("visibility")) { f.vScrollInstance.setPosition(0); f._arrange(); f._updatecolumnwidths(); if (f.table) { f.table.width(f.columnsheader.width()) } f._updatecellwidths() } } } if (g != f._oldWidth || i == true) { var q = false; if (f.editcell && f.editcell.editor) { switch (f.editcell.columntype) { case "dropdownlist": q = f.editcell.editor.jqxDropDownList("isOpened") || (f.editcell.editor.jqxDropDownList("isanimating") && !f.editcell.editor.jqxDropDownList("ishiding")); if (q) { f.editcell.editor.jqxDropDownList({ openDelay: 0 }); f.editcell.editor.jqxDropDownList("open"); f.editcell.editor.jqxDropDownList({ openDelay: 250 }); return } break; case "combobox": q = f.editcell.editor.jqxComboBox("isOpened") || (f.editcell.editor.jqxComboBox("isanimating") && !f.editcell.editor.jqxComboBox("ishiding")); if (q) { f.editcell.editor.jqxComboBox({ openDelay: 0 }); f.editcell.editor.jqxComboBox("open"); f.editcell.editor.jqxComboBox({ openDelay: 250 }); return } break; case "datetimeinput": if (q) { q = f.editcell.editor.jqxDateTimeInput("isOpened") || (f.editcell.editor.jqxDateTimeInput("isanimating") && !f.editcell.editor.jqxDateTimeInput("ishiding")); f.editcell.editor.jqxDateTimeInput({ openDelay: 0 }); f.editcell.editor.jqxDateTimeInput("open"); f.editcell.editor.jqxDateTimeInput({ openDelay: 250 }); return } break } } var n = f.hScrollBar.css("visibility"); f._arrange(); f._updatecolumnwidths(); if (f.table) { f.table.width(f.columnsheader.width()) } f._updatecellwidths(); if (!(i == false && f._oldWidth > g)) { if (!h || f.dataview.rows.length == 0) { f._renderrows(f.virtualsizeinfo) } } if (n != f.hScrollBar.css("visibility")) { f.hScrollInstance.setPosition(0) } } f._oldWidth = g; f._oldHeight = j; f.resizingGrid = false }, d) }, getTouches: function (d) { return b.jqx.mobile.getTouches(d) }, _updateTouchScrolling: function () { var e = this.that; if (e.isTouchDevice()) { e.scrollmode = "logical"; e.vScrollInstance.thumbStep = e.rowsheight; var g = b.jqx.mobile.getTouchEventName("touchstart"); var f = b.jqx.mobile.getTouchEventName("touchend"); var d = b.jqx.mobile.getTouchEventName("touchmove"); e.enablehover = false; if (e.gridcontent) { e.removeHandler(e.gridcontent, g + ".touchScroll"); e.removeHandler(e.gridcontent, d + ".touchScroll"); e.removeHandler(e.gridcontent, f + ".touchScroll"); e.removeHandler(e.gridcontent, "touchcancel.touchScroll"); b.jqx.mobile.touchScroll(e.gridcontent[0], e.vScrollInstance.max, function (j, i) { if (e.vScrollBar.css("visibility") == "visible") { var h = e.vScrollInstance.value; e.vScrollInstance.setPosition(h + i) } if (e.hScrollBar.css("visibility") == "visible") { var h = e.hScrollInstance.value; e.hScrollInstance.setPosition(h + j) } e.vScrollInstance.thumbCapture = true; e._lastScroll = new Date() }, this.element.id, this.hScrollBar, this.vScrollBar); if (e._overlayElement) { e.removeHandler(e._overlayElement, g + ".touchScroll"); e.removeHandler(e._overlayElement, d + ".touchScroll"); e.removeHandler(e._overlayElement, f + ".touchScroll"); e.removeHandler(e._overlayElement, "touchcancel.touchScroll"); b.jqx.mobile.touchScroll(e._overlayElement[0], e.vScrollInstance.max, function (j, i) { if (e.vScrollBar.css("visibility") == "visible") { var h = e.vScrollInstance.value; e.vScrollInstance.setPosition(h + i) } if (e.hScrollBar.css("visibility") == "visible") { var h = e.hScrollInstance.value; e.hScrollInstance.setPosition(h + j) } e.vScrollInstance.thumbCapture = true; e._lastScroll = new Date() }, this.element.id, this.hScrollBar, this.vScrollBar); this.addHandler(this.host, g, function () { if (!e.editcell) { e._overlayElement.css("visibility", "visible") } else { e._overlayElement.css("visibility", "hidden") } }); this.addHandler(this.host, f, function () { if (!e.editcell) { e._overlayElement.css("visibility", "visible") } else { e._overlayElement.css("visibility", "hidden") } }) } } } }, isTouchDevice: function () { if (this.touchDevice != undefined) { return this.touchDevice } var d = b.jqx.mobile.isTouchDevice(); this.touchDevice = d; if (this.touchmode == true) { if (b.jqx.browser.msie && b.jqx.browser.version < 9) { this.enablehover = false; return false } d = true; b.jqx.mobile.setMobileSimulator(this.element); this.touchDevice = d } else { if (this.touchmode == false) { d = false } } if (d && this.touchModeStyle != false) { this.touchDevice = true; this.host.addClass(this.toThemeProperty("jqx-touch")); this.host.find("jqx-widget-content").addClass(this.toThemeProperty("jqx-touch")); this.host.find("jqx-widget-header").addClass(this.toThemeProperty("jqx-touch")); this.scrollbarsize = this.touchscrollbarsize } return d }, toTP: function (d) { return this.toThemeProperty(d) }, localizestrings: function (d, e) { this._cellscache = new Array(); if (b.jqx.dataFormat) { b.jqx.dataFormat.cleardatescache() } if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d != null) { for (var f in d) { if (f.toLowerCase() !== f) { d[f.toLowerCase()] = d[f] } } if (d.pagergotopagestring) { this.gridlocalization.pagergotopagestring = d.pagergotopagestring } if (d.pagershowrowsstring) { this.gridlocalization.pagershowrowsstring = d.pagershowrowsstring } if (d.pagerrangestring) { this.gridlocalization.pagerrangestring = d.pagerrangestring } if (d.pagernextbuttonstring) { this.gridlocalization.pagernextbuttonstring = d.pagernextbuttonstring } if (d.pagerpreviousbuttonstring) { this.gridlocalization.pagerpreviousbuttonstring = d.pagerpreviousbuttonstring } if (d.pagerfirstbuttonstring) { this.gridlocalization.pagerfirstbuttonstring = d.pagerfirstbuttonstring } if (d.pagerlastbuttonstring) { this.gridlocalization.pagerlastbuttonstring = d.pagerlastbuttonstring } if (d.groupsheaderstring) { this.gridlocalization.groupsheaderstring = d.groupsheaderstring } if (d.sortascendingstring) { this.gridlocalization.sortascendingstring = d.sortascendingstring } if (d.sortdescendingstring) { this.gridlocalization.sortdescendingstring = d.sortdescendingstring } if (d.sortremovestring) { this.gridlocalization.sortremovestring = d.sortremovestring } if (d.groupbystring) { this.gridlocalization.groupbystring = d.groupbystring } if (d.groupremovestring) { this.gridlocalization.groupremovestring = d.groupremovestring } if (d.firstDay) { this.gridlocalization.firstDay = d.firstDay } if (d.days) { this.gridlocalization.days = d.days } if (d.months) { this.gridlocalization.months = d.months } if (d.AM) { this.gridlocalization.AM = d.AM } if (d.PM) { this.gridlocalization.PM = d.PM } if (d.patterns) { this.gridlocalization.patterns = d.patterns } if (d.percentsymbol) { this.gridlocalization.percentsymbol = d.percentsymbol } if (d.currencysymbol) { this.gridlocalization.currencysymbol = d.currencysymbol } if (d.currencysymbolposition) { this.gridlocalization.currencysymbolposition = d.currencysymbolposition } if (d.decimalseparator != undefined) { this.gridlocalization.decimalseparator = d.decimalseparator } if (d.thousandsseparator != undefined) { this.gridlocalization.thousandsseparator = d.thousandsseparator } if (d.filterclearstring) { this.gridlocalization.filterclearstring = d.filterclearstring } if (d.filterstring) { this.gridlocalization.filterstring = d.filterstring } if (d.filtershowrowstring) { this.gridlocalization.filtershowrowstring = d.filtershowrowstring } if (d.filtershowrowdatestring) { this.gridlocalization.filtershowrowdatestring = d.filtershowrowdatestring } if (d.filterselectallstring) { this.gridlocalization.filterselectallstring = d.filterselectallstring } if (d.filterchoosestring) { this.gridlocalization.filterchoosestring = d.filterchoosestring } if (d.filterorconditionstring) { this.gridlocalization.filterorconditionstring = d.filterorconditionstring } if (d.filterandconditionstring) { this.gridlocalization.filterandconditionstring = d.filterandconditionstring } if (d.filterstringcomparisonoperators) { this.gridlocalization.filterstringcomparisonoperators = d.filterstringcomparisonoperators } if (d.filternumericcomparisonoperators) { this.gridlocalization.filternumericcomparisonoperators = d.filternumericcomparisonoperators } if (d.filterdatecomparisonoperators) { this.gridlocalization.filterdatecomparisonoperators = d.filterdatecomparisonoperators } if (d.filterbooleancomparisonoperators) { this.gridlocalization.filterbooleancomparisonoperators = d.filterbooleancomparisonoperators } if (d.emptydatastring) { this.gridlocalization.emptydatastring = d.emptydatastring } if (d.filterselectstring) { this.gridlocalization.filterselectstring = d.filterselectstring } if (d.todaystring) { this.gridlocalization.todaystring = d.todaystring } if (d.clearstring) { this.gridlocalization.clearstring = d.clearstring } if (d.validationstring) { this.gridlocalization.validationstring = d.validationstring } if (d.loadtext) { this.gridlocalization.loadtext = d.loadtext } if (e !== false) { if (this._initpager) { this._initpager() } if (this._initgroupsheader) { this._initgroupsheader() } if (this._initmenu) { this._initmenu() } this._builddataloadelement(); b(this.dataloadelement).css("visibility", "hidden"); b(this.dataloadelement).css("display", "none"); if (this.filterable && this.showfilterrow) { if (this._updatefilterrow) { for (var f in this._filterrowcache) { b(this._filterrowcache[f]).remove() } this._filterrowcache = []; this._updatefilterrow() } } if (this.showaggregates && this.refresheaggregates) { this.refresheaggregates() } this._renderrows(this.virtualsizeinfo) } } else { this.gridlocalization = { "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0 }], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss", ISO: "yyyy-MM-dd hh:mm:ss", ISO2: "yyyy-MM-dd HH:mm:ss", d1: "dd.MM.yyyy", d2: "dd-MM-yyyy", d3: "dd-MMMM-yyyy", d4: "dd-MM-yy", d5: "H:mm", d6: "HH:mm", d7: "HH:mm tt", d8: "dd/MMMM/yyyy", d9: "MMMM-dd", d10: "MM-dd", d11: "MM-dd-yyyy" }, percentsymbol: "%", currencysymbol: "$", currencysymbolposition: "before", decimalseparator: ".", thousandsseparator: ",", pagergotopagestring: "Go to page:", pagershowrowsstring: "Show rows:", pagerrangestring: " of ", pagerpreviousbuttonstring: "previous", pagernextbuttonstring: "next", pagerfirstbuttonstring: "first", pagerlastbuttonstring: "last", groupsheaderstring: "Drag a column and drop it here to group by that column", sortascendingstring: "Sort Ascending", sortdescendingstring: "Sort Descending", sortremovestring: "Remove Sort", groupbystring: "Group By this column", groupremovestring: "Remove from groups", filterclearstring: "Clear", filterstring: "Filter", filtershowrowstring: "Show rows where:", filtershowrowdatestring: "Show rows where date:", filterorconditionstring: "Or", filterandconditionstring: "And", filterselectallstring: "(Select All)", filterchoosestring: "Please Choose:", filterstringcomparisonoperators: ["empty", "not empty", "contains", "contains(match case)", "does not contain", "does not contain(match case)", "starts with", "starts with(match case)", "ends with", "ends with(match case)", "equal", "equal(match case)", "null", "not null"], filternumericcomparisonoperators: ["equal", "not equal", "less than", "less than or equal", "greater than", "greater than or equal", "null", "not null"], filterdatecomparisonoperators: ["equal", "not equal", "less than", "less than or equal", "greater than", "greater than or equal", "null", "not null"], filterbooleancomparisonoperators: ["equal", "not equal"], validationstring: "Entered value is not valid", emptydatastring: "No data to display", filterselectstring: "Select Filter", loadtext: "Loading...", clearstring: "Clear", todaystring: "Today" } } }, _initmenu: function () { var r = this.that; if (this.host.jqxMenu) { if (this.gridmenu) { if (this._hasOpenedMenu) { return } if (this.filterable) { if (this._destroyfilterpanel) { this._destroyfilterpanel() } } this.removeHandler(this.gridmenu, "keydown"); this.removeHandler(this.gridmenu, "closed"); this.removeHandler(this.gridmenu, "itemclick"); this.gridmenu.jqxMenu("destroy"); this.gridmenu.removeData(); this.gridmenu.remove() } this.menuitemsarray = new Array(); this.gridmenu = b('<div id="gridmenu' + this.element.id + '" style="z-index: 9999999999999;"></div>'); this.host.append(this.gridmenu); var w = b("<ul></ul>"); var i = '<div class="jqx-grid-sortasc-icon"></div>'; var t = b("<li>" + i + this.gridlocalization.sortascendingstring + "</li>"); var A = '<div class="jqx-grid-sortdesc-icon"></div>'; var x = b("<li>" + A + this.gridlocalization.sortdescendingstring + "</li>"); var n = '<div class="jqx-grid-sortremove-icon"></div>'; var k = b("<li>" + n + this.gridlocalization.sortremovestring + "</li>"); var j = '<div class="jqx-grid-groupby-icon"></div>'; var q = b("<li>" + j + this.gridlocalization.groupbystring + "</li>"); var f = b("<li>" + j + this.gridlocalization.groupremovestring + "</li>"); var d = b('<li type="separator"></li>'); var v = b('<li class="filter" style="height: 175px;" ignoretheme="true"><div class="filter"></div></li>'); var m = this.gridlocalization.sortascendingstring.length; var s = this.gridlocalization.sortascendingstring; if (this.gridlocalization.sortdescendingstring.length > m) { m = this.gridlocalization.sortdescendingstring.length; s = this.gridlocalization.sortdescendingstring } if (this.gridlocalization.sortremovestring.length > m) { m = this.gridlocalization.sortremovestring.length; s = this.gridlocalization.sortremovestring } if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) { if (this.gridlocalization.groupbystring.length > m) { m = this.gridlocalization.groupbystring.length; s = this.gridlocalization.groupbystring } if (this.gridlocalization.groupremovestring.length > m) { m = this.gridlocalization.groupremovestring.length; s = this.gridlocalization.groupremovestring } } var y = 200; s = b.trim(s).replace(/\&nbsp\;/ig, "").replace(/\&#160\;/ig, ""); var g = b("<span>" + s + "</span>"); g.addClass(this.toThemeProperty("jqx-menu-item")); this.host.append(g); y = g.outerWidth() + 60; g.remove(); var e = 0; if (this.sortable && this._togglesort && this.showsortmenuitems) { w.append(t); this.menuitemsarray[0] = t[0]; w.append(x); this.menuitemsarray[1] = x[0]; w.append(k); this.menuitemsarray[2] = k[0]; e = 3 } if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) { w.append(q); this.menuitemsarray[3] = q[0]; w.append(f); this.menuitemsarray[4] = f[0]; e += 2 } var u = this._measureMenuElement(); var l = e * u + 9; var p = true; if (this.filterable && !this.showfilterrow && this.showfiltermenuitems) { if (this._initfilterpanel) { this.menuitemsarray[5] = v[0]; this.menuitemsarray[6] = v[0]; w.append(d); w.append(v); l += 180; if (b.jqx.browser.msie && b.jqx.browser.version < 8) { l += 20 } var o = b(v).find("div:first"); y += 20; this._initfilterpanel(this, o, "", y); p = false; this.removeHandler(b(document), "click.menu" + r.element.id, r._closemenuafterclick, r); this.addHandler(b(document), "click.menu" + r.element.id, r._closemenuafterclick, r) } else { throw new Error("jqxGrid: Missing reference to jqxgrid.filter.js.") } } this.gridmenu.append(w); if (b.jqx.browser.msie && b.jqx.browser.version < 8 && this.filterable) { b("#listBoxfilter1" + this.element.id).css("z-index", 4990); b("#listBoxfilter2" + this.element.id).css("z-index", 4990); b("#listBoxfilter3" + this.element.id).css("z-index", 4990); b("#gridmenu" + this.element.id).css("z-index", 5000); this.addHandler(b("#gridmenu" + this.element.id), "initialized", function () { b("#menuWrappergridmenu" + r.element.id).css("z-index", 4980) }) } if (this.menuitemsarray[0] == undefined) { l = 65 } this.removeHandler(this.gridmenu, "keydown"); this.addHandler(this.gridmenu, "keydown", function (F) { if (F.keyCode == 27) { r.gridmenu.jqxMenu("close") } else { if (F.keyCode == 13 && r.filterable) { if (r._buildfilter) { var E = b(b.find("#filter1" + r.element.id)).jqxDropDownList("container").css("display") == "block"; var D = b(b.find("#filter2" + r.element.id)).jqxDropDownList("container").css("display") == "block"; var B = b(b.find("#filter3" + r.element.id)).jqxDropDownList("container").css("display") == "block"; var G = b(b.find("#filterclearbutton" + r.element.id)).hasClass("jqx-fill-state-focus"); if (G) { var C = b.data(document.body, "contextmenu" + r.element.id).column; r._clearfilter(r, r.element, C); r.gridmenu.jqxMenu("close") } else { if (!E && !D && !B) { var C = b.data(document.body, "contextmenu" + r.element.id).column; r.gridmenu.jqxMenu("close"); r._buildfilter(r, v, C) } } } } } }); if (this.popupwidth != "auto") { y = this.popupwidth } this.gridmenu.jqxMenu({ popupZIndex: 999999, width: y, height: l, autoCloseOnClick: p, autoOpenPopup: false, mode: "popup", theme: this.theme, animationShowDuration: 0, animationHideDuration: 0, animationShowDelay: 0 }); if (this.filterable) { this.gridmenu.jqxMenu("_setItemProperty", v[0].id, "closeOnClick", false) } if (this.rtl) { var z = this.that; b.each(w.find("li"), function () { b(this).addClass(z.toTP("jqx-rtl")) }); var h = function (B) { var C = B.find("div"); C.css("float", "right"); C.css("margin-left", "4px"); C.css("margin-right", "-4px") }; h(k); h(x); h(t); h(q); h(f) } this._handlemenueevents() } else { this.columnsmenu = false } }, _arrangemenu: function () { if (!this.gridmenu) { this._initmenu() } var i = this.gridlocalization.sortascendingstring.length; var d = this.gridlocalization.sortascendingstring; if (this.gridlocalization.sortdescendingstring.length > i) { i = this.gridlocalization.sortdescendingstring.length; d = this.gridlocalization.sortdescendingstring } if (this.gridlocalization.sortremovestring.length > i) { i = this.gridlocalization.sortremovestring.length; d = this.gridlocalization.sortremovestring } if (this.groupable && this._initgroupsheader) { if (this.gridlocalization.groupbystring.length > i) { i = this.gridlocalization.groupbystring.length; d = this.gridlocalization.groupbystring } if (this.gridlocalization.groupremovestring.length > i) { i = this.gridlocalization.groupremovestring.length; d = this.gridlocalization.groupremovestring } } var e = 200; d = b.trim(d).replace(/\&nbsp\;/ig, "").replace(/\&#160\;/ig, ""); var f = b("<span>" + d + "</span>"); f.addClass(this.toThemeProperty("jqx-menu-item")); this.host.append(f); e = f.outerWidth() + 60; f.remove(); var g = 0; if (this.sortable && this._togglesort && this.showsortmenuitems) { g = 3 } if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) { g += 2 } var h = g * 27 + 3; if (this.filterable && this.showfiltermenuitems) { if (this._initfilterpanel) { h += 180; e += 20; if (b.jqx.browser.msie && b.jqx.browser.version < 8) { h += 20 } } } if (this.menuitemsarray[0] == undefined) { h = 65 } if (this.popupwidth != "auto") { e = this.popupwidth } this.gridmenu.jqxMenu({ width: e, height: h }) }, _closemenuafterclick: function (e) { var i = e != null ? e.data : this; var g = false; if (e.target == undefined || (e.target != undefined && e.target.className.indexOf == undefined)) { i.gridmenu.jqxMenu("close"); return } if (e.target.className.indexOf("filter") != -1 && e.target.className.indexOf("jqx-grid-cell-filter") == -1) { return } if (e.target.className.indexOf("jqx-grid-cell") != -1) { i.gridmenu.jqxMenu("close"); return } if (i._hasOpenedMenu) { if (b(e.target).ischildof(i.gridmenu)) { return } } var d = i.host.coord(); var f = i.gridmenu.coord(); var k = e.pageX; var j = e.pageY; b.each(b(e.target).parents(), function () { if (this.id != null && this.id.indexOf && this.id.indexOf("filter") != -1) { g = true; return false } if (this.className.indexOf && this.className.indexOf("filter") != -1 && this.className.indexOf("jqx-grid-cell-filter") == -1) { g = true; return false } if (this.className.indexOf && this.className.indexOf("jqx-grid-cell") != -1) { i.gridmenu.jqxMenu("close"); return false } if (this.className.indexOf && this.className.indexOf("jqx-grid-column") != -1) { i.gridmenu.jqxMenu("close"); return false } }); if (g) { return } try { if (i.filtermode === "default") { var n = b(b.find("#filter1" + i.element.id)).jqxDropDownList("listBox").vScrollInstance._mouseup; var l = new Date(); if (l - n < 100) { return } var m = b(b.find("#filter3" + i.element.id)).jqxDropDownList("listBox").vScrollInstance._mouseup; if (l - m < 100) { return } if ((b(b.find("#filter3" + i.element.id)).jqxDropDownList("container")).css("display") == "block") { return } if ((b(b.find("#filter1" + i.element.id)).jqxDropDownList("container")).css("display") == "block") { return } if ((b(b.find("#filter2" + i.element.id)).jqxDropDownList("container")).css("display") == "block") { return } if (i._hasdatefilter) { if (b(".filtertext1" + i.element.id)[0].nodeName.toLowerCase() == "div") { if (b(".filtertext1" + i.element.id).jqxDateTimeInput("container").css("display") == "block") { return } if (b(".filtertext2" + i.element.id).jqxDateTimeInput("container").css("display") == "block") { return } } } } else { var n = b(b.find("#filter1" + i.element.id)).data().jqxListBox.instance.vScrollInstance._mouseup; var l = new Date(); if (l - n < 100) { return } var m = b(b.find("#filter1" + i.element.id)).data().jqxListBox.instance.hScrollInstance._mouseup; if (l - m < 100) { return } } } catch (h) { } if (k >= f.left && k <= f.left + i.gridmenu.width()) { if (j >= f.top && j <= f.top + i.gridmenu.height()) { return } } i.gridmenu.jqxMenu("close") }, _handlemenueevents: function () { var d = this.that; this.removeHandler(this.gridmenu, "closed"); this.addHandler(this.gridmenu, "closed", function (e) { d._closemenu() }); this.removeHandler(this.gridmenu, "itemclick"); this.addHandler(this.gridmenu, "itemclick", function (h) { var g = h.args; for (var e = 0; e < d.menuitemsarray.length; e++) { var j = d.menuitemsarray[e]; if (g == j) { if (b(g).attr("ignoretheme") != undefined) { return } var k = b.data(document.body, "contextmenu" + d.element.id); var f = k.column; if (d.filterable) { d.gridmenu.jqxMenu("close") } var m = f.displayfield; if (m == null) { m = f.datafield } if (k != null) { switch (e) { case 0: d.sortby(m, "ascending", null); break; case 1: d.sortby(m, "descending", null); break; case 2: d.sortby(m, null, null); break; case 3: d.addgroup(f.datafield); break; case 4: d.removegroup(f.datafield); break; case 5: var l = b(d.menuitemsarray[6]); b(l).css("display", "block"); break; case 7: break } } break } } }) }, getdatainformation: function () { var d = this.dataview.totalrecords; if (this.summaryrows) { d += this.summaryrows.length } return { rowscount: d, sortinformation: this.getsortinformation(), paginginformation: this.getpaginginformation() } }, getsortinformation: function () { return { sortcolumn: this.sortcolumn, sortdirection: this.sortdirection } }, getpaginginformation: function () { return { pagenum: this.dataview.pagenum, pagesize: this.pagesize, pagescount: Math.ceil(this.dataview.totalrecords / this.pagesize) } }, _updaterowsproperties: function () { this._updatehiddenrows(); this._updaterowheights(); this._updaterowdetails() }, _updatehiddenrows: function () { var e = this.that; this.hiddens = new Array(); var d = this.hiddenboundrows; b.each(d, function (g) { if (this.index != undefined) { var f = this.index; var h = e.getrowvisibleindex(g); e.hiddens[h] = this.hidden } }) }, _updaterowheights: function () { var e = this.that; this.heights = new Array(); var d = this.heightboundrows; b.each(d, function (g) { if (this.index != undefined) { var f = this.index; var h = e.getrowvisibleindex(g); e.heights[h] = this.height } }) }, _updaterowdetails: function () { var d = this.that; this.details = new Array(); var e = this.detailboundrows; b.each(e, function (g) { if (this.index != undefined) { var f = this.index; var h = d.getrowvisibleindex(g); d.details[h] = this.details } }) }, _getmenuitembyindex: function (d) { if (d == undefined) { return null } return this.menuitemsarray[d] }, openmenu: function (e) { if (this._openingmenu) { return } this._openingmenu = true; this.closemenu(); var h = this.getcolumn(e); if (!h.menu) { return false } if (!this.gridmenu) { this._initmenu() } var d = h.columnsmenu; b(h.element).trigger("mouseenter"); var g = this; for (var f = 0; f < g.columns.records.length; f++) { if (g.columns.records[f].datafield != e) { b(g.columns.records[f].element).trigger("mouseleave") } } setTimeout(function () { if (b(d)[0].style.display == "block") { b(d).trigger("click") } g._openingmenu = false }, 200) }, closemenu: function () { this._closemenu() }, _closemenu: function () { if (this._hasOpenedMenu) { if (this.gridmenu != null) { this.gridmenu.jqxMenu("close") } var h = b.data(document.body, "contextmenu" + this.element.id); var e = 16; if (h != null && this.autoshowcolumnsmenubutton) { if (this.enableanimations) { b(h.columnsmenu).animate({ "margin-left": 0 }, "fast", function () { b(h.columnsmenu).css("display", "none") }); var g = !this.rtl ? -32 : 0; h.column.iconscontainer.animate({ "margin-left": g }, "fast") } else { b(h.columnsmenu).css("display", "none"); var g = !this.rtl ? -32 : 0; h.column.iconscontainer.css("margin-left", g) } b.data(document.body, "contextmenu" + this.element.id, null) } this._hasOpenedMenu = false; var j = this._getmenuitembyindex(5); if (j) { var i = b(j).find("#filter1" + this.element.id); var d = b(j).find("#filter2" + this.element.id); var f = b(j).find("#filter3" + this.element.id); if (i.length > 0 && this.filtermode === "default") { i.jqxDropDownList("hideListBox"); d.jqxDropDownList("hideListBox"); f.jqxDropDownList("hideListBox") } } } }, scrolloffset: function (e, d) { if (e == null || d == null || e == undefined || d == undefined) { return } this.vScrollBar.jqxScrollBar("setPosition", e); this.hScrollBar.jqxScrollBar("setPosition", d) }, scrollleft: function (d) { if (d == null || d == undefined) { return } if (this.hScrollBar.css("visibility") != "hidden") { this.hScrollBar.jqxScrollBar("setPosition", d) } }, scrolltop: function (d) { if (d == null || d == undefined) { return } if (this.vScrollBar.css("visibility") != "hidden") { this.vScrollBar.jqxScrollBar("setPosition", d) } }, beginupdate: function (d) { this._updating = true; this._datachanged = false; if (d === true) { this._batchupdate = true } }, endupdate: function () { this.resumeupdate() }, resumeupdate: function () { this._updating = false; if (this._batchupdate) { this._batchupdate = false; this._datachanged = false; this.render(); return } if (this._datachanged == true) { var d = this.vScrollInstance.value; this.render(true, true, false); this._datachanged = false; if (d != 0 && d < this.vScrollInstance.max) { this.scrolltop(d) } } else { this.rendergridcontent(true); this._renderrows(this.virtualsizeinfo) } if (this.showaggregates && this.renderaggregates) { this.renderaggregates() } this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo) }, updating: function () { return this._updating }, showloadelement: function () { if (this.renderloadelement) { this.dataloadelement.html(this.renderloadelement()) } this.dataloadelement.width(this.host.width()); this.dataloadelement.height(this.host.height()); b(this.dataloadelement).css("visibility", "visible"); b(this.dataloadelement).css("display", "block") }, hideloadelement: function () { b(this.dataloadelement).css("visibility", "hidden"); b(this.dataloadelement).css("display", "none") }, _updatefocusedfilter: function () { var d = this.that; if (d.focusedfilter) { d.focusedfilter.focus(); setTimeout(function () { d.focusedfilter.focus(); if (d.focusedfilter[0].nodeName.toLowerCase() == "input") { var g = d.focusedfilter.val().length; try { if ("selectionStart" in d.focusedfilter[0]) { d.focusedfilter[0].setSelectionRange(g, g) } else { var e = d.focusedfilter[0].createTextRange(); e.collapse(true); e.moveEnd("character", g); e.moveStart("character", g); e.select() } } catch (f) { } } }, 10) } }, databind: function (g, i) { if (this.loadingstate === true) { return } if (this.host.css("display") == "block") { if (this.autoshowloadelement) { b(this.dataloadelement).css("visibility", "visible"); b(this.dataloadelement).css("display", "block"); this.dataloadelement.width(this.host.width()); this.dataloadelement.height(this.host.height()); this._hideemptyrow() } else { b(this.dataloadelement).css("visibility", "hidden"); b(this.dataloadelement).css("display", "none") } } if (!this._initgroupsheader && this.groups.length > 0) { this.groups = new Array() } var f = this.that; if (g == null) { g = {} } if (!g.recordstartindex) { g.recordstartindex = 0 } if (!g.recordendindex) { g.recordendindex = 0 } if (g.loadallrecords == undefined || g.loadallrecords == null) { g.loadallrecords = true } if (g.sortcomparer == undefined || g.sortcomparer == null) { g.sortcomparer = null } if (g.filter == undefined || g.filter == null) { g.filter = null } if (g.sort == undefined || g.sort == null) { g.sort = null } if (g.data == undefined || g.data == null) { g.data = null } var d = null; if (g != null) { d = g._source != undefined ? g._source.url : g.url } this.dataview = this.dataview || new b.jqx.dataview(); if (b.jqx.dataview.sort) { b.extend(this.dataview, new b.jqx.dataview.sort()) } if (b.jqx.dataview.grouping) { b.extend(this.dataview, new b.jqx.dataview.grouping()) } this.dataview.suspendupdate(); this.dataview.pageable = this.pageable; this.dataview.groupable = this.groupable; this.dataview.groups = this.groups; this.dataview.virtualmode = this.virtualmode; this.dataview.grid = this; this.dataview._clearcaches(); if (!this.pageable && this.virtualmode) { this.loadondemand = true } if (!f.initializedcall) { if (g._source) { if (this.sortable) { if (g._source.sortcolumn != undefined) { this.sortcolumn = g._source.sortcolumn; this.source.sortcolumn = this.sortcolumn; this.dataview.sortfield = g._source.sortcolumn; g._source.sortcolumn = null } if (g._source.sortdirection != undefined) { this.dataview.sortfielddirection = g._source.sortdirection; var h = g._source.sortdirection; if (h == "a" || h == "asc" || h == "ascending" || h == true) { var e = true } else { var e = false } if (h != null) { this.sortdirection = { ascending: e, descending: !e } } else { this.sortdirection = { ascending: false, descending: false } } } } } if (this.pageable) { if (g._source) { if (g._source.pagenum != undefined) { this.dataview.pagenum = g._source.pagenum } if (g._source.pagesize != undefined) { this.pagesize = g._source.pagesize; this.dataview.pagesize = g._source.pagesize } else { this.dataview.pagesize = g._source.pagesize; if (this.dataview.pagesize == undefined) { this.dataview.pagesize = this.pagesize } } } } if (this.sortable) { if (g.sortcolumn) { this.dataview.sortfield = g.sortcolumn } if (g.sortdirection) { this.dataview.sortfielddirection = g.sortdirection } } if (this.filterable) { if (this.columns) { b.each(this.columns, function () { if (this.filter) { f.dataview.addfilter(this.datafield, this.filter) } }) } } } this._loading = true; this.dataview.update = function (l) { if (!f.pageable && f.virtualmode) { f.loadondemand = true } f._loading = false; if (f.dataview.isupdating()) { f.dataview.resumeupdate(false) } if (f.pageable && f.pagerrenderer) { if (f._initpager) { f._initpager() } else { throw new Error("jqxGrid: Missing reference to jqxgrid.pager.js.") } } if ((f.source && f.source.sortcolumn) && f.sortby && !f.virtualmode) { f.render(); if (!f.source._source.sort) { f.sortby(f.source.sortcolumn, f.source.sortdirection, f.source.sortcomparer) } f.source.sortcolumn = null } else { var k = f.vScrollInstance.value; var n = f.hScrollInstance.value; var o = f.source ? f.source.datatype : "array"; if (o != "local" || o != "array") { var q = f.virtualsizeinfo == null || (f.virtualsizeinfo != null && f.virtualsizeinfo.virtualheight == 0); if (i == "cells") { var m = false; if (f.filterable && f._initfilterpanel && f.dataview.filters.length) { m = true } if (false == l) { if (!f.vScrollInstance.isScrolling() && !f.hScrollInstance.isScrolling()) { f._cellscache = new Array(); f._pagescache = new Array(); f._renderrows(f.virtualsizeinfo); if (f.showfilterrow && f.filterable && f.filterrow) { f._updatelistfilters(true) } if (f.showaggregates && f._updateaggregates) { f._updateaggregates() } } if (f.sortcolumn) { f.sortby(f.sortcolumn, f.dataview.sortfielddirection, f.source.sortcomparer) } if (f.autoshowloadelement) { b(f.dataloadelement).css("visibility", "hidden"); b(f.dataloadelement).css("display", "none") } if (f.virtualmode && !f._loading) { f.loadondemand = true; f._renderrows(f.virtualsizeinfo) } return } else { if (m) { i = "filter" } else { if (f.sortcolumn != undefined) { i = "sort" } } } } if (!f.virtualmode || q || (f.virtualmode && f.pageable)) { if (f.initializedcall == true && i == "pagechanged") { k = 0; if (f.groupable && f.groups.length > 0) { f._render(true, true, false, false, false); f._updatecolumnwidths(); f._updatecellwidths(); f._renderrows(f.virtualsizeinfo) } else { f.rendergridcontent(true); if (f.pageable && f.updatepagerdetails) { f.updatepagerdetails(); if (f.autoheight) { f._updatepageviews(); if (f.autorowheight) { f._renderrows(this.virtualsizeinfo) } } else { if (f.autorowheight) { f._updatepageviews(); f._renderrows(this.virtualsizeinfo) } } } } if (f.showaggregates && f._updateaggregates) { f._updateaggregates() } } else { if (i == "filter") { if (f.virtualmode) { f._render(true, true, false, false, false); f._updatefocusedfilter(); f._updatecolumnwidths(); f._updatecellwidths(); f._renderrows(f.virtualsizeinfo) } else { f._render(true, true, false, false, false) } } else { if (i == "sort") { if (f.virtualmode) { f.rendergridcontent(true); if (f.showaggregates && f._updateaggregates) { f._updateaggregates() } } else { f._render(true, true, false, false, false); if (f.sortcolumn && !f.source.sort) { f.sortby(f.sortcolumn, f.dataview.sortfielddirection, f.source.sortcomparer) } } if (f.source.sort) { f._updatefocusedfilter() } } else { if (i == "data") { f._render(true, true, false, false, false) } else { if (i == "state") { f._render(true, true, false, f.menuitemsarray && f.menuitemsarray.length > 0 && !f.virtualmode) } else { f._render(true, true, true, f.menuitemsarray && f.menuitemsarray.length > 0 && !f.virtualmode) } } } } } } else { if (f.virtualmode && l == true && !f.pageable) { f._render(true, true, false, false, false); f._updatefocusedfilter(); f._updatecolumnwidths(); f._updatecellwidths(); f._renderrows(f.virtualsizeinfo) } else { if (f.virtualmode && !f.pageable && l == false && i != undefined) { f.rendergridcontent(true); if (f.showaggregates && f._updateaggregates) { f._updateaggregates() } } else { if (f.virtualmode && f.dataview.totalrecords == 0 && f.dataview.filters.length > 0) { f._render(true, true, true, f.menuitemsarray && !f.virtualmode) } else { f._pagescache = new Array(); f._renderrows(f.virtualsizeinfo) } } } } if (f.vScrollInstance.value != k && k <= f.vScrollInstance.max) { f.vScrollInstance.setPosition(k) } if (f.hScrollInstance.value != n && n <= f.hScrollInstance.max) { f.hScrollInstance.setPosition(n) } } } if (f.autoshowloadelement) { b(f.dataloadelement).css("visibility", "hidden"); b(f.dataloadelement).css("display", "none") } if (f.pageable) { if (f.pagerrightbutton) { f.pagerrightbutton.jqxButton({ disabled: false }); f.pagerleftbutton.jqxButton({ disabled: false }); f.pagershowrowscombo.jqxDropDownList({ disabled: false }) } if (f.pagerfirstbutton) { f.pagerfirstbutton.jqxButton({ disabled: false }); f.pagerlastbutton.jqxButton({ disabled: false }) } } f._raiseEvent(11); if (!f.initializedcall) { var p = function () { f._raiseEvent(0); f.initializedcall = true; f.isInitialized = true; if (f.ready) { f.ready() } if (f.renderstatusbar) { f.renderstatusbar(f.statusbar) } if (f.rendertoolbar) { f.rendertoolbar(f.toolbar) } if (f.autoloadstate) { if (f.loadstate) { f.loadstate(null, true) } } }; if (!b.jqx.isHidden(f.host)) { p() } else { if (f.readyInterval) { clearInterval(f.readyInterval) } f.readyInterval = setInterval(function () { if (!b.jqx.isHidden(f.host)) { if (f.__isRendered) { clearInterval(f.readyInterval); f.readyInterval = null; p(); f._initmenu() } } }, 200) } if ((f.width != null && f.width.toString().indexOf("%") != -1) || (f.height != null && f.height.toString().indexOf("%") != -1)) { } if (f.host.css("visibility") == "hidden") { var j = b.jqx.browser.msie && b.jqx.browser.version < 8; if (f.vScrollBar.css("visibility") == "visible") { f.vScrollBar.css("visibility", "inherit") } if (!f.autowidth) { if (f.hScrollBar.css("visibility") == "visible") { f.hScrollBar.css("visibility", "inherit") } } f._intervalTimer = setInterval(function () { if (f.host.css("visibility") == "visible") { f._updatesize(true); clearInterval(f._intervalTimer) } }, 100) } } else { f._updateTouchScrolling() } }; this.dataview.databind(g); if (this.dataview.isupdating()) { if (d != undefined) { this.dataview.suspend = false } else { this.dataview.resumeupdate(false) } } this._initializeRows() }, scrollto: function (e, d) { if (undefined != e) { this.hScrollInstance.setPosition(e) } if (undefined != d) { this.vScrollInstance.setPosition(d) } }, scrollposition: function () { return { top: this.vScrollInstance.value, left: this.hScrollInstance.value } }, ensurerowvisible: function (h) { if (this.autoheight && !this.pageable) { return true } var e = this._getpagesize(); var g = Math.floor(h / e); if (!this._pageviews[g] && !this.pageable) { this._updatepageviews() } if (this.groupable && this.groups.length > 0) { return true } var n = false; if (this.pageable && this.gotopage && !this.virtualmode) { var g = Math.floor(h / e); if (this.dataview.pagenum != g) { if (this.groupable && this.groups.length > 0) { return true } this.gotopage(g); n = true } } var l = this.vScrollInstance.value; var m = this._gettableheight() - this.rowsheight; var d = e * (h / e - g); d = Math.round(d); if (this._pageviews[g]) { var k = this._pageviews[g].top; var j = k + d * this.rowsheight; if (this.rowdetails) { for (var f = e * g; f < h; f++) { if (this.details[f]) { if (this.details[f].rowdetailshidden == false) { j += this.details[f].rowdetailsheight } } } } if (this.scrollmode == "deferred") { if (this.vScrollInstance.max <= j + this.rowsheight) { j = this.vScrollInstance.max } } if (j < l) { this.scrolltop(j); n = true } else { if (j > l + m + 2) { this.scrolltop(j - m); n = true } } } else { if (this.pageable) { var j = d * this.rowsheight; if (this.rowdetails) { for (var f = e * g; f < e * g + d; f++) { if (this.details[f] && this.details[f].rowdetailshidden == false) { j += this.details[f].rowdetailsheight } } } if (j < l || j > l + m) { this.scrollto(0, j); n = true } } } return n }, ensurecellvisible: function (h, d) { var n = this.that; var i = this.hScrollBar.jqxScrollBar("value"); var j = n.hScrollInstance.max; if (n.rtl) { if (this.hScrollBar.css("visibility") != "visible") { j = 0 } } var o = this.ensurerowvisible(h); var e = 0; if (this.columns.records) { var m = i; if (this.hScrollBar.css("visibility") == "hidden") { return } var l = this.host.width(); var k = 0; var f = this.vScrollBar.css("visibility") == "visible" ? 20 : 0; var g = false; b.each(this.columns.records, function () { if (this.hidden) { return true } if (this.datafield == d) { var q = 0; var p = !n.rtl ? m : j - i; if (e + this.width > p + l - f) { q = e + this.width - l + f; if (n.rtl) { q = j - q } n.scrollleft(q); g = true } else { if (e <= p) { q = e - this.width; if (n.rtl) { q = j - q } n.scrollleft(q); g = true } } if (k == 0) { if (n.rtl) { n.scrollleft(j) } else { n.scrollleft(0) } g = true } else { if (k == n.columns.records.length - 1) { if (n.hScrollBar.css("visibility") == "visible") { if (!n.rtl) { n.scrollleft(n.hScrollBar.jqxScrollBar("max")) } else { n.scrollleft(n.hScrollBar.jqxScrollBar("min")) } g = true } } } return false } k++; e += this.width }); if (!g) { n.scrollleft(m) } } return o }, setrowheight: function (e, d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (e == null || d == null) { return false } this.heightboundrows[e] = { index: e, height: d }; e = this.getrowvisibleindex(e); if (e < 0) { return false } if (this.rows.records[e]) { this.rows.records[e].height = d } else { row = new a(this, null); row.height = d; this.rows.replace(e, row) } this.heights[e] = d; this.rendergridcontent(true); return true }, getrowheight: function (d) { if (d == null) { return null } d = this.getrowvisibleindex(d); if (d < 0) { return false } if (this.rows.records[d]) { return this.rows.records[d].height } }, setrowdetails: function (f, h, d, j) { if (f == undefined || f == null || f < 0) { return } var e = f + "_"; if (this._rowdetailscache[e]) { var g = this._rowdetailscache[e].element; b(g).remove(); this._rowdetailscache[e] = null } var i = this.dataview.generatekey(); this.detailboundrows[f] = { index: f, details: { rowdetails: h, rowdetailsheight: d, rowdetailshidden: j, key: i } }; f = this.getrowvisibleindex(f); if (f < 0) { return false } return this._setrowdetails(f, h, d, j, i) }, getcolumn: function (d) { var e = null; if (this.columns.records) { b.each(this.columns.records, function () { if (this.datafield == d || this.displayfield == d) { e = this; return false } }) } return e }, _getcolumnindex: function (e) { var d = -1; if (this.columns.records) { b.each(this.columns.records, function () { d++; if (this.datafield == e) { return false } }) } return d }, _getcolumnat: function (d) { var e = this.columns.records[d]; return e }, _getprevvisiblecolumn: function (e) { var d = this.that; while (e > 0) { e--; var f = d.getcolumnat(e); if (!f) { return null } if (!f.hidden) { return f } } return null }, _getnextvisiblecolumn: function (e) { var d = this.that; while (e < this.columns.records.length) { e++; var f = d.getcolumnat(e); if (!f) { return null } if (!f.hidden) { return f } } return null }, getcolumnat: function (d) { if (!isNaN(d)) { var e = this.columns.records[d]; return e } return null }, _getcolumn: function (d) { var e = null; b.each(this._columns, function () { if (this.datafield == d || this.displayfield == d) { e = this; return false } }); return e }, _setcolumnproperty: function (e, g, h) { if (e == null || g == null || h == null) { return null } g = g.toLowerCase(); var f = this.getcolumn(e); if (f == null) { return } var i = f[g]; f[g] = h; var d = this._getcolumn(e); if (d != null) { d[g] = h } this._cellscache = new Array(); switch (g) { case "filteritems": if (this.filterable && this.showfilterrow) { this._updatelistfilters(true, true) } break; case "text": this.prerenderrequired = true; this._rendercolumnheaders(); this._updatecellwidths(); if (this._groupsheader()) { if (this._initgroupsheader) { this._initgroupsheader() } } this._renderrows(this.virtualsizeinfo); break; case "editable": case "resizable": case "draggable": if (g == "editable") { if (h != i) { if (this.editcell != null && this.endcelledit) { this.endcelledit(this.editcell.row, this.editcell.column, true, true) } if (f.columntype == "checkbox") { this.prerenderrequired = true; this.rendergridcontent(true, false); if (this.updating()) { return false } } if (this.updating()) { return false } this._renderrows(this.virtualsizeinfo) } } break; case "hidden": case "hideable": case "renderer": case "cellsrenderer": case "align": case "aggregates": case "cellsalign": case "cellsformat": case "pinned": case "contenttype": case "filterable": case "groupable": case "cellclass": case "cellclassname": case "classname": case "class": this.prerenderrequired = true; if (g == "pinned") { this._initializeColumns() } this.rendergridcontent(true); if (this.updating()) { return false } if (g == "hidden") { this._updatecolumnwidths(); this._updatecellwidths() } this._renderrows(this.virtualsizeinfo); if (this.showaggregates && this._updateaggregates) { this._updateaggregates() } break; case "width": case "minwidth": case "maxwidth": if (this.updating()) { return false } f._width = null; f._percentagewidth = null; this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo); break } }, _getcolumnproperty: function (d, f) { if (d == null || f == null) { return null } f = f.toLowerCase(); var e = this.getcolumn(d); return e[f] }, setcolumnproperty: function (d, e, f) { this._setcolumnproperty(d, e, f) }, getcolumnproperty: function (d, e) { return this._getcolumnproperty(d, e) }, hidecolumn: function (d) { this._setcolumnproperty(d, "hidden", true) }, showcolumn: function (d) { this._setcolumnproperty(d, "hidden", false) }, iscolumnvisible: function (d) { return !this._getcolumnproperty(d, "hidden") }, pincolumn: function (d) { this._setcolumnproperty(d, "pinned", true) }, unpincolumn: function (d) { this._setcolumnproperty(d, "pinned", false) }, iscolumnpinned: function (d) { return this._getcolumnproperty(d, "pinned") }, _setrowdetails: function (j, d, n, h, e) { if (n == 0) { n = 100 } if (j == null || n == null) { return false } if (e != null) { this.details[j] = { rowdetails: d, rowdetailsheight: n, rowdetailshidden: h, detailskey: e } } else { var m = this.details[j] != null ? this.details[j].detailskey : null; var l = { rowdetails: d, rowdetailsheight: n, rowdetailshidden: h, detailskey: m }; var k = this.that; for (var g = 0; g < this.detailboundrows.length; g++) { if (this.detailboundrows[g] != undefined) { var f = this.detailboundrows[g]; if (f.details.detailskey == m) { f.details.rowdetailsheight = l.rowdetailsheight; f.details.rowdetailshidden = l.rowdetailshidden; f.details.rowdetails = l.rowdetails; break } } } this.details[j] = l } this.rendergridcontent(true); this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo); return true }, getrowdetails: function (d) { if (d == null) { return false } d = this.getrowvisibleindex(d); return this._getrowdetails(d) }, _getrowdetails: function (d) { if (d == null) { return false } if (d < 0) { return false } if (this.details[d]) { return this.details[d] } if (this.rowdetailstemplate) { return this.rowdetailstemplate } }, getrecordscount: function () { return this.dataview.totalrecords }, showrowdetails: function (d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d == null) { return false } d = this.getrowvisibleindex(d); if (d < 0) { return false } var e = this._getrowdetails(d); return this._setrowdetailsvisibility(d, e, false) }, hiderowdetails: function (d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } d = this.getrowvisibleindex(d); if (d < 0) { return false } var e = this._getrowdetails(d); return this._setrowdetailsvisibility(d, e, true) }, _togglerowdetails: function (i) { var f = i.visibleindex; var g = this._getrowdetails(f); if (g != null) { var e = this.vScrollInstance.value; var h = !g.rowdetailshidden; var d = this._setrowdetailsvisibility(f, g, h); if (e !== 0 && this.vScrollBar.css("visibility") !== "hidden") { if (e <= this.vScrollInstance.max) { this.vScrollInstance.setPosition(e) } else { this.vScrollInstance.setPosition(this.vScrollInstance.max) } } return d } return false }, _setrowdetailsvisibility: function (e, f, h) { if (this.rowdetailstemplate) { if (!this.details) { this.details = new Array() } if (!this.details[e]) { this.details[e] = { rowdetailshidden: this.rowdetailstemplate.rowdetailshidden, rowdetailsheight: this.rowdetailstemplate.rowdetailsheight, rowdetails: this.rowdetailstemplate.rowdetails }; var g = this.dataview.generatekey(); this.details[e].detailskey = g; this.detailboundrows[e] = { index: e, details: this.details[e] } } } if (f != null) { this.details[e].rowdetailshidden = h } else { return false } var d = this.details[e]; if (h) { this._raiseEvent(21, { rowindex: e, details: d.rowdetails, height: d.rowdetailsheight }) } else { this._raiseEvent(20, { rowindex: e, details: d.rowdetails, height: d.rowdetailsheight }) } return this._setrowdetails(e, d.rowdetails, d.rowdetailsheight, d.rowdetailshidden) }, getrowvisibleindex: function (d) { if (d == undefined || d == null || d < 0) { return false } if (this.virtualmode) { var e = this.dataview.loadedrecords[d]; if (e == undefined) { return -1 } return e.visibleindex } return this.getrowdisplayindex(d) }, hiderow: function (d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d == undefined || d == null || d < 0) { return false } if (d == null) { return false } this.hiddenboundrows[d] = { index: d, hidden: true }; d = this.getrowvisibleindex(d); return this._setrowvisibility(d, true) }, showrow: function (d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d == undefined || d == null || d < 0) { return false } if (d == null) { return false } this.hiddenboundrows[d] = { index: d, hidden: false }; d = this.getrowvisibleindex(d); return this._setrowvisibility(d, false) }, isrowhiddenat: function (d) { if (d == null) { return null } d = this.getrowvisibleindex(d); if (this.rows.records[d]) { return this.rows.records[d].hidden } }, _setrowvisibility: function (d, f, e) { if (d == null) { return false } this.hiddens[d] = f; if (e == undefined || e) { this.rendergridcontent(true); return true } return false }, _loadrows: function () { if (!this._pageviews[this.dataview.pagenum] && !this.pageable) { return } var p = !this.pageable ? this._pageviews[this.dataview.pagenum].top : 0; if (!this.pageable && this._pagescache[this.dataview.pagenum] != undefined) { return null } if (!this.virtualsizeinfo) { return } var t = this.that; var l = new Array(); var q = new Array(); var e = t.groupable && t.groups.length > 0; var j = this.dataview.totalrecords; var o = this.virtualsizeinfo.virtualheight; var s = 0; this.rows.beginupdate(); var f = this.dataview.pagesize; if (this.pageable && e) { f = this.dataview.rows.length } for (var g = 0; g < f; g++) { if (g >= this.dataview.rows.length) { break } var k = this.dataview.rows[g]; var u = null; if (!t.rows.records[k.visibleindex]) { u = new a(t, k) } else { u = t.rows.records[k.visibleindex]; u.setdata(k) } u.hidden = this.hiddens[u.visibleindex]; if (this.rowdetailstemplate) { u.rowdetails = this.rowdetailstemplate.rowdetails; u.rowdetailsheight = this.rowdetailstemplate.rowdetailsheight; u.rowdetailshidden = this.rowdetailstemplate.rowdetailshidden } var d = this.details[u.visibleindex]; if (d) { u.rowdetails = d.rowdetails; u.rowdetailsheight = d.rowdetailsheight; u.rowdetailshidden = d.rowdetailshidden } else { if (!this.rowdetailstemplate) { u.rowdetails = null } } if (e && this.pageable && u.parentbounddata != null) { var r = l[u.parentbounddata.uniqueid]; if (r != null) { var n = this._findgroupstate(r.uniqueid); if (this._setsubgroupsvisibility) { this._setsubgroupsvisibility(this, u.parentbounddata, !n, false) } u.hidden = this.hiddens[u.visibleindex] } if (r != null && r != undefined) { u.parentrow = r; r.subrows[r.subrows.length++] = u } } if (u.hidden) { continue } var h = k.visibleindex; if (!this.heights[h]) { this.heights[h] = this.rowsheight } u.height = this.heights[h]; if (this.rowdetails) { if (u.rowdetails && !u.rowdetailshidden) { u.height += u.rowdetailsheight } } l[u.uniqueid] = u; q[s++] = u; u.top = p; p += u.height; var m = h; t.rows.replace(m, u) } if ((this.autoheight || this.pageable) && this.autorowheight) { if (this._pageviews && this._pageviews.length > 0) { this._pageviews[0].height = p } } this.rows.resumeupdate(); if (q.length > 0) { this._pagescache[this.dataview.pagenum] = q } }, _gettableheight: function () { if (this.tableheight != undefined) { return this.tableheight } var e = this.host.height(); if (this.columnsheader) { var d = this.columnsheader.outerHeight(); if (!this.showheader) { d = 0 } } e -= d; if (this.hScrollBar[0].style.visibility == "visible") { e -= this.hScrollBar.outerHeight() } if (this.pageable) { e -= this.pager.outerHeight() } if (this._groupsheader()) { e -= this.groupsheader.outerHeight() } if (this.showtoolbar) { e -= this.toolbarheight } if (this.showstatusbar) { e -= this.statusbarheight } if (e > 0) { this.tableheight = e; return e } return this.host.height() }, _getpagesize: function () { if (this.pageable) { return this.pagesize } if (this.virtualmode) { var e = Math.round(this.host.height()) + 2 * this.rowsheight; var d = Math.round(e / this.rowsheight); return d } if (this.autoheight || this.autorowheight) { if (this.dataview.totalrows == 0) { return 1 } return this.dataview.totalrows } if (this.dataview.totalrows < 100 && this.dataview.totalrecords < 100 && this.dataview.totalrows > 0) { return this.dataview.totalrows } return 100 }, _calculatevirtualheight: function () { var n = this.that; var e = Math.round(this.host.height()) + 2 * this.rowsheight; realheight = this._gettableheight(); var p = Math.round(e / this.rowsheight); this.heights = new Array(); this.hiddens = new Array(); this.details = new Array(); this.expandedgroups = new Array(); this.hiddenboundrows = new Array(); this.heightboundrows = new Array(); this.detailboundrows = new Array(); var h = Math.max(this.dataview.totalrows, this.dataview.totalrecords); if (this.pageable) { h = this.pagesize; if (this.pagesize > Math.max(this.dataview.totalrows, this.dataview.totalrecords) && this.autoheight) { h = Math.max(this.dataview.totalrows, this.dataview.totalrecords) } else { if (!this.autoheight) { if (this.dataview.totalrows < this.pagesize) { h = Math.max(this.dataview.totalrows, this.dataview.totalrecords) } } } } var l = h * this.rowsheight; var m = 0; var j = 0; var k = 0; var f = this._getpagesize(); var d = f * this.rowsheight; var g = 0; if (!this.pageable && this.autoheight) { p = h } if (h + f > 0) { while (g <= h + f) { m += d; if (g - f < h && g >= h) { var o = g - h; if (o > 0) { k -= d; this._pageviews[j - 1] = { top: k, height: d - o * this.rowsheight } } break } else { this._pageviews[j++] = { top: k, height: d } } k = m; g += f } } if (this.resizingGrid != true) { this.vScrollBar.jqxScrollBar({ value: 0 }) } if (l > realheight && !this.autoheight) { this.vScrollBar.css("visibility", "visible"); if (this.scrollmode == "deferred") { this.vScrollBar.jqxScrollBar({ max: l }) } else { this.vScrollBar.jqxScrollBar({ max: l - realheight }) } } else { this.vScrollBar.css("visibility", "hidden") } this.dataview.pagesize = f; this.dataview.updateview(); return { visiblerecords: p, virtualheight: l } }, _updatepageviews: function () { if (this.updating()) { return } this._pagescache = new Array(); this._pageviews = new Array(); this.tableheight = null; var u = this.that; var d = Math.round(this.host.height()) + 2 * this.rowsheight; var v = Math.round(d / this.rowsheight); var n = Math.max(this.dataview.totalrows, this.dataview.totalrecords); var q = n * this.rowsheight; var t = 0; var f = 0; var o = 0; var p = 0; var j = 0; var h = this._getpagesize(); if (!this.pageable) { for (var m = 0; m < n; m++) { var s = { index: m, height: this.heights[m], hidden: this.hiddens[m], details: this.details[m] }; if (this.heights[m] == undefined) { this.heights[m] = this.rowsheight; s.height = this.rowsheight } if (this.hiddens[m] == undefined) { this.hiddens[m] = false; s.hidden = false } if (this.details[m] == undefined) { this.details[m] = null } if (s.height != u.rowsheight) { q -= u.rowsheight; q += s.height } if (s.hidden) { q -= s.height } else { f += s.height; var l = 0; if (this.rowdetails) { if (this.rowdetailstemplate) { if (!s.details) { s.details = this.rowdetailstemplate } } if (s.details && s.details.rowdetails && !s.details.rowdetailshidden) { l = s.details.rowdetailsheight; f += l; q += l } } t += s.height + l } j++; if (j >= h || m == n - 1) { this._pageviews[o++] = { top: p, height: f }; f = 0; p = t; j = 0 } } } else { if (this._updatepagedview) { q = this._updatepagedview(n, q, 0) } if (this.autoheight) { this._arrange() } } var e = this._gettableheight(); if (q > e) { if (this.pageable && this.gotopage) { q = this._pageviews[0].height; if (q < 0) { q = this._pageviews[0].height } } if (this.vScrollBar.css("visibility") != "visible") { this.vScrollBar.css("visibility", "visible") } if (q <= e || this.autoheight) { this.vScrollBar.css("visibility", "hidden") } if (q - e > 0) { if (this.scrollmode != "deferred") { var r = q - e; var g = this.vScrollInstance.max; this.vScrollBar.jqxScrollBar({ max: r }); if (r != g) { this.vScrollBar.jqxScrollBar({ value: 0 }) } } } else { this.vScrollBar.jqxScrollBar({ value: 0, max: q }) } } else { if (!this._loading) { this.vScrollBar.css("visibility", "hidden") } this.vScrollBar.jqxScrollBar({ value: 0 }) } this._arrange(); if (this.autoheight) { v = Math.round(this.host.height() / this.rowsheight) } this.virtualsizeinfo = { visiblerecords: v, virtualheight: q } }, updatebounddata: function (d) { if (d != "data" && d != "sort" && d != "filter" && d != "cells" && d != "pagechanged" && d != "pagesizechanged" && !this.virtualmode) { this.virtualsizeinfo = null; if (this.showfilterrow && this.filterable && this.filterrow) { if (this.clearfilters) { this.clearfilters(false) } this.filterrow.remove(); this._filterrowcache = new Array(); this.filterrow = null } else { if (this.filterable) { if (this.clearfilters) { this.clearfilters(false) } } } if (this.groupable) { this.dataview.groups = []; this.groups = [] } if (this.pageable) { this.pagenum = 0; this.dataview.pagenum = 0 } if (this.sortable) { this.sortcolumn = null; this.sortdirection = ""; this.dataview.sortfielddirection = ""; this.dataview.clearsortdata() } } this.databind(this.source, d) }, refreshdata: function () { this._refreshdataview(); this.render() }, _updatevscrollbarmax: function () { if (this._pageviews && this._pageviews.length > 0) { var f = this._pageviews[0].height; if (this.virtualmode || !this.pageable) { f = this.virtualsizeinfo.virtualheight } var e = this._gettableheight(); if (f > e) { if (this.pageable && this.gotopage) { f = this._pageviews[0].height; if (f < 0) { f = this._pageviews[0].height } } if (this.vScrollBar.css("visibility") != "visible") { this.vScrollBar.css("visibility", "visible") } if (f <= e || this.autoheight) { this.vScrollBar.css("visibility", "hidden") } if (f - e > 0) { var d = f - e; this.vScrollBar.jqxScrollBar({ max: d }) } else { this.vScrollBar.jqxScrollBar({ value: 0, max: f }) } } else { this.vScrollBar.css("visibility", "hidden"); this.vScrollBar.jqxScrollBar({ value: 0 }) } } }, _refreshdataview: function () { this.dataview.refresh() }, refresh: function (d) { if (d != true) { if (b.jqx.isHidden(this.host)) { return } if (this.virtualsizeinfo != null) { this._cellscache = new Array(); this._renderrows(this.virtualsizeinfo); this._updatesize() } } }, render: function () { this._render(true, true, true, true) }, invalidate: function () { if (this.virtualsizeinfo) { this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo) } }, clear: function () { this.databind(null); this.render() }, _preparecolumngroups: function () { var o = this.columnsheight; if (this.columngroups) { this.columnshierarchy = new Array(); if (this.columngroups.length) { var n = this; for (var h = 0; h < this.columngroups.length; h++) { this.columngroups[h].parent = null; this.columngroups[h].groups = null } for (var h = 0; h < this.columns.records.length; h++) { this.columns.records[h].parent = null; this.columns.records[h].groups = null } var p = function (j) { for (var u = 0; u < n.columngroups.length; u++) { var v = n.columngroups[u]; if (v.name === j) { return v } } return null }; for (var h = 0; h < this.columngroups.length; h++) { var q = this.columngroups[h]; if (!q.groups) { q.groups = null } if (q.parentgroup) { var s = p(q.parentgroup); if (s) { q.parent = s; if (!s.groups) { s.groups = new Array() } if (s.groups.indexOf(q) === -1) { s.groups.push(q) } } } } for (var h = 0; h < this.columns.records.length; h++) { var q = this.columns.records[h]; if (q.columngroup) { var s = p(q.columngroup); if (s) { if (!s.groups) { s.groups = new Array() } q.parent = s; if (s.groups.indexOf(q) === -1) { s.groups.push(q) } } } } var r = 0; for (var h = 0; h < this.columns.records.length; h++) { var q = this.columns.records[h]; var e = q; q.level = 0; while (e.parent) { e = e.parent; q.level++ } var e = q; var d = q.level; r = Math.max(r, q.level); while (e.parent) { e = e.parent; if (e) { e.level = --d } } } var m = function (y) { var x = new Array(); if (y.columngroup) { x.push(y) } if (y.groups) { for (var w = 0; w < y.groups.length; w++) { if (y.groups[w].columngroup) { x.push(y.groups[w]) } else { if (y.groups[w].groups) { var v = m(y.groups[w]); for (var u = 0; u < v.length; u++) { x.push(v[u]) } } } } } return x }; for (var h = 0; h < this.columngroups.length; h++) { var q = this.columngroups[h]; var f = m(q); q.columns = f; var k = new Array(); var t = 0; for (var g = 0; g < f.length; g++) { k.push(this.columns.records.indexOf(f[g])); if (f[g].pinned) { t++ } } if (t != 0) { throw new Error("jqxGrid: Column Groups initialization Error. Please, check the initialization of the jqxGrid's columns array. The columns in a column group cannot be pinned.") } k.sort(function (j, i) { j = parseInt(j); i = parseInt(i); if (j < i) { return -1 } if (j > i) { return 1 } return 0 }); for (var l = 1; l < k.length; l++) { if (k[l] != k[l - 1] + 1) { throw new Error("jqxGrid: Column Groups initialization Error. Please, check the initialization of the jqxGrid's columns array. The columns in a column group are expected to be siblings in the columns array."); this.host.remove() } } } } this.columngroupslevel = 1 + r; o = this.columngroupslevel * this.columnsheight } return o }, _render: function (h, j, g, d, f) { if (this.dataview == null) { return } if (this._loading) { return } if (this._batchupdate) { return } if (b.jqx.isHidden(this.host)) { var i = this; if (i.___hiddenTimer) { clearInterval(i.___hiddenTimer); i.___hiddenTimer = null } this.___hiddenTimer = setInterval(function () { if (!b.jqx.isHidden(i.host)) { clearInterval(i.___hiddenTimer); i.render() } }, 300); return } if (this.editcell != null && this.endcelledit) { this.endcelledit(this.editcell.row, this.editcell.column, true, false) } this.validationpopup = null; this._removeHandlers(); this._addHandlers(); this._initializeRows(); this._requiresupdate = j != undefined ? j : true; this._newmax = null; if (g) { if (!this._requiresupdate) { if (d != false) { this._initmenu() } } if (this.columns == null) { this.columns = new b.jqx.collection(this.element) } else { this._initializeColumns() } } this.tableheight = null; this._pagescache = new Array(); this._pageviews = new Array(); this.visiblerows = new Array(); this.hittestinfo = new Array(); if (this._requiresupdate) { this._clearcaches(); if (d == true) { this._initmenu() } } this.virtualsizeinfo = null; this.prerenderrequired = true; if ((this.groupable && this.groups.length > 0 && this.rowdetails) || (this.rowdetails)) { if (this.gridcontent) { this._rowdetailscache = new Array(); this._rowdetailselementscache = new Array(); this.detailboundrows = new Array(); this.details = new Array(); b.jqx.utilities.html(this.gridcontent, ""); this.gridcontent = null } } if (this.gridcontent) { if (this.editable && this._destroyeditors) { this._destroyeditors() } } if (g) { if (this.filterrow) { this.filterrow.detach() } b.jqx.utilities.html(this.content, ""); this.columnsheader = this.columnsheader || b('<div style="overflow: hidden;"></div>'); this.columnsheader.remove(); this.columnsheader.addClass(this.toTP("jqx-widget-header")); this.columnsheader.addClass(this.toTP("jqx-grid-header")) } else { if (this.gridcontent) { b.jqx.utilities.html(this.gridcontent, "") } } if (!this.showheader) { this.columnsheader.css("display", "none") } else { if (this.columnsheader) { this.columnsheader.css("display", "block") } } this.gridcontent = this.gridcontent || b('<div style="width: 100%; overflow: hidden; position: absolute;"></div>'); this.gridcontent.remove(); var e = this.columnsheight; e = this._preparecolumngroups(); if (this.showfilterrow && this.filterable) { this.columnsheader.height(e + this.filterrowheight) } else { this.columnsheader.height(e) } this.content.append(this.columnsheader); this.content.append(this.gridcontent); this._arrange(); if (this._initgroupsheader) { this._initgroupsheader() } this.selectionarea = this.selectionarea || b("<div style='z-index: 99999; visibility: hidden; position: absolute;'></div>"); this.selectionarea.addClass(this.toThemeProperty("jqx-grid-selectionarea")); this.selectionarea.addClass(this.toThemeProperty("jqx-fill-state-pressed")); this.content.append(this.selectionarea); this.tableheight = null; this.rendergridcontent(false, g); if (this.groups.length > 0 && this.groupable) { var k = this.vScrollBar[0].style.visibility; this.suspendgroupevents = true; if (this.collapseallgroups) { if (!this.groupsexpandedbydefault) { this.collapseallgroups(false); this._updatescrollbarsafterrowsprerender() } else { this.expandallgroups(false) } } if (this.vScrollBar[0].style.visibility != k) { this._updatecolumnwidths(); this._updatecellwidths() } this.suspendgroupevents = false } if (this.pageable && this.updatepagerdetails) { this.updatepagerdetails(); if (this.autoheight) { this._updatepageviews() } if (this.autorowheight) { if (!this.autoheight) { this._updatepageviews() } this._renderrows(this.virtualsizeinfo) } } if (this.showaggregates && this._updateaggregates) { this._updateaggregates() } this._addoverlayelement(); if (this.scrollmode == "deferred") { this._addscrollelement() } if (this.showfilterrow && this.filterable && this.filterrow && (f == undefined || f == true)) { this._updatelistfilters(!g) } if (this.rendered) { this.rendered("full") } this.__isRendered = true }, _addoverlayelement: function () { if (this.autoheight) { if (this._overlayElement) { this._overlayElement.remove() } this._updateTouchScrolling(); return } var d = b.jqx.utilities.getBrowser(); if ((d.browser == "msie" && parseInt(d.version) < 9) || this.isTouchDevice()) { if (this._overlayElement) { this._overlayElement.remove() } this._overlayElement = b("<div style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>"); this._overlayElement.css("background", "white"); this._overlayElement.css("z-index", 18000); this._overlayElement.css("opacity", 0.001); if (this.isTouchDevice()) { if (this.vScrollBar.css("visibility") !== "hidden" || this.hScrollBar.css("visibility") !== "hidden") { var e = 0; if (this.selectionmode == "checkbox") { e += 30 } if (this.groupable || this.rowdetails) { this._overlayElement.css("left", 30 * (this.groups.length + (this.rowdetails ? 1 : 0))) } var f = this._overlayElement.css("left"); this._overlayElement.css("left", f + e) } else { if (this._overlayElement) { this._overlayElement.remove() } } } else { this.content.prepend(this._overlayElement) } } this._updateTouchScrolling() }, _addscrollelement: function () { if (this._scrollelement) { this._scrollelement.remove() } if (this._scrollelementoverlay) { this._scrollelementoverlay.remove() } this._scrollelementoverlay = b("<div style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>"); this._scrollelementoverlay.css("background", "black"); this._scrollelementoverlay.css("z-index", 18000); this._scrollelementoverlay.css("opacity", 0.1); this._scrollelement = b("<span style='visibility: hidden; top: 50%; right: 10px; position: absolute;'></span>"); this._scrollelement.css("z-index", 18005); this._scrollelement.addClass(this.toThemeProperty("jqx-button")); this._scrollelement.addClass(this.toThemeProperty("jqx-fill-state-normal")); this._scrollelement.addClass(this.toThemeProperty("jqx-rc-all")); this._scrollelement.addClass(this.toThemeProperty("jqx-shadow")); this.content.prepend(this._scrollelement); this.content.prepend(this._scrollelementoverlay) }, rendergridcontent: function (d, f) { if (this.updating()) { return false } if (d == undefined || d == null) { d = false } this._requiresupdate = d; var h = this.prerenderrequired; if (this.prerenderrequired) { this._arrange() } var g = this.that; var f = f; if (f == null || f == undefined) { f = true } this.tableheight = null; g.virtualsizeinfo = g.virtualsizeinfo || g._calculatevirtualheight(); if (g.pageable && !g.autoheight) { if (g.dataview.totalrows < g.pagesize) { g._requiresupdate = true } } if (f) { g._rendercolumnheaders() } else { if (this._rendersortcolumn) { this._rendersortcolumn() } if (this._renderfiltercolumn) { this._renderfiltercolumn() } } g._renderrows(g.virtualsizeinfo); if (this.gridcontent) { if (this.gridcontent[0].scrollTop != 0) { this.gridcontent[0].scrollTop = 0 } if (this.gridcontent[0].scrollLeft != 0) { this.gridcontent[0].scrollLeft = 0 } } if (h) { var e = this.tableheight; this._arrange(); if (e != this.tableheight && this.autoheight) { g._renderrows(g.virtualsizeinfo) } } if (this.rtl) { this._renderhorizontalscroll() } if (this.autosavestate) { if (this.initializedcall != null) { if (this.savestate) { this.savestate() } } } return true }, _updatecolumnwidths: function () { var l = this.host.width(); var e = l; var k = ""; if (this.columns == undefined || this.columns.records == undefined) { return } var n = this.that; var g = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth; b.each(this.columns.records, function (p, q) { if (!(this.hidden && this.hideable)) { if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { var q = 0; var r = n.vScrollBar[0].style.visibility == "hidden" ? 0 : n.scrollbarsize + 5; if (n.scrollbarautoshow) { r = 0 } var o = e; q = parseFloat(this.width) * o / 100; r += g; if (this._percentagewidth != undefined) { q = parseFloat(this._percentagewidth) * (o - r) / 100 } if (q < this.minwidth && this.minwidth != "auto") { q = this.minwidth } if (q > this.maxwidth && this.maxwidth != "auto") { q = this.maxwidth } l -= q } else { if (this.width != "auto" && !this._width) { l -= this.width } else { k += this.text } } } }); var f = this._gettableheight(); if (!this.autoheight) { if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > f) { if (this.groupable && this.groups.length > 0) { if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) { var m = this.dataview.loadedrootgroups.length * this.rowsheight; if (this.pageable) { for (var d = 0; d < this.dataview.rows.length; d++) { if (this.dataview.rows[d].group && this.dataview.rows[d].level === 0) { m += this.rowsheight } } } if (m > f) { l -= this.scrollbarsize + 5; e -= this.scrollbarsize + 5 } else { if (this.vScrollBar.css("visibility") == "visible") { l -= this.scrollbarsize + 5; e -= this.scrollbarsize + 5 } } } else { l -= this.scrollbarsize + 5; e -= this.scrollbarsize + 5 } } else { l -= this.scrollbarsize + 5; e -= this.scrollbarsize + 5 } } } var g = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth; e -= g; if (!this.columnsheader) { return } var i = this.columnsheader.find("#columntable" + this.element.id); if (i.length == 0) { return } var j = i.find(".jqx-grid-column-header"); var h = 0; b.each(this.columns.records, function (p, t) { var r = b(j[p]); var o = false; var s = this.width; if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { if (this._percentagewidth != undefined) { s = parseFloat(this._percentagewidth) * e / 100 } else { s = parseFloat(this.width) * e / 100 } o = true } if (this.width != "auto" && !this._width && !o) { if (parseInt(r[0].style.width) != this.width) { r.width(this.width) } } else { if (o) { if (s < this.minwidth && this.minwidth != "auto") { s = this.minwidth; this.width = s } if (s > this.maxwidth && this.maxwidth != "auto") { s = this.maxwidth; this.width = s } if (parseInt(r[0].style.width) != s) { r.width(s); this.width = s } } else { var q = Math.floor(l * (this.text.length / k.length)); if (isNaN(q)) { q = this.minwidth } if (q < 0) { $element = b("<span>" + this.text + "</span>"); b(document.body).append($element); q = 10 + $element.width(); $element.remove() } if (q < this.minwidth) { q = this.minwidth } if (q > this.maxwidth) { q = this.maxwidth } this._width = "auto"; this.width = q; r.width(this.width) } } if (parseInt(r[0].style.left) != h) { r.css("left", h) } if (!(this.hidden && this.hideable)) { h += this.width } this._requirewidthupdate = true }); this.columnsheader.width(2 + h); i.width(this.columnsheader.width()); if (h == 0) { this.columnsheader[0].style.visibility = "hidden" } else { this.columnsheader[0].style.visibility = "inherit" } this._resizecolumngroups(); if (this.showfilterrow && this.filterrow) { this.filterrow.width(this.columnsheader.width()); this._updatefilterrowui() } if (this.autowidth) { this._arrange() } }, _rendercolumnheaders: function () { var u = this.that; if (!this.prerenderrequired) { if (this._rendersortcolumn) { this._rendersortcolumn() } if (this._renderfiltercolumn) { this._renderfiltercolumn() } if (this.showfilterrow && this.filterrow) { this.filterrow.width(this.columnsheader.width()); this._updatefilterrowui() } return } this._columnsbydatafield = new Array(); this.columnsheader.find("#columntable" + this.element.id).remove(); var l = b('<div id="columntable' + this.element.id + '" style="height: 100%; position: relative;"></div>'); l[0].cells = new Array(); var x = 0; var f = 0; var r = ""; var C = this.host.width(); var n = C; var e = new Array(); var w = new Array(); var o = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth; b.each(this.columns.records, function (j, k) { if (!(this.hidden && this.hideable)) { if (this.width != "auto" && !this._width) { if (this.width < this.minwidth && this.minwidth != "auto") { C -= this.minwidth } else { if (this.width > this.maxwidth && this.maxwidth != "auto") { C -= this.maxwidth } else { if (this.width.toString().indexOf("%") != -1) { var k = 0; var p = u.vScrollBar[0].style.visibility == "hidden" ? 0 : u.scrollbarsize + 5; p += o; k = parseFloat(this.width) * (n - p) / 100; if (k < this.minwidth && this.minwidth != "auto") { k = this.minwidth } if (k > this.maxwidth && this.maxwidth != "auto") { k = this.maxwidth } C -= k } else { if (typeof this.width == "string") { this.width = parseInt(this.width) } C -= this.width } } } } else { r += this.text } } if (this.pinned || this.grouped || this.checkboxcolumn) { if (u._haspinned) { this.pinned = true } e[e.length] = this } else { w[w.length] = this } }); if (!this.rtl) { for (var z = 0; z < e.length; z++) { this.columns.replace(z, e[z]) } for (var y = 0; y < w.length; y++) { this.columns.replace(e.length + y, w[y]) } } else { var v = 0; e.reverse(); for (var z = this.columns.records.length - 1; z >= this.columns.records.length - e.length; z--) { this.columns.replace(z, e[v++]) } for (var y = 0; y < w.length; y++) { this.columns.replace(y, w[y]) } } var h = this.headerZIndex; var m = u.groupable ? u.groups.length : 0; if (this.rowdetails && this.showrowdetailscolumn) { m++ } var g = u.columnsheader.height(); if (this.showfilterrow) { if (!this.columngroups) { g = this.columnsheight } else { g -= this.filterrowheight } } var s = this._gettableheight(); if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > s && !this.scrollbarautoshow) { if (this.groupable && this.groups.length > 0) { if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) { var A = 0; if (!this.pageable) { var A = this.dataview.loadedrootgroups.length * this.rowsheight } else { if (this.pageable) { for (var t = 0; t < this.dataview.rows.length; t++) { if (this.dataview.rows[t].group && this.dataview.rows[t].level === 0) { A += this.rowsheight } } } } if (A > s) { C -= this.scrollbarsize + 5; n -= this.scrollbarsize + 5 } } else { C -= this.scrollbarsize + 5; n -= this.scrollbarsize + 5 } } else { if (!this.autoheight) { C -= this.scrollbarsize + 5; n -= this.scrollbarsize + 5 } } } n -= o; var d = function (j, k) { var i = u.columngroupslevel * u.columnsheight; i = i - (k.level * u.columnsheight); return i }; b.each(this.columns.records, function (S, Q) { this.height = u.columnsheight; if (u.columngroups) { if (u.columngroups.length) { this.height = d(this.datafield, this); g = this.height } } var W = u.toTP("jqx-grid-column-header") + " " + u.toTP("jqx-widget-header"); if (u.rtl) { W += " " + u.toTP("jqx-grid-column-header-rtl") } var U = !u.rtl ? 150 + h - 1 : 150 + h + 1; var O = !u.rtl ? h-- : h++; var D = b('<div role="columnheader" style="z-index: ' + O + ';position: absolute; height: 100%;" class="' + W + '"><div style="height: 100%; width: 100%;"></div></div>'); if (u.columngroups) { D[0].style.height = g + "px"; D[0].style.bottom = "0px"; if (this.pinned) { D[0].style.zIndex = U } } this.uielement = D; if (this.classname != "" && this.classname) { D.addClass(this.classname) } var L = this.width; var M = false; if (this.width === null) { this.width = "auto" } if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { if (this._percentagewidth != undefined) { L = parseFloat(this._percentagewidth) * n / 100 } else { L = parseFloat(this.width) * n / 100 } M = true } if (this.width != "auto" && !this._width && !M) { if (L < this.minwidth && this.minwidth != "auto") { L = this.minwidth; this.width = L } if (L > this.maxwidth && this.maxwidth != "auto") { L = this.maxwidth; this.width = L } D[0].style.width = parseInt(L) + "px" } else { if (M) { if (L < this.minwidth && this.minwidth != "auto") { L = this.minwidth } if (L > this.maxwidth && this.maxwidth != "auto") { L = this.maxwidth } if (this._percentagewidth == undefined || this.width.toString().indexOf("%") != -1) { this._percentagewidth = this.width } D.width(L); this.width = L } else { if (!this.hidden) { var P = Math.floor(C * (this.text.length / r.length)); if (isNaN(P)) { P = this.minwidth } if (P < 0) { $element = b("<span>" + this.text + "</span>"); b(document.body).append($element); P = 10 + $element.width(); $element.remove() } if (P < this.minwidth) { P = this.minwidth } if (P > this.maxwidth) { P = this.maxwidth } this._width = "auto"; this.width = P; L = this.width; D.width(this.width) } } } if (this.hidden && this.hideable) { D.css("display", "none") } var p = b(D.children()[0]); var T = u.rtl ? u.toTP("jqx-grid-column-menubutton") + " " + u.toTP("jqx-grid-column-menubutton-rtl") : u.toTP("jqx-grid-column-menubutton"); T += " " + u.toTP("jqx-icon-arrow-down"); var G = b('<div style="height: ' + g + 'px; display: none; left: 100%; top: 0%; position: absolute;"><div class="' + T + '" style="width: 100%; height:100%;"></div></div>'); if (!u.enableanimations) { G.css("margin-left", -16) } if (u.rtl) { G.css("left", "0px") } this.columnsmenu = G[0]; l[0].cells[S] = D[0]; G[0].style.width = parseInt(u.columnsmenuwidth) + "px"; var F = u.columnsmenu; var q = false; var R = false; var N = (u.groupable && m > 0 && x < m) || (u.rowdetails && x < m); if (u.rtl) { N = (u.groupable && m > 0 && x < m) || (u.rowdetails && x < m); N &= S > u.columns.records.length - 1 - m } if (N) { x++; F &= false; this.sortable = false; this.editable = false; R = true } else { var I = this.renderer != null ? this.renderer(this.text, this.align, g) : u._rendercolumnheader(this.text, this.align, g, u); if (I == null) { I = u._rendercolumnheader(this.text, this.align, g, u) } if (this.renderer != null) { I = b(I) } F &= true; q = true } if (u.WinJS) { MSApp.execUnsafeLocalFunction(function () { p.append(b(I)) }) } else { if (this.renderer) { p.append(b(I)) } else { if (I) { p[0].innerHTML = I } } } if (I != null) { var K = b('<div class="iconscontainer" style="height: ' + g + 'px; margin-left: -32px; display: block; position: absolute; left: 100%; top: 0%; width: 32px;"><div class="filtericon ' + u.toTP("jqx-widget-header") + '" style="height: ' + g + 'px; float: right; display: none; width: 16px;"><div class="' + u.toTP("jqx-grid-column-filterbutton") + '" style="width: 100%; height:100%;"></div></div><div class="sortasc ' + u.toTP("jqx-widget-header") + '" style="height: ' + g + 'px; float: right; display: none; width: 16px;"><div class="' + u.toTP("jqx-grid-column-sortascbutton") + " " + u.toTP("jqx-icon-arrow-up") + '" style="width: 100%; height:100%;"></div></div><div class="sortdesc ' + u.toTP("jqx-widget-header") + '" style="height: ' + g + 'px; float: right; display: none; width: 16px;"><div class="' + u.toTP("jqx-grid-column-sortdescbutton") + " " + u.toTP("jqx-icon-arrow-down") + '" style="width: 100%; height:100%;"></div></div></div>'); G.addClass(u.toTP("jqx-widget-header")); p.append(K); var X = K.children(); this.sortasc = X[1]; this.sortdesc = X[2]; this.filtericon = X[0]; this.iconscontainer = K; if (u.rtl) { K.css("margin-left", "0px"); K.css("left", "0px"); b(this.sortasc).css("float", "left"); b(this.filtericon).css("float", "left"); b(this.sortdesc).css("float", "left") } if (!u.autoshowfiltericon && this.filterable) { b(this.filtericon).css("display", "block") } } if (F) { u._handlecolumnsmenu(u, p, D, G, this); if (!this.menu) { G.hide() } } l.append(D); if (u.groupable && q) { D[0].id = u.dataview.generatekey(); if (u._handlecolumnstogroupsdragdrop) { u._handlecolumnstogroupsdragdrop(this, D) } else { throw new Error("jqxGrid: Missing reference to jqxgrid.grouping.js.") } } if (u.columnsreorder && this.draggable && u._handlecolumnsdragreorder) { u._handlecolumnsdragreorder(this, D) } var V = this; u.addHandler(D, "click", function (i) { if (V.checkboxcolumn) { return true } if (u.sorttogglestates > 0 && u._togglesort) { if (!u._loading) { u._togglesort(V) } } i.preventDefault(); u._raiseEvent(7, { column: V.getcolumnproperties(), datafield: V.datafield, originalEvent: i }) }); if (V.resizable && u.columnsresize && !R) { var E = false; var j = "mousemove"; if (u.isTouchDevice() && u.touchmode !== true) { E = true; j = b.jqx.mobile.getTouchEventName("touchstart") } u.addHandler(D, j, function (Y) { var i = parseInt(Y.pageX); var aa = 5; var ad = parseInt(D.coord().left); if (u.hasTransform) { ad = b.jqx.utilities.getOffset(D).left } if (u.resizing) { return true } if (u._handlecolumnsresize) { if (E) { var Z = u.getTouches(Y); var ac = Z[0]; i = ac.pageX; aa = 40; if (i >= ad + V.width - aa) { u.resizablecolumn = { columnelement: D, column: V }; D.css("cursor", "col-resize") } else { D.css("cursor", ""); u.resizablecolumn = null } return true } var ab = V.width; if (u.rtl) { ab = 0 } if (i >= ad + ab - aa) { if (i <= ad + ab + aa) { u.resizablecolumn = { columnelement: D, column: V }; D.css("cursor", "col-resize"); return false } else { D.css("cursor", ""); u.resizablecolumn = null } } else { D.css("cursor", ""); if (i < ad + ab - aa) { if (!V._animating && !V._menuvisible) { D.mouseenter() } } u.resizablecolumn = null } } }) } D.css("left", f); if (!(this.hidden && this.hideable)) { f += L } if (V.rendered) { var J = V.rendered(b(p[0].firstChild), V.align, g); if (J && K != null) { K.hide() } } if (V.checkboxcolumn) { if (K) { K.hide() } if (!u.host.jqxCheckBox) { throw new Error("jqxGrid: Missing reference to jqxcheckbox.js") } p.html('<div style="cursor: pointer; margin-left: 5px; top: 50%; margin-top: -8px; position: relative;"></div>'); var k = p.find("div:first"); k.jqxCheckBox({ _canFocus: false, disabled: u.disabled, disabledContainer: true, theme: u.theme, enableContainerClick: false, width: 16, height: 16, animationShowDelay: 0, animationHideDelay: 0 }); V.checkboxelement = k; var H = k.data().jqxCheckBox.instance; u._checkboxcolumn = V; H.updated = function (Y, i, Z) { u._checkboxcolumnupdating = true; if (u.disabled) { k.jqxCheckBox({ disabled: u.disabled }); i = Z } if (i) { u.selectallrows() } else { u.unselectallrows() } u._checkboxcolumnupdating = false } } }); if (f > 0) { this.columnsheader.width(2 + f) } else { this.columnsheader.width(f) } this.columnsrow = l; u.columnsheader.append(l); if (this.showfilterrow && this._updatefilterrow) { if (!this.columngroups) { l.height(this.columnsheight) } else { l.height(this.columngroupslevel * this.columnsheight) } if (!this.filterrow) { var B = b("<div></div>"); B[0].id = "filterrow." + this.element.id; B.height(this.filterrowheight); this.filterrow = B } this.filterrow.width(2 + f); this.columnsheader.append(this.filterrow); this._updatefilterrow() } if (f == 0) { l[0].style.visibility = "hidden" } else { l[0].style.visibility = "inherit" } l.width(f); if (this._handlecolumnsdragdrop) { this._handlecolumnsdragdrop() } if (this._handlecolumnsreorder) { this._handlecolumnsreorder() } if (this._rendersortcolumn) { this._rendersortcolumn() } if (this._renderfiltercolumn) { this._renderfiltercolumn() } if (this._handlecolumnsresize) { this._handlecolumnsresize() } if (this.columngroups) { this._rendercolumngroups() } if (this._updatecheckboxselection) { this._updatecheckboxselection() } }, _rendercolumngroups: function () { if (!this.columngroups) { return } var p = 0; for (var m = 0; m < this.columns.records.length; m++) { if (this.columns.records[m].pinned) { p++ } } var u = this.headerZIndex - p + this.columns.records.length; var v = this.that; var h = v.toTP("jqx-grid-column-header") + " " + v.toTP("jqx-grid-columngroup-header") + " " + v.toTP("jqx-widget-header"); if (v.rtl) { h += " " + v.toTP("jqx-grid-columngroup-header-rtl") } var f = this.columnsheader.find("#columntable" + this.element.id); f.find("jqx-grid-columngroup-header").remove(); for (var k = 0; k < this.columngroupslevel - 1; k++) { for (var m = 0; m < this.columngroups.length; m++) { var r = this.columngroups[m]; var d = r.level; if (d !== k) { continue } var q = d * this.columnsheight; var e = 99999; if (r.groups) { var t = function (y) { var x = 0; for (var w = 0; w < y.groups.length; w++) { var i = y.groups[w]; if (!i.groups) { if (!i.hidden) { x += i.width; e = Math.min(parseFloat(i.element.style.left), e) } } else { x += t(i) } } return x }; r.width = t(r); r.left = e; var s = this.columnsheight; var n = u--; var g = b('<div role="columnheader" style="z-index: ' + n + ';position: absolute;" class="' + h + '"></div>'); var l = b(this._rendercolumnheader(r.text, r.align, this.columnsheight, this)); if (r.renderer) { var l = b("<div style='height: 100%; width: 100%;'></div>"); var o = r.renderer(r.text, r.align, s); l.html(o) } g.append(l); g[0].style.left = e + "px"; if (e === 0) { g[0].style.borderLeftColor = "transparent" } g[0].style.top = q + "px"; g[0].style.height = s + "px"; g[0].style.width = -1 + r.width + "px"; f.append(g); r.element = g; if (r.rendered) { r.rendered(l, r.align, s) } } } } }, _resizecolumngroups: function () { if (!this.columngroups) { return } for (var e = 0; e < this.columngroups.length; e++) { var k = this.columngroups[e]; var l = k.level; var j = l * this.columnsheight; var h = 99999; if (k.groups) { var g = function (o) { var n = 0; for (var m = 0; m < o.groups.length; m++) { var i = o.groups[m]; if (!i.groups) { if (!i.hidden) { n += i.width; h = Math.min(parseFloat(i.element.style.left), h) } } else { n += g(i) } } return n }; k.width = g(k); k.left = h; var d = this.columnsheight; var f = k.element; f[0].style.left = h + "px"; f[0].style.top = j + "px"; f[0].style.height = d + "px"; f[0].style.width = -1 + k.width + "px" } } }, _handlecolumnsmenu: function (p, g, h, k, m) { p.dragmousedown = null; k[0].id = p.dataview.generatekey(); g.append(k); h[0].columnsmenu = k[0]; m.element = h[0]; var l = this.columnsmenuwidth + 1; var o = function () { if (!m.menu) { return false } if (!p.resizing) { if (m._menuvisible && p._hasOpenedMenu) { return false } m._animating = true; if (p.menuitemsarray && p.menuitemsarray.length > 0) { if (!p.enableanimations) { k.css("display", "block"); var q = !p.rtl ? -48 : 16; m.iconscontainer.css("margin-left", q + "px"); m._animating = false; m._menuvisible = true } else { k.css("display", "block"); k.stop(); m.iconscontainer.stop(); if (!p.rtl) { k.css("margin-left", "0px"); k.animate({ "margin-left": -l }, "fast", function () { k.css("display", "block"); m._animating = false; m._menuvisible = true }) } else { k.css("margin-left", -l); k.animate({ "margin-left": "0px" }, "fast", function () { k.css("display", "block"); m._animating = false; m._menuvisible = true }) } var q = !p.rtl ? -(32 + l) : l; m.iconscontainer.animate({ "margin-left": q }, "fast") } } } }; var f = "mouseenter"; if (p.isTouchDevice()) { f = "touchstart" } p.addHandler(h, f, function (r) { var q = parseInt(r.pageX); var t = p.columnsresize && m.resizable ? 3 : 0; var v = parseInt(h.coord().left); if (p.hasTransform) { v = b.jqx.utilities.getOffset(h).left } var u = m.width; if (p.rtl) { u = 0 } if (t != 0) { if (q >= v + u - t) { if (q <= v + u + t) { return false } } } var s = p.vScrollInstance.isScrolling(); if (m.menu && p.autoshowcolumnsmenubutton && !s && !p.disabled) { o() } }); if (!p.autoshowcolumnsmenubutton) { k.css("display", "block"); var e = !p.rtl ? -48 : 16; m.iconscontainer.css("margin-left", e + "px"); if (!p.rtl) { k.css({ "margin-left": -l }) } else { k.css({ "margin-left": "0px" }) } } p.addHandler(h, "mouseleave", function (q) { if (p.menuitemsarray && p.menuitemsarray.length > 0 && m.menu) { var s = b.data(document.body, "contextmenu" + p.element.id); if (s != undefined && k[0].id == s.columnsmenu.id) { return } if (p.autoshowcolumnsmenubutton) { if (!p.enableanimations) { k.css("display", "none"); var r = !p.rtl ? -32 : 0; m.iconscontainer.css("margin-left", r + "px"); m._menuvisible = false } else { if (!p.rtl) { k.css("margin-left", -l) } else { k.css("margin-left", "0px") } k.stop(); m.iconscontainer.stop(); if (!p.rtl) { k.animate({ "margin-left": 0 }, "fast", function () { k.css("display", "none"); m._menuvisible = false }) } else { k.animate({ "margin-left": -l }, "fast", function () { k.css("display", "none"); m._menuvisible = false }) } var r = !p.rtl ? -32 : 0; m.iconscontainer.animate({ "margin-left": r }, "fast") } } } }); var j = true; var d = ""; var i = b(m.filtericon); p.addHandler(k, "mousedown", function (q) { if (!p.gridmenu) { p._initmenu() } j = !b.data(p.gridmenu[0], "contextMenuOpened" + p.gridmenu[0].id); d = b.data(document.body, "contextmenu" + p.element.id); if (d != null) { d = d.column.datafield } }); p.addHandler(i, "mousedown", function (q) { if (!p.gridmenu) { p._initmenu() } j = !b.data(p.gridmenu[0], "contextMenuOpened" + p.gridmenu[0].id); d = b.data(document.body, "contextmenu" + p.element.id); if (d != null) { d = d.column.datafield } }); var n = function () { if (!m.menu) { return false } if (!p.gridmenu) { p._initmenu() } if (p.disabled) { return false } for (var v = 0; v < p.columns.records.length; v++) { if (p.columns.records[v].datafield != m.datafield) { p.columns.records[v]._menuvisible = false } } var t = k.coord(true); var A = k.height(); if (!j) { j = true; if (d == m.datafield) { p._closemenu(); return false } } var x = p.host.coord(true); if (p.hasTransform) { x = b.jqx.utilities.getOffset(p.host); t = b.jqx.utilities.getOffset(k) } if (x.left + p.host.width() > parseInt(t.left) + p.gridmenu.width()) { p.gridmenu.jqxMenu("open", t.left, t.top + A) } else { p.gridmenu.jqxMenu("open", k.width() + t.left - p.gridmenu.width(), t.top + A) } if (p.gridmenu.width() < 100) { p._arrangemenu() } p._hasOpenedMenu = true; var y = p._getmenuitembyindex(0); var r = p._getmenuitembyindex(1); var C = p._getmenuitembyindex(2); var z = p._getmenuitembyindex(3); var q = p._getmenuitembyindex(4); var D = p._getmenuitembyindex(5); if (y != null && r != null && C != null) { var u = m.sortable && p.sortable; p.gridmenu.jqxMenu("disable", y.id, !u); p.gridmenu.jqxMenu("disable", r.id, !u); p.gridmenu.jqxMenu("disable", C.id, !u); if (m.datafield) { if (p.sortcolumn == m.datafield) { var w = p.getsortinformation(); if (u) { if (w.sortdirection.ascending) { p.gridmenu.jqxMenu("disable", y.id, true) } else { p.gridmenu.jqxMenu("disable", r.id, true) } } } else { p.gridmenu.jqxMenu("disable", C.id, true) } } } if (z != null && q != null) { if (!p.groupable || !m.groupable) { p.gridmenu.jqxMenu("disable", q.id, true); p.gridmenu.jqxMenu("disable", z.id, true) } else { if (p.groups && p.groups.indexOf(m.datafield) != -1) { p.gridmenu.jqxMenu("disable", z.id, true); p.gridmenu.jqxMenu("disable", q.id, false) } else { p.gridmenu.jqxMenu("disable", z.id, false); p.gridmenu.jqxMenu("disable", q.id, true) } } } if (D != null) { p._updatefilterpanel(p, D, m); var s = 0; if (p.sortable && p._togglesort && p.showsortmenuitems) { s += 3 } if (p.groupable && p.addgroup && p.showgroupmenuitems) { s += 2 } var B = s * 27 + 3; if (b.jqx.browser.msie && b.jqx.browser.version < 8) { B += 20; b(D).height(190) } if (p.filterable && p.showfiltermenuitems) { if (!m.filterable) { p.gridmenu.height(B); b(D).css("display", "none") } else { p.gridmenu.height(B + 180); b(D).css("display", "block") } } } b.data(document.body, "contextmenu" + p.element.id, { column: m, columnsmenu: k[0] }) }; p.addHandler(i, "click", function (q) { if (!m.menu) { return false } if (!p.showfilterrow) { if (k[0].style.display != "block") { h.trigger("mouseenter") } setTimeout(function () { if (k[0].style.display != "block") { h.trigger("mouseenter") } n() }, 200) } return false }); p.addHandler(k, "click", function (q) { if (!m.menu) { return false } n(); return false }); if (p.isTouchDevice()) { p.addHandler(k, b.jqx.mobile.getTouchEventName("touchstart"), function (q) { if (!m.menu) { return false } if (!p._hasOpenedMenu) { n() } else { p._closemenu() } return false }) } }, _removecolumnhandlers: function (h) { var e = this.that; var f = b(h.element); if (f.length > 0) { e.removeHandler(f, "mouseenter"); e.removeHandler(f, "mouseleave"); var g = b(h.filtericon); e.removeHandler(g, "mousedown"); e.removeHandler(g, "click"); e.removeHandler(f, "click"); e.removeHandler(f, "mousemove"); if (e.columnsreorder) { e.removeHandler(f, "mousedown.drag"); e.removeHandler(f, "mousemove.drag") } e.removeHandler(f, "dragstart"); if (f[0].columnsmenu) { var d = b(f[0].columnsmenu); e.removeHandler(d, "click"); e.removeHandler(d, "mousedown"); e.removeHandler(d, b.jqx.mobile.getTouchEventName("touchstart")) } } }, _rendercolumnheader: function (h, i, e, d) { var g = "4px"; if (d.columngroups) { g = (e / 2 - this._columnheight / 2); if (g < 0) { g = 4 } g += "px" } else { if (this.columnsheight != 25) { g = (this.columnsheight / 2 - this._columnheight / 2); if (g < 0) { g = 4 } g += "px" } } if (this.enableellipsis) { return '<div style="padding-bottom: 2px; overflow: hidden; text-overflow: ellipsis; text-align: ' + i + "; margin-left: 4px; margin-right: 2px; margin-bottom: " + g + "; margin-top: " + g + ';"><span style="text-overflow: ellipsis; cursor: default;">' + h + "</span></div>" } if (i == "center" || i == "middle") { return '<div style="padding-bottom: 2px; text-align: center; margin-top: ' + g + ';"><a href="#">' + h + "</a></div>" } var f = '<a style="margin-top: ' + g + "; float: " + i + ';" href="#">' + h + "</a>"; return f }, _renderrows: function (f, h, l) { var r = this.that; if ((this.pageable || this.groupable) && (this.autoheight || this.autorowheight)) { if (this.table != null && this.table[0].rows != null && this.table[0].rows.length < this.dataview.rows.length) { r.prerenderrequired = true } } if (!this.pageable && (this.autoheight || this.autorowheight) && (this.virtualmode || this.unboundmode)) { var p = this.source.totalrecords; if (!isNaN(p)) { if (this.table != null && this.table[0].rows != null && this.table[0].rows.length != p) { r.prerenderrequired = true } } } if ((this.autoheight || this.autorowheight) && !r.prerenderrequired) { if (this.table && this.table[0].rows) { if (this.table[0].rows.length < this.dataview.records.length) { if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) { r.prerenderrequired = true } else { if (!this.pageable) { r.prerenderrequired = true } } } if (this.table[0].rows.length < this.dataview.cachedrecords.length) { if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) { r.prerenderrequired = true } else { if (!this.pageable) { r.prerenderrequired = true } } } } } r._prerenderrows(f); if (r._requiresupdate) { r._requiresupdate = false; r._updatepageviews() } var q = function () { if (r._loading) { return } if (r.WinJS) { MSApp.execUnsafeLocalFunction(function () { r._rendervisualrows() }) } else { r._rendervisualrows() } if (r.virtualmode && r.showaggregates && r._updateaggregates) { r.refreshaggregates() } }; var t = b.jqx.browser.msie && b.jqx.browser.version < 10; if (this.virtualmode) { var i = function () { if (r.rendergridrows) { var w = r._startboundindex; if (w == undefined) { w = 0 } var u = w + 1 + r.dataview.pagesize; if (w != null && u != null) { var v = r.source._source ? true : false; var x = !v ? r.source.recordstartindex : r.source._source.recordstartindex; if (x != w || h == true) { if (!v) { r.source.recordstartindex = w; r.source.recordendindex = u } else { if (u >= r.source._source.totalrecords) { u = r.source._source.totalrecords; w = u - r.dataview.pagesize - 1; if (w < 0) { w = 0 } if (r.source._source.recordendindex == u && r.source._source.recordstartindex == w) { return } } r.source._source.recordstartindex = w; r.source._source.recordendindex = u } r.updatebounddata("cells") } } } }; if (this.loadondemand) { q(); i(); this.loadondemand = false } var j = this._browser == undefined ? this._isIE10() : this._browser; if (this.editable && this.editcell && !this.vScrollInstance.isScrolling() && !this.hScrollInstance.isScrolling()) { q() } else { if (this.autoheight) { q() } else { if (j || t || (navigator && navigator.userAgent.indexOf("Safari") != -1)) { if (this._scrolltimer != null) { clearTimeout(this._scrolltimer) } this._scrolltimer = setTimeout(function () { q() }, 5) } else { q() } } } } else { if (this.scrollmode == "deferred" && (this.hScrollInstance.isScrolling() || this.vScrollInstance.isScrolling())) { if (this._scrolltimer != null) { clearInterval(this._scrolltimer) } var s = this._getfirstvisualrow(); if (s != null) { var m = function (z) { if (s == null) { return "" } var y = "<table>"; var w = r.deferreddatafields; if (w == null) { if (r.columns.records.length > 0) { w = new Array(); w.push(r.columns.records[0].displayfield) } } for (var v = 0; v < w.length; v++) { var A = w[v]; var x = r._getcolumnbydatafield(A); if (x) { var u = r._getcellvalue(x, s); if (x.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(u)) { u = b.jqx.dataFormat.formatdate(u, x.cellsformat, r.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(u)) { u = b.jqx.dataFormat.formatnumber(u, x.cellsformat, r.gridlocalization) } } } } y += "<tr><td>" + u + "</td></tr>" } } y += "</table>"; return y }; var k = this.scrollfeedback ? this.scrollfeedback(s.bounddata) : m(s.bounddata); if (k != this._scrollelementcontent) { this._scrollelement[0].innerHTML = k; this._scrollelementcontent = k } } this._scrollelement.css("visibility", "visible"); this._scrollelementoverlay.css("visibility", "visible"); this._scrollelement.css("margin-top", -this._scrollelement.height() / 2); this._scrolltimer = setInterval(function () { if (!r.hScrollInstance.isScrolling() && !r.vScrollInstance.isScrolling()) { q(); r._scrollelement.css("visibility", "hidden"); r._scrollelementoverlay.css("visibility", "hidden"); clearInterval(r._scrolltimer); if (s) { r.ensurerowvisible(s.visibleindex) } } }, 100); return } if (navigator && navigator.userAgent.indexOf("Chrome") == -1 && navigator.userAgent.indexOf("Safari") != -1) { this._updatedelay = 1 } if (this.touchDevice != undefined && this.touchDevice == true) { this._updatedelay = 5 } var j = this._browser == undefined ? this._isIE10() : this._browser; if (j || t) { this._updatedelay = 5 } if ((j) && this.hScrollInstance.isScrolling()) { q(); return } if (b.jqx.browser.mozilla && this._updatedelay == 0 && (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling())) { this._updatedelay = 0 } if (this.updatedelay != null) { this._updatedelay = this.updatedelay } if (this._updatedelay == 0) { q() } else { var d = this._jqxgridrendertimer; if (d != null) { clearTimeout(d) } if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) { d = setTimeout(function () { q() }, this._updatedelay); this._jqxgridrendertimer = d } else { this._jqxgridrendertimer = d; q() } } } if (r.autorowheight && !r.autoheight) { if (this._pageviews.length > 0) { var e = this._gettableheight(); var n = this._pageviews[0].height; if (n > e) { if (this.pageable && this.gotopage) { n = this._pageviews[0].height; if (n < 0) { n = this._pageviews[0].height } } if (this.vScrollBar.css("visibility") != "visible") { this.vScrollBar.css("visibility", "visible") } if (n <= e || this.autoheight) { this.vScrollBar.css("visibility", "hidden") } if (n - e > 0) { if (this.scrollmode != "deferred") { var o = n - e; var g = this.vScrollInstance.max; this.vScrollBar.jqxScrollBar({ max: o }); if (Math.round(o) != Math.round(g)) { this.vScrollBar.jqxScrollBar({ value: 0 }) } } } else { this.vScrollBar.jqxScrollBar({ value: 0, max: n }) } } else { if (!this._loading) { this.vScrollBar.css("visibility", "hidden") } this.vScrollBar.jqxScrollBar({ value: 0 }) } this._arrange(); if (this.virtualsizeinfo) { this.virtualsizeinfo.virtualheight = n } } } }, scrolling: function () { var e = this.vScrollInstance.isScrolling(); var d = this.hScrollInstance.isScrolling(); return { vertical: e, horizontal: d } }, _renderhorizontalscroll: function () { var s = this.hScrollInstance; var t = s.value; if (this.hScrollBar.css("visibility") === "hidden") { s.value = 0; t = 0 } var k = parseInt(t); if (this.table == null) { return } var p = this.table[0].rows.length; var o = this.columnsrow; var q = this.groupable && this.groups.length > 0 ? this.groups.length : 0; var l = this.columns.records.length - q; var f = this.columns.records; var n = this.dataview.rows.length == 0; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { k = s.max - k } } if (n && !this._haspinned) { for (var v = 0; v < p; v++) { var r = this.table[0].rows[v]; for (var u = 0; u < q + l; u++) { var d = r.cells[u]; if (d != undefined) { var g = f[u]; if (g.pinned) { d.style.marginLeft = k + "px"; if (v == 0) { var e = o[0].cells[u]; e.style.marginLeft = k + "px" } } } } } this.table[0].style.marginLeft = -k + "px"; o[0].style.marginLeft = -k + "px" } else { if (this._haspinned || this._haspinned == undefined) { for (var v = 0; v < p; v++) { var r = this.table[0].rows[v]; for (var u = 0; u < q + l; u++) { var d = r.cells[u]; if (d != undefined) { var g = f[u]; if (g.pinned) { if (k == 0 && d.style.marginLeft == "") { continue } var h = null; var w = null; if (this.showfilterrow && this.filterrow) { if (this.filterrow[0].cells) { w = this.filterrow[0].cells[u] } } if (this.showaggregates) { if (this.statusbar[0].cells) { h = this.statusbar[0].cells[u] } } if (!this.rtl) { d.style.marginLeft = k + "px"; if (v == 0) { var e = o[0].cells[u]; e.style.marginLeft = k + "px"; if (h) { h.style.marginLeft = k + "px" } if (w) { w.style.marginLeft = k + "px" } } } else { d.style.marginLeft = -parseInt(t) + "px"; if (v == 0) { var e = o[0].cells[u]; e.style.marginLeft = -parseInt(t) + "px"; if (h) { h.style.marginLeft = -parseInt(t) + "px" } if (w) { w.style.marginLeft = -parseInt(t) + "px" } } } } } } } this.table[0].style.marginLeft = -k + "px"; o[0].style.marginLeft = -k + "px" } else { if (this._haspinned == false) { this.table[0].style.marginLeft = -k + "px"; o[0].style.marginLeft = -k + "px" } } } if (this.showaggregates) { if (this.statusbar[0].cells) { var m = 0; if (this.rtl) { if (this.vScrollBar.css("visibility") != "hidden") { if (this.hScrollBar.css("visibility") != "hidden") { m = 2 + parseInt(this.hScrollBar.css("left")) } } } this.statusbar[0].style.marginLeft = -k + m + "px" } } if (this.showfilterrow && this.filterrow) { if (this.filterrow[0].cells) { this.filterrow[0].style.marginLeft = -k + "px" } } }, _updaterowdetailsvisibility: function () { if (this.rowdetails) { for (var d = 0; d < this._rowdetailselementscache.length; d++) { b(this._rowdetailselementscache[d]).css("display", "none") } } }, _getvisualcolumnsindexes: function (e, m, i, l, d) { if (this.rowdetails || this.rtl || this.editcell || (this.width && this.width.toString().indexOf("%") >= 0) || this.exporting) { return { start: 0, end: i + l } } var f = 0; var k = -1; var g = i + l; var n = false; if (this.autorowheight) { return { start: 0, end: i + l } } if (!d) { for (var h = 0; h < i + l; h++) { var o = h; if (!n) { if (this.columns.records[h].pinned) { n = true } } if (!this.columns.records[h].hidden) { f += this.columns.records[h].width } if (f >= e && k == -1) { k = h } if (f > m + e) { g = h; break } } } g++; if (g > i + l) { g = i + l } if (k == -1 || n) { k = 0 } return { start: k, end: g } }, _getfirstvisualrow: function () { var e = this.vScrollInstance; var g = e.value; var f = parseInt(g); if (this._pagescache.length == 0) { this.dataview.updateview(); this._loadrows() } if (this.vScrollBar[0].style.visibility != "visible") { f = 0 } if (!this.pageable) { var d = this._findvisiblerow(f, this._pageviews); if (d == -1) { return null } if (d != this.dataview.pagenum) { this.dataview.pagenum = d; this.dataview.updateview(); this._loadrows() } else { if (!this._pagescache[this.dataview.pagenum]) { this._loadrows() } } } var h = this._findvisiblerow(f, this._pagescache[this.dataview.pagenum]); var i = this._pagescache[this.dataview.pagenum]; if (i && i[0]) { return i[h] } }, _rendervisualrows: function () { if (!this.virtualsizeinfo) { return } var R = this.vScrollInstance; var o = this.hScrollInstance; var h = R.value; var z = o.value; var n = parseInt(h); var k = parseInt(z); var v = this._gettableheight(); var E = this._hostwidth != undefined ? this._hostwidth : this.host.width(); if (this.hScrollBar[0].style.visibility == "visible") { v += 29 } if (this.scrollmode == "deferred" && this._newmax != 0) { if (n > this._newmax && this._newmax != null) { n = this._newmax } } var ab = R.isScrolling() || o.isScrolling() || this._keydown; var A = this.groupable && this.groups.length > 0; this.visiblerows = new Array(); this.hittestinfo = new Array(); if (this.editcell && this.editrow == undefined) { this._hidecelleditor(false) } if (this.editrow != undefined) { this._hideeditors() } if (this.virtualmode && !this.pageable) { this._pagescache = new Array() } if (this._pagescache.length == 0) { this.dataview.updateview(); this._loadrows() } if (this.vScrollBar[0].style.visibility == "hidden") { n = 0 } if (!this.pageable) { var G = this._findvisiblerow(n, this._pageviews); if (G == -1) { this._clearvisualrows(); this._renderemptyrow(); this._updaterowdetailsvisibility(); return } if (G != this.dataview.pagenum) { this.dataview.pagenum = G; this.dataview.updateview(); this._loadrows() } else { if (!this._pagescache[this.dataview.pagenum]) { this._loadrows() } } } var ad = this.groupable && this.groups.length > 0 ? this.groups.length : 0; if (!this.columns.records) { return } var q = this.columns.records.length - ad; var V = this._findvisiblerow(n, this._pagescache[this.dataview.pagenum]); var H = this._pagescache[this.dataview.pagenum]; var M = V; if (M < 0) { M = 0 } var X = 0; var U = 0; var L = 0; var e = 0; var N = this.virtualsizeinfo.visiblerecords; var K = this.groupable ? this.groups.length : 0; var x = this.toTP("jqx-grid-cell") + " " + this.toTP("jqx-item"); if (this.rtl) { x += " " + this.toTP("jqx-grid-cell-rtl") } if ((this.autoheight || this.autorowheight) && this.pageable) { if (!this.groupable || (this.groupable && this.groups.length === 0)) { N = this.dataview.pagesize } } if (A) { x = " " + this.toTP("jqx-grid-group-cell") } if (this.isTouchDevice()) { x += " " + this.toTP("jqx-touch") } if (this.autorowheight) { x += " jqx-grid-cell-wrap" } var J = this.rowsheight; var D = M; var ac = this._rendercell; var r = true; var p = this._getvisualcolumnsindexes(k, E, ad, q, A); var d = p.start; var T = p.end; if ((this.autoheight || this.pageable) && this.autorowheight) { if (this._pageviews[0]) { this._oldpageviewheight = this._pageviews[0].height } } if (this.autorowheight) { M = 0 } if (M >= 0) { this._updaterowdetailsvisibility(); this._startboundindex = H != null ? H[M].bounddata.boundindex : 0; this._startvisibleindex = H != null ? H[M].bounddata.visibleindex : 0; for (var m = 0; m < N && U < N; m++) { var W = H != undefined ? H[M + m] : null; if (W == null) { M = -m; if (this._pagescache[this.dataview.pagenum + 1]) { H = this._pagescache[this.dataview.pagenum + 1]; this.dataview.pagenum++ } else { var s = this._pageviews.length; do { if (this.dataview.pagenum < this._pageviews.length - 1) { this.dataview.pagenum++; H = undefined; if (this._pageviews[this.dataview.pagenum].height > 0) { this.dataview.updateview(); this._loadrows(); H = this._pagescache[this.dataview.pagenum] } } else { H = undefined; break } } while (H == undefined && this.dataview.pagenum < s) } if (H != undefined) { W = H[M + m] } } if (W != null) { if (W.hidden) { continue } this._endboundindex = this._startboundindex + m; this._endvisibleindex = this._startvisibleindex + m; if (m == 0) { var l = Math.abs(n - W.top); this.table[0].style.top = -l + "px"; e = -l } var j = this.table[0].rows[U]; if (!j) { continue } if (parseInt(j.style.height) != W.height) { j.style.height = parseInt(W.height) + "px" } L += W.height; var Q = this.rowdetails && W.rowdetails; var u = !W.rowdetailshidden; if (Q && u) { j.style.height = parseInt(W.height - W.rowdetailsheight) + "px"; N++ } var F = this._isrowselected(r, W); for (var O = d; O < T; O++) { var Z = O; this._rendervisualcell(ac, x, F, Q, u, A, K, j, W, Z, U, ab) } if (W.group != undefined && this._rendergroup) { this._rendergroup(K, j, W, ad, q, U, E) } if (this.autorowheight && (this.autoheight || this.pageable)) { var J = this.rowsheight; for (var O = d; O < T; O++) { if (this.editable && this.editcell && this.editcell.column == this.columns.records[O].datafield && this.editcell.row == this.getboundindex(W)) { J = Math.max(J, this.editcell.editor.height()); continue } if (j.cells[O].firstChild) { J = Math.max(J, 8 + parseInt(j.cells[O].firstChild.offsetHeight)) } } j.style.height = parseInt(J) + "px"; this.heights[this._startboundindex + m] = J; if (Q && u) { J += W.rowdetailsheight } W.height = J } this.visiblerows[this.visiblerows.length] = W; this.hittestinfo[this.hittestinfo.length] = { row: W, visualrow: j, details: false }; if (Q && u) { U++; var j = this.table[0].rows[U]; this._renderrowdetails(x, j, W, ad, q, U); this.visiblerows[this.visiblerows.length] = W; this.hittestinfo[this.hittestinfo.length] = { row: W, visualrow: j, details: true } } if (!this.autorowheight) { if (L + e >= v) { break } } } else { cansetheight = true; this._clearvisualrow(k, A, U, ad, q); if (L + X + e <= v) { X += J } } U++ } this._horizontalvalue = k; if (X > 0) { if (this.vScrollBar[0].style.visibility == "visible") { var aa = parseInt(this.table.css("top")); var C = this._pageviews[this._pageviews.length - 1]; var t = R.max; var B = C.top + C.height - v; if (this.hScrollBar.css("visibility") == "visible") { B += this.scrollbarsize + 20 } if (t != B && !this.autorowheight) { if (B >= 0) { if (this.scrollmode != "deferred") { R.max = B; R.setPosition(R.max) } else { if (this._newmax != B) { this._newmax = B; this._rendervisualrows() } } } } } } } if ((this.autoheight || this.pageable) && this.autorowheight) { this._pagescache = new Array(); var P = 0; var g = 0; for (var Y = 0; Y < this.visiblerows.length; Y++) { var w = this.visiblerows[Y]; w.top = P; P += w.height; g += w.height; var Q = this.rowdetails && w.rowdetails; var u = !w.rowdetailshidden; var j = this.table[0].rows[Y]; if (Q && u) { Y++ } for (var O = d; O < T; O++) { var S = this.columns.records[O]; if (!S.hidden) { if (!S.cellsrenderer) { var I = j.cells[O]; var f = 0; if (I.firstChild) { var f = (w.height - parseInt(I.firstChild.offsetHeight) - 8) / 2; if (Q && u) { var f = (w.height - w.rowdetailsheight - b(I.firstChild).height() - 8) / 2 } } else { var f = (w.height - parseInt(b(I).height()) - 8) / 2 } if (f >= 0) { f = parseInt(f) + 4; if (I.firstChild) { if (I.firstChild.className.indexOf("jqx-grid-groups-row") == -1) { if (S.columntype != "checkbox" && S.columntype != "button") { if (this.editable && this.editcell && this.editcell.column == S.datafield && this.editcell.row == this.getboundindex(w)) { continue } I.firstChild.style.marginTop = f + "px" } } } } } } } } if (this._pageviews[0]) { this._pageviews[0].height = g } this._arrange() } this._renderemptyrow() }, _hideemptyrow: function () { if (!this.showemptyrow) { return } if (!this.table) { return } if (!this.table[0].rows) { return } var f = this.table[0].rows[0]; if (!f) { return } var g = false; for (var e = 0; e < f.cells.length; e++) { var d = b(f.cells[e]); if (d.css("display") != "none" && !g) { if (d.width() == this.host.width() || d.text() == this.gridlocalization.emptydatastring) { d[0].checkbox = null; d[0].button = null; g = true; d[0].innerHTML = "" } } } }, _renderemptyrow: function () { if (this._loading) { return } if (this.dataview.records.length == 0 && this.showemptyrow) { var l = false; var e = this.toTP("jqx-grid-cell"); if (this.table && this.table.length > 0 && this.table[0].rows && this.table[0].rows.length > 0) { var k = this.table[0].rows[0]; this.table[0].style.top = "0px"; for (var f = 0; f < k.cells.length; f++) { var d = b(k.cells[f]); if (d.css("display") != "none" && !l) { d[0].checkbox = null; d[0].button = null; d[0].className = e; l = true; d[0].innerHTML = ""; var g = b("<span style='white-space: nowrap; float: left; margin-left: 50%; position: relative;'></span>"); g.text(this.gridlocalization.emptydatastring); d.append(g); var j = 0; if (!this.oldhscroll) { j = parseInt(this.table[0].style.marginLeft); if (this.rtl) { d.css("z-index", 999); d.css("overflow", "visible") } } g.css("left", -j - (g.width() / 2)); g.css("top", this._gettableheight() / 2 - g.height() / 2); if (b.jqx.browser.msie && b.jqx.browser.version < 8) { g.css("margin-left", "0px"); g.css("left", this.host.width() / 2 - g.width() / 2) } var h = Math.abs(parseInt(this.table[0].style.top)); if (isNaN(h)) { h = 0 } b(k).height(this._gettableheight() + h); d.css("margin-left", "0px"); d.width(this.host.width()); if (this.table.width() < this.host.width()) { this.table.width(this.host.width()) } } d.addClass(this.toThemeProperty("jqx-grid-empty-cell")) } } } }, _clearvisualrows: function () { var e = this.virtualsizeinfo.visiblerecords; var f = this.hScrollInstance; var d = f.value; var g = parseInt(d); var i = this.groupable && this.groups.length > 0; if (!this.columns.records) { return } for (var h = 0; h < e; h++) { this._clearvisualrow(g, i, h, 0, this.columns.records.length) } }, _iscellselected: function (j, i, g) { var f = false; var e = 0; if (this.virtualmode && this.pageable && this.groupable) { if (this.groups.length > 0) { e = this.dataview.pagesize * this.dataview.pagenum } } if (this.groups.length > 0 && this.pageable && this.groupable) { var d = this.getrowboundindexbyid(i.bounddata.uid); for (var h in this.selectedcells) { if (h == d + "_" + g) { f = true } } return f } if (j && i.bounddata != null) { if (this.selectionmode != "singlerow") { if (this.dataview.filters.length > 0) { if (!this.virtualmode && i.bounddata.dataindex != undefined) { for (var h in this.selectedcells) { if (h == e + i.bounddata.dataindex + "_" + g) { f = true } } } else { for (var h in this.selectedcells) { if (h == e + i.bounddata.boundindex + "_" + g) { f = true } } } } else { for (var h in this.selectedcells) { if (h == e + i.bounddata.boundindex + "_" + g) { f = true; break } } } } else { if (this.dataview.filters.length > 0) { if (!this.virtualmode && i.bounddata.dataindex != undefined) { for (var h in this.selectedcells) { if (h == e + i.bounddata.dataindex + "_" + g) { f = true; break } } } else { for (var h in this.selectedcells) { if (h == e + i.bounddata.boundindex + "_" + g) { f = true; break } } } } else { for (var h in this.selectedcells) { if (h == e + i.bounddata.boundindex == this.selectedrowindex) { f = true; break } } } } } return f }, _isrowselected: function (h, g) { var f = false; var e = 0; if (this.virtualmode && this.pageable && this.groupable) { if (this.groups.length > 0) { e = this.dataview.pagesize * this.dataview.pagenum } } if (this.groupable && this.groups.length > 0 && this.pageable) { var d = this.getrowboundindexbyid(g.bounddata.uid); if (d == undefined || d == -1) { return false } if (this.selectedrowindexes.indexOf(d) != -1) { f = true } if (!f) { f = d == this.selectedrowindex && this.selectedrowindex != -1 } return f } if (h && g.bounddata != null) { if (this.selectionmode != "singlerow") { if (this.dataview.filters.length > 0) { if (!this.virtualmode && g.bounddata.dataindex != undefined) { if (this.selectedrowindexes.indexOf(e + g.bounddata.dataindex) != -1) { f = true } } else { if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) { f = true } } } else { if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) { f = true } } } else { if (this.dataview.filters.length > 0) { if (!this.virtualmode && g.bounddata.dataindex != undefined) { if (this.selectedrowindexes.indexOf(e + g.bounddata.dataindex) != -1) { f = true } } else { if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) { f = true } } } else { if (e + g.bounddata.boundindex == this.selectedrowindex) { f = true } } } } return f }, _rendervisualcell: function (z, i, p, k, t, x, j, q, d, h, s, n) { var f = null; var g = this.columns.records[h]; if (g.hidden) { var e = q.cells[h]; e.innerHTML = ""; return } cellvalue = this._getcellvalue(g, d); var e = q.cells[h]; var w = i; if (this.selectionmode.indexOf("cell") != -1) { if (this.dataview.filters.length > 0) { if (this.selectedcells[d.bounddata.dataindex + "_" + g.datafield]) { p = true } else { p = false } } else { if (this.selectedcells[d.boundindex + "_" + g.datafield]) { p = true } else { p = false } } if (this.editcell) { if (this.editcell.row === d.boundindex && this.editcell.column === g.datafield) { if (g.columntype !== "checkbox") { p = false } } } if (this.virtualmode || (this.groupable && this.groups.length > 0 && this.pageable)) { p = this._iscellselected(true, d, g.datafield) } } if (g.cellclassname != "" && g.cellclassname) { if (typeof g.cellclassname == "string") { w += " " + g.cellclassname } else { var m = g.cellclassname(this.getboundindex(d), g.datafield, cellvalue, d.bounddata); if (m) { w += " " + m } } } var o = this.showsortcolumnbackground && this.sortcolumn && g.displayfield == this.sortcolumn; if (o) { w += " " + this.toTP("jqx-grid-cell-sort") } if (g.filter && this.showfiltercolumnbackground) { w += " " + this.toTP("jqx-grid-cell-filter") } if ((g.pinned && this.showpinnedcolumnbackground) || g.grouped) { if (x) { w += " " + this.toTP("jqx-grid-cell-pinned") } else { w += " " + this.toTP("jqx-grid-cell-pinned") } } if (this.altrows && d.group == undefined) { var y = d.visibleindex; if (y >= this.altstart) { if ((this.altstart + y) % (1 + this.altstep) == 0) { if (!o) { w += " " + this.toTP("jqx-grid-cell-alt") } else { w += " " + this.toTP("jqx-grid-cell-sort-alt") } if (g.filter && this.showfiltercolumnbackground) { w += " " + this.toTP("jqx-grid-cell-filter-alt") } if (g.pinned && this.showpinnedcolumnbackground) { w += " " + this.toTP("jqx-grid-cell-pinned-alt") } } } } if (h <= j) { if (x || this.rowdetails) { var u = b(e); var l = this.columns.records[h].width; if (e.style.width != parseInt(l) + "px") { u.width(l) } } } else { if (x || this.rowdetails) { if (this._hiddencolumns) { var u = b(e); var l = this.columns.records[h].width; if (parseInt(e.style.width) != l) { u.width(l) } } } } var v = true; if (this.rowdetails && k) { if (t && !x) { w += " " + this.toTP("jqx-grid-details-cell") } else { if (x) { w += " " + this.toTP("jqx-grid-group-details-cell") } } if (this.showrowdetailscolumn) { if (!this.rtl) { if (d.group == undefined && h == j) { var r = this.toThemeProperty("jqx-icon-arrow-down"); if (t) { w += " " + this.toTP("jqx-grid-group-expand"); w += " " + r } else { w += " " + this.toTP("jqx-grid-group-collapse"); var r = this.toThemeProperty("jqx-icon-arrow-right"); w += " " + r } v = false; e.title = ""; e.innerHTML = ""; if (e.className != w) { e.className = w } return } } else { if (d.group == undefined && h == q.cells.length - j - 1) { var r = this.toThemeProperty("jqx-icon-arrow-down"); if (t) { w += " " + this.toTP("jqx-grid-group-expand-rtl"); w += " " + r } else { w += " " + this.toTP("jqx-grid-group-collapse-rtl"); var r = this.toThemeProperty("jqx-icon-arrow-left"); w += " " + r } v = false; e.title = ""; e.innerHTML = ""; if (e.className != w) { e.className = w } return } } } } if (p && v && h >= j) { w += " " + this.toTP("jqx-grid-cell-selected"); w += " " + this.toTP("jqx-fill-state-pressed") } if (e.className != w) { e.className = w } if (d.group != undefined) { cellvalue = ""; e.title = ""; e.innerHTML = ""; return } z(this, g, d, cellvalue, e, n) }, _rendercell: function (u, f, j, s, d, q) { var g = s + "_" + f.visibleindex; if (f.columntype == "number" || f.cellsrenderer != null) { var g = j.uniqueid + "_" + f.visibleindex } if (f.columntype == "number") { s = j.visibleindex } if (u.editcell && u.editrow == undefined) { if (u.editmode == "selectedrow" && f.editable && u.editable) { if (u.editcell.row == u.getboundindex(j)) { if (u._showcelleditor) { if (!u.hScrollInstance.isScrolling() && !u.vScrollInstance.isScrolling()) { u._showcelleditor(u.editcell.row, f, d, u.editcell.init) } else { u._showcelleditor(u.editcell.row, f, d, false, false) } return } } } else { if (u.editcell.row == u.getboundindex(j) && u.editcell.column == f.datafield) { u.editcell.element = d; if (u.editcell.editing) { if (u._showcelleditor) { if (!u.hScrollInstance.isScrolling() && !u.vScrollInstance.isScrolling()) { u._showcelleditor(u.editcell.row, f, u.editcell.element, u.editcell.init) } else { u._showcelleditor(u.editcell.row, f, u.editcell.element, u.editcell.init, false) } return } } } } } var r = u._defaultcellsrenderer(s, f); var n = u._cellscache[g]; if (n) { if (f.columntype == "inline") { u._renderinlinecell(u, d, f, j, s); if (f.cellsrenderer != null) { var h = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata); if (h != undefined) { d.innerHTML = h } } return } else { if (f.columntype == "checkbox") { if (u.host.jqxCheckBox) { if (s === "") { s = null } var m = d.innerHTML.toString().length == 0; if (d.checkbox && !u.groupable && !m) { d.checkboxrow = u.getboundindex(j); if (s == "") { s = false } if (s == "1") { s = true } if (s == "0") { s = false } if (s == 1) { s = true } if (s == 0) { s = false } if (s == "true") { s = true } if (s == "false") { s = false } if (s == null && !f.threestatecheckbox) { s = false } if (f.checkboxcolumn) { s = false; if (u.dataview.filters.length > 0 && !u.virtualmode && j.bounddata.dataindex != undefined) { if (u.selectedrowindexes.indexOf(j.bounddata.dataindex) != -1) { s = true } } else { if (u.selectedrowindexes.indexOf(j.bounddata.boundindex) != -1) { s = true } } } if (!u.disabled) { if (d.checkboxinstance) { d.checkboxinstance._setState(s) } else { d.checkbox.jqxCheckBox("_setState", s) } } } else { u._rendercheckboxcell(u, d, f, j, s) } if (f.cellsrenderer != null) { var h = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata); if (h != undefined) { d.innerHTML = h } } return } } else { if (f.columntype == "button") { if (u.host.jqxButton) { if (s == "") { s = false } if (f.cellsrenderer != null) { s = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata) } if (d.innerHTML == "") { d.buttonrow = u.getboundindex(j); d.button = null; u._renderbuttoncell(u, d, f, j, s) } if (d.button && !u.groupable) { d.buttonrow = u.getboundindex(j); d.button.val(s) } else { u._renderbuttoncell(u, d, f, j, s) } return } } } } var t = n.element; if (f.cellsrenderer != null || (d.childNodes && d.childNodes.length == 0) || u.groupable || u.rowdetails) { if (d.innerHTML != t) { d.innerHTML = t } } else { if (d.innerHTML.indexOf("editor") >= 0) { d.innerHTML = t } else { if (q) { var o = t.indexOf(">"); var l = t.indexOf("</"); var p = t.substring(o + 1, l); var i = d.childNodes[0]; if (p.indexOf(">") >= 0) { d.innerHTML = t } else { if (i.childNodes[0]) { if (p != i.childNodes[0].nodeValue) { if (p.indexOf("&") >= 0) { d.innerHTML = t } else { i.childNodes[0].nodeValue = p } } } else { var e = document.createTextNode(p); i.appendChild(e) } } } else { if (d.innerHTML != t) { d.innerHTML = t } } } } if (u.enabletooltips && f.enabletooltips) { d.title = n.title } return } if (f.columntype == "checkbox") { u._rendercheckboxcell(u, d, f, j, s); u._cellscache[g] = { element: "", title: s }; if (u.enabletooltips && f.enabletooltips) { d.title = s } return } else { if (f.columntype == "button") { if (f.cellsrenderer != null) { s = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata) } u._renderbuttoncell(u, d, f, j, s); u._cellscache[g] = { element: "", title: s }; if (u.enabletooltips && f.enabletooltips) { d.title = s } return } else { if (f.columntype == "number") { s = j.visibleindex } else { if (f.columntype == "inline") { u._renderinlinecell(u, d, f, j, s); u._cellscache[g] = { element: "", title: s }; if (u.enabletooltips && f.enabletooltips) { d.title = s } return } } } } var t = null; if (f.cellsrenderer != null) { t = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata) } else { t = r } if (t == null) { t = r } var k = s; if (u.enabletooltips && f.enabletooltips) { if (f.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(s)) { k = b.jqx.dataFormat.formatdate(k, f.cellsformat, this.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(s)) { k = b.jqx.dataFormat.formatnumber(k, f.cellsformat, this.gridlocalization) } } } } d.title = k } if (u.WinJS) { b(d).html(t) } else { d.innerHTML = t } u._cellscache[g] = { element: d.innerHTML, title: k }; return true }, _isIE10: function () { if (this._browser == undefined) { var e = b.jqx.utilities.getBrowser(); if (e.browser == "msie" && parseInt(e.version) > 9) { this._browser = true } else { this._browser = false; if (e.browser == "msie") { var d = "Browser CodeName: " + navigator.appCodeName + ""; d += "Browser Name: " + navigator.appName + ""; d += "Browser Version: " + navigator.appVersion + ""; d += "Platform: " + navigator.platform + ""; d += "User-agent header: " + navigator.userAgent + ""; if (d.indexOf("Zune 4.7") != -1) { this._browser = true } } } } return this._browser }, _renderinlinecell: function (f, d, e, i, g) { var h = b(d); d.innerHTML = '<div style="position: absolute;"></div>' }, _rendercheckboxcell: function (g, e, f, k, h) { if (g.host.jqxCheckBox) { var j = b(e); if (h === "") { if (f.threestatecheckbox) { h = null } else { h = false } } if (h == "1") { h = true } if (h == "0") { h = false } if (h == 1) { h = true } if (h == 0) { h = false } if (h == "true") { h = true } if (h == "false") { h = false } if (f.checkboxcolumn) { h = false; var d = this.getboundindex(k); if (this.selectedrowindexes.indexOf(d) != -1) { h = true } } if (j.find(".jqx-checkbox").length == 0) { e.innerHTML = '<div style="position: absolute; top: 50%; left: 50%; margin-top: -7px; margin-left: -10px;"></div>'; b(e.firstChild).jqxCheckBox({ disabled: g.disabled, _canFocus: false, hasInput: false, hasThreeStates: f.threestatecheckbox, enableContainerClick: false, animationShowDelay: 0, animationHideDelay: 0, locked: true, theme: g.theme, checked: h }); if (this.editable && f.editable) { b(e.firstChild).jqxCheckBox({ locked: false }) } if (f.checkboxcolumn) { b(e.firstChild).jqxCheckBox({ locked: false }) } e.checkbox = b(e.firstChild); e.checkboxinstance = e.checkbox.data().jqxCheckBox.instance; e.checkboxrow = this.getboundindex(k); var i = b.data(e.firstChild, "jqxCheckBox").instance; i.updated = function (o, n, q) { if (g.disabled) { n = q; var p = g.table[0].rows.length; var s = g._getcolumnindex(f.datafield); for (var m = 0; m < p; m++) { var l = g.table[0].rows[m].cells[s].firstChild; if (l) { b(l).jqxCheckBox({ disabled: g.disabled }) } } } if (f.editable && !g.disabled) { var p = g.table[0].rows.length; var s = g._getcolumnindex(f.datafield); if (g.editrow == undefined) { if (f.cellbeginedit) { var r = f.cellbeginedit(e.checkboxrow, f.datafield, f.columntype, !n); if (r == false) { g.setcellvalue(e.checkboxrow, f.datafield, !n, true); return } } if (g.editmode !== "selectedrow") { for (var m = 0; m < p; m++) { var l = g.table[0].rows[m].cells[s].firstChild; if (l) { b(l).jqxCheckBox("destroy") } } } if (g.editcell && g.editcell.validated == false) { g.setcellvalue(e.checkboxrow, f.datafield, !n, true) } else { if (g.editmode !== "selectedrow" || g.editcell == null) { g._raiseEvent(17, { rowindex: e.checkboxrow, datafield: f.datafield, value: q, columntype: f.columntype }); g.setcellvalue(e.checkboxrow, f.datafield, n, true); g._raiseEvent(18, { rowindex: e.checkboxrow, datafield: f.datafield, oldvalue: q, value: n, columntype: f.columntype }) } else { g.setcellvalue(e.checkboxrow, f.datafield, n, false, false) } } } } else { if (f.checkboxcolumn) { if (g.editcell) { g.endcelledit(g.editcell.row, g.editcell.column, false, true) } if (!g.disabled) { if (n) { g.selectrow(e.checkboxrow) } else { g.unselectrow(e.checkboxrow) } if (g.autosavestate) { if (g.savestate) { g.savestate() } } } } } } } else { e.checkboxrow = this.getboundindex(k); b(e.firstChild).jqxCheckBox("_setState", h) } } }, _renderbuttoncell: function (h, e, g, k, i) { if (h.host.jqxButton) { var j = b(e); if (i == "") { i = false } if (j.find(".jqx-button").length == 0) { e.innerHTML = '<input type="button" style="opacity: 0.99; position: absolute; top: 0%; left: 0%; padding: 0px; margin-top: 2px; margin-left: 2px;"/>'; b(e.firstChild).val(i); b(e.firstChild).attr("hideFocus", "true"); b(e.firstChild).jqxButton({ disabled: h.disabled, theme: h.theme, height: h.rowsheight - 4, width: g.width - 4 }); e.button = b(e.firstChild); e.buttonrow = h.getboundindex(k); var d = this.isTouchDevice(); if (d) { var f = b.jqx.mobile.getTouchEventName("touchend"); h.addHandler(b(e.firstChild), f, function (l) { if (g.buttonclick) { g.buttonclick(e.buttonrow, l) } }) } else { h.addHandler(b(e.firstChild), "click", function (l) { if (g.buttonclick) { g.buttonclick(e.buttonrow, l) } }) } } else { e.buttonrow = h.getboundindex(k); b(e.firstChild).val(i) } } }, _clearvisualrow: function (g, f, o, i, n) { var m = this.toTP("jqx-grid-cell"); if (f) { m = " " + this.toTP("jqx-grid-group-cell") } m += " " + this.toTP("jqx-grid-cleared-cell"); var p = this.table[0].rows; for (var k = 0; k < i + n; k++) { if (p[o]) { var e = p[o].cells[k]; if (e.className != m) { e.className = m } var d = this.columns.records[k]; if (this._horizontalvalue != g && !d.pinned) { if (this.oldhscroll == true) { var h = -g; e.style.marginLeft = -g + "px" } } var l = d.width; if (l < d.minwidth) { l = d.minwidth } if (l > d.maxwidth) { l = d.maxwidth } if (parseInt(e.style.width) != l) { if (l != "auto") { b(e)[0].style.width = l + "px" } else { b(e)[0].style.width = l } } if (e.title != "") { e.title = "" } if (e.innerHTML != "") { e.innerHTML = "" } } } if (p[o]) { if (parseInt(p[o].style.height) != this.rowsheight) { p[o].style.height = parseInt(this.rowsheight) + "px" } } }, _findgroupstate: function (e) { var d = this._findgroup(e); if (d == null) { return false } return d.expanded }, _findgroup: function (e) { var d = null; if (this.expandedgroups[e]) { return this.expandedgroups[e] } return d }, _clearcaches: function () { this._columnsbydatafield = new Array(); this._pagescache = new Array(); this._pageviews = new Array(); this._cellscache = new Array(); this.heights = new Array(); this.hiddens = new Array(); this.hiddenboundrows = new Array(); this.heightboundrows = new Array(); this.detailboundrows = new Array(); this.details = new Array(); this.expandedgroups = new Array(); this._rowdetailscache = new Array(); this._rowdetailselementscache = new Array(); if (b.jqx.dataFormat) { b.jqx.dataFormat.cleardatescache() } this.tableheight = null }, _getColumnText: function (d) { if (this._columnsbydatafield == undefined) { this._columnsbydatafield = new Array() } if (this._columnsbydatafield[d]) { return this._columnsbydatafield[d] } var f = d; var e = null; b.each(this.columns.records, function () { if (this.datafield == d) { f = this.text; e = this; return false } }); this._columnsbydatafield[d] = { label: f, column: e }; return this._columnsbydatafield[d] }, _getcolumnbydatafield: function (d) { if (this.__columnsbydatafield == undefined) { this.__columnsbydatafield = new Array() } if (this.__columnsbydatafield[d]) { return this.__columnsbydatafield[d] } var f = d; var e = null; b.each(this.columns.records, function () { if (this.datafield == d || this.displayfield == d) { f = this.text; e = this; return false } }); this.__columnsbydatafield[d] = e; return this.__columnsbydatafield[d] }, isscrollingvertically: function () { var d = (this.vScrollBar.jqxScrollBar("isScrolling")); return d }, _renderrowdetails: function (q, y, d, x, n, A) { if (y == undefined) { return } var E = b(y); var g = 0; var t = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth; if (this.groupable && this.groups.length > 0) { for (var r = 0; r <= n; r++) { var e = b(y.cells[r]); e[0].innerHTML = ""; e[0].className = "jqx-grid-details-cell" } } var e = b(y.cells[g]); if (e[0].style.display == "none") { var o = y.cells[g]; var B = 2; var l = g; while (o != undefined && o.style.display == "none" && B < 10) { o = y.cells[l + B - 1]; B++ } e = b(o) } if (this.rtl) { for (var v = x; v < n; v++) { y.cells[v].innerHTML = ""; y.cells[v].className = "jqx-grid-details-cell" } } e.css("width", "100%"); E.height(d.rowdetailsheight); e[0].className = q; var p = this.getboundindex(d); var j = p + "_"; if (this._rowdetailscache[j]) { var u = this._rowdetailscache[j]; var C = u.html; if (this.initrowdetails) { if (this._rowdetailscache[j].element) { var f = this._rowdetailscache[j].element; var i = e.coord(); var z = this.gridcontent.coord(); var w = parseInt(i.top) - parseInt(z.top); var k = parseInt(i.left) - parseInt(z.left); if (this.rtl) { k = 0 } b(f).css("top", w); b(f).css("left", k); b(f).css("display", "block"); b(f).width(this.host.width() - t); if (this.layoutrowdetails) { this.layoutrowdetails(p, f, this.element, this.getrowdata(p)) } } } else { e[0].innerHTML = C } return } e[0].innerHTML = ""; if (!this.enablerowdetailsindent) { t = 0 } var h = '<div class="jqx-enableselect" role="rowgroup" style="border: none; overflow: hidden; width: 100%; height: 100%; margin-left: ' + t + 'px;">' + d.rowdetails + "</div>"; if (this.rtl) { var h = '<div class="jqx-enableselect" role="rowgroup" style="border: none; overflow: hidden; width: 100%; height: 100%; margin-left: ' + 0 + "px; margin-right: " + t + 'px;">' + d.rowdetails + "</div>" } this._rowdetailscache[j] = { id: y.id, html: h }; if (this.initrowdetails) { var f = b(h)[0]; b(this.gridcontent).prepend(b(f)); b(f).css("position", "absolute"); b(f).width(this.host.width() - t); b(f).height(e.height()); var i = e.coord(); b(f).css("z-index", 2000); if (this.isTouchDevice()) { b(f).css("z-index", 99999) } b(f).addClass(this.toThemeProperty("jqx-widget-content")); var i = e.coord(); var z = this.gridcontent.coord(); var w = parseInt(i.top) - parseInt(z.top); var k = parseInt(i.left) - parseInt(z.left); b(f).css("top", w); b(f).css("left", k); this.content[0].scrollTop = 0; this.content[0].scrollLeft = 0; var D = b(b(f).children()[0]); if (D[0].id != "") { D[0].id = D[0].id + p } this.initrowdetails(p, f, this.element, this.getrowdata(p)); this._rowdetailscache[j].element = f; this._rowdetailselementscache[p] = f } else { e[0].innerHTML = h } }, _defaultcellsrenderer: function (f, d) { if (d.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(f)) { f = b.jqx.dataFormat.formatdate(f, d.cellsformat, this.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(f)) { f = b.jqx.dataFormat.formatnumber(f, d.cellsformat, this.gridlocalization) } } } } var e = "4px"; if (this.rowsheight != 25) { e = (this.rowsheight / 2 - this._cellheight / 2); if (e < 0) { e = 4 } e += "px" } if (this.enableellipsis) { if (d.cellsalign == "center" || d.cellsalign == "middle") { return '<div style="text-overflow: ellipsis; overflow: hidden; padding-bottom: 2px; text-align: center; margin-top: ' + e + ';">' + f + "</div>" } if (d.cellsalign == "left") { return '<div style="overflow: hidden; text-overflow: ellipsis; padding-bottom: 2px; text-align: left; margin-right: 2px; margin-left: 4px; margin-top: ' + e + ';">' + f + "</div>" } if (d.cellsalign == "right") { return '<div style="overflow: hidden;  text-overflow: ellipsis; padding-bottom: 2px; text-align: right; margin-right: 2px; margin-left: 4px; margin-top: ' + e + ';">' + f + "</div>" } } if (d.cellsalign == "center" || d.cellsalign == "middle") { return '<div style="text-align: center; margin-top: ' + e + ';">' + f + "</div>" } return '<span style="margin-left: 4px; margin-right: 2px; margin-top: ' + e + "; float: " + d.cellsalign + ';">' + f + "</span>" }, getcelltext: function (g, e) { if (g == null || e == null) { return null } var d = this.getcellvalue(g, e); var f = this.getcolumn(e); if (f && f.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(d)) { d = b.jqx.dataFormat.formatdate(d, f.cellsformat, this.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(d)) { d = b.jqx.dataFormat.formatnumber(d, f.cellsformat, this.gridlocalization) } } } } return d }, getcelltextbyid: function (g, e) { if (g == null || e == null) { return null } var d = this.getcellvaluebyid(g, e); var f = this.getcolumn(e); if (f && f.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(d)) { d = b.jqx.dataFormat.formatdate(d, f.cellsformat, this.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(d)) { d = b.jqx.dataFormat.formatnumber(d, f.cellsformat, this.gridlocalization) } } } } return d }, _getcellvalue: function (d, f) { var e = null; e = f.bounddata[d.datafield]; if (d.displayfield != null) { e = f.bounddata[d.displayfield] } if (e == null) { e = "" } return e }, getcell: function (h, d) { if (h == null || d == null) { return null } var e = parseInt(h); var g = h; var f = ""; if (!isNaN(e)) { g = this.getrowdata(e) } if (g != null) { f = g[d] } return this._getcellresult(f, h, d) }, getrenderedcell: function (h, d) { if (h == null || d == null) { return null } var e = parseInt(h); var g = h; var f = ""; if (!isNaN(e)) { g = this.getrenderedrowdata(e) } if (g != null) { f = g[d] } return this._getcellresult(f, h, d) }, _getcellresult: function (k, n, e) { var f = this.getcolumn(e); if (f == null || f == undefined) { return null } var i = f.getcolumnproperties(); var g = i.hidden; var d = i.width; var m = i.pinned; var h = i.cellsalign; var j = i.cellsformat; var l = this.getrowheight(n); if (l == false) { return null } return { value: k, row: n, column: e, datafield: e, width: d, height: l, hidden: g, pinned: m, align: h, format: j } }, setcellvaluebyid: function (i, d, h, f, g) { var e = this.getrowboundindexbyid(i); return this.setcellvalue(e, d, h, f, g) }, getcellvaluebyid: function (f, d) { var e = this.getrowboundindexbyid(f); return this.getcellvalue(e, d) }, setcellvalue: function (s, z, E, l, w) { if (s == null || z == null) { return false } var i = parseInt(s); var o = i; var m = s; if (!isNaN(i)) { m = this.getrowdata(i) } var A = false; if (this.filterable && this._initfilterpanel && this.dataview.filters.length) { A = true } if (this.virtualmode) { this._pagescache = new Array() } if (this.sortcache) { this.sortcache = {} } var u = ""; var y = ""; if (m != null && m[z] !== E) { if (m[z] === null && E === "") { return } var h = this._getcolumnbydatafield(z); var j = "string"; var J = this.source.datafields || ((this.source._source) ? this.source._source.datafields : null); if (J) { var B = ""; b.each(J, function () { if (this.name == h.displayfield) { if (this.type) { B = this.type } return false } }); if (B) { j = B } y = m[h.displayfield] } u = m[z]; if (!h.nullable || (E != null && E !== "" && h.nullable && E.label === undefined)) { if (b.jqx.dataFormat.isNumber(u) || j == "number" || j == "float" || j == "int" || j == "decimal" && j != "date") { E = new Number(E); E = parseFloat(E); if (isNaN(E)) { E = 0 } } else { if (b.jqx.dataFormat.isDate(u) || j == "date") { if (E != "") { var I = E; I = new Date(I); if (I != "Invalid Date" && I != null) { E = I } else { if (I == "Invalid Date") { I = new Date(); E = I } } } } } if (m[z] === E) { if (!this._updating && l != false) { this._renderrows(this.virtualsizeinfo) } return } } m[z] = E; var M = this.getrenderedrowdata(i, true); if (!M) { return } M[z] = E; if (E != null && E.label != null) { var h = this._getcolumnbydatafield(z); m[h.displayfield] = E.label; M[h.displayfield] = E.label; m[z] = E.value; M[z] = E.value } if (A) { if (m.dataindex != undefined) { o = m.dataindex; this.dataview.cachedrecords[m.dataindex][z] = E; if (E != null && E.label != undefined) { this.dataview.cachedrecords[m.dataindex][z] = E.value; this.dataview.cachedrecords[m.dataindex][h.displayfield] = E.label } } } } else { if (!this._updating && l != false) { this._renderrows(this.virtualsizeinfo) } return false } if (this.source && this.source._knockoutdatasource && !this._updateFromAdapter && this.autokoupdates) { if (this.source._source._localdata) { var H = i; if (A) { if (m.dataindex != undefined) { H = m.dataindex } } var D = this.source._source._localdata()[H]; this.source.suspendKO = true; var r = D; if (r[z] && r[z].subscribe) { if (E != null && E.label != null) { r[h.displayfield](E.label); r[z](E.value) } else { r[z](E) } } else { var J = this.source._source.datafields; var g = null; var K = null; if (J) { b.each(J, function () { if (this.name == z) { K = this.map; return false } }) } if (K == null) { if (E != null && E.label != null) { r[z] = E.value; r[h.displayfield] = E.label } else { r[z] = E } } else { var k = K.split(this.source.mapChar); if (k.length > 0) { var e = r; for (var C = 0; C < k.length - 1; C++) { e = e[k[C]] } e[k[k.length - 1]] = E } } this.source._source._localdata.replace(D, b.extend({}, r)) } this.source.suspendKO = false } } if (this.sortcolumn && this.dataview.sortby && !this._updating) { var v = this.getsortinformation(); if (this.sortcolumn == z) { this.dataview.clearsortdata(); this.dataview.sortby(v.sortcolumn, v.sortdirection.ascending) } } else { if (!this._updating) { if (this.dataview.sortby) { if (this.dataview.sortcache[z]) { this.dataview.sortcache[z] = null } } } } this._cellscache = new Array(); if (this.source.updaterow && (w == undefined || w == true)) { var t = false; var L = this.that; var x = function (p) { if (false == p) { L.setcellvalue(s, z, u, true, false); if (u != y) { L.setcellvalue(s, L.getcolumn(z).displayfield, y, true, false) } } }; try { var q = this.getrowid(i); t = this.source.updaterow(q, m, x); if (t == undefined) { t = true } } catch (F) { t = false; L.setcellvalue(s, z, u, true, false); if (u != y) { L.setcellvalue(s, L.getcolumn(z).displayfield, y, true, false) } return } } var n = this.vScrollInstance.value; if (this._updating && l != true) { l = false } if (l == true || l == undefined) { var L = this.that; var f = function () { if (L.pageable && L.updatepagerdetails) { L.updatepagerdetails(); if (L.autoheight || L.autorowheight) { L._updatepageviews() } } }; var G = this.groupable && this.groups.length > 0; if (A && !G) { if (this.autoheight || this.autorowheight) { this.prerenderrequired = true } this.dataview.refresh(); this.rendergridcontent(true, false); f(); this._renderrows(this.virtualsizeinfo) } else { if (this.sortcolumn && !G) { if (this.autoheight || this.autorowheight) { this.prerenderrequired = true } this.dataview.reloaddata(); this.rendergridcontent(true, false); f(); this._renderrows(this.virtualsizeinfo) } else { if (this.groupable && this.groups.length > 0) { if (this.autoheight || this.autorowheight) { this.prerenderrequired = true } if (this.pageable) { if (this.groups.indexOf(z) != -1) { this._pagescache = new Array(); this._cellscache = new Array(); this.dataview.refresh(); this._render(true, true, false, false) } else { this._pagescache = new Array(); this._cellscache = new Array(); this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } } else { this._pagescache = new Array(); this._cellscache = new Array(); this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } } else { this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } } } } this.vScrollInstance.setPosition(n); if (this.showaggregates && this._updatecolumnsaggregates) { this._updatecolumnsaggregates() } if (this.showfilterrow && this.filterable && this.filterrow) { var d = this.getcolumn(z).filtertype; if (d == "list" || d == "checkedlist") { this._updatelistfilters(true) } } this._raiseEvent(19, { rowindex: s, datafield: z, newvalue: E, value: E, oldvalue: u }); return true }, getcellvalue: function (h, d) { if (h == null || d == null) { return null } var e = parseInt(h); var g = h; if (!isNaN(e)) { g = this.getrowdata(e) } if (g != null) { var f = g[d]; return f } return null }, getrows: function () { var h = this.dataview.records.length; if (this.virtualmode) { var j = new Array(); for (var e = 0; e < this.dataview.records.length; e++) { var d = this.dataview.records[e]; if (d) { j.push(d) } } if (this.dataview.records.length === undefined) { b.each(this.dataview.records, function () { var i = this; if (i) { j.push(i) } }) } var g = 0; if (this.pageable) { g = this.dataview.pagenum * this.dataview.pagesize } if (j.length > this.source._source.totalrecords - g) { return j.slice(0, this.source._source.totalrecords - g) } return j } if (this.dataview.sortdata) { var j = new Array(); for (var e = 0; e < h; e++) { var f = {}; f = b.extend({}, this.dataview.sortdata[e].value); j[e] = f } return j } else { return this.dataview.records } }, getrowboundindexbyid: function (g) { var f = this.dataview.recordsbyid["id" + g]; if (f) { if (f.boundindex) { return this.getboundindex(f) } } var e = this.getboundrows(); for (var d = 0; d < e.length; d++) { if (e[d]) { if (e[d].uid == g) { return d } } } return -1 }, getrowdatabyid: function (f) { var e = this.dataview.recordsbyid["id" + f]; if (e) { return e } else { var d = this.getrowboundindexbyid(f); return this.getboundrows()[d] } return null }, getrowdata: function (d) { if (d == undefined) { d = 0 } if (this.virtualmode) { var e = this.dataview.records[d]; return e } else { var e = this.getboundrows()[d]; return e } return null }, getrenderedrowdata: function (d, f) { if (d == undefined) { d = 0 } if (this.virtualmode) { var g = this.getrowvisibleindex(d); var e = this.dataview.loadedrecords[g]; return e } var g = this.getrowvisibleindex(d); if (g >= 0) { if (this.groupable && this.groups.length > 0) { var e = this.dataview.loadedrecords[g] } else { var e = this.dataview.loadedrecords[g]; if (this.pageable && (f == undefined || f == false)) { var e = this.dataview.loadedrecords[this.dataview.pagesize * this.dataview.pagenum + d] } } return e } return null }, getboundrows: function () { return this.dataview.cachedrecords }, getrowdisplayindex: function (d) { var f = this.getdisplayrows(); for (var e = 0; e < f.length; e++) { if (f[e].dataindex !== undefined) { if (f[e].dataindex === d) { return f[e].visibleindex } } else { if (f[e].boundindex === d) { return f[e].visibleindex } } } return -1 }, getboundindex: function (e) { var d = e.boundindex; if (this.groupable && this.groups.length > 0 && this.pageable) { if (e.bounddata) { d = this.getrowboundindexbyid(e.bounddata.uid) } } if (this.dataview.filters.length > 0) { if (e.bounddata) { if (e.bounddata.dataindex !== undefined) { d = e.bounddata.dataindex } } else { if (e.dataindex !== undefined) { d = e.dataindex } } } return d }, getrowboundindex: function (d) { var e = this.getdisplayrows()[d]; if (e) { if (e.dataindex !== undefined) { return e.dataindex } return e.boundindex } return -1 }, getdisplayrows: function () { return this.dataview.loadedrecords }, getloadedrows: function () { return this.getdisplayrows() }, getvisiblerowdata: function (e) { var d = this.getvisiblerows(); if (d) { return d[e] } return null }, getloadedrowdata: function (e) { var d = this.getloadedrows(); if (d) { return d[e] } return null }, getvisiblerows: function () { if (this.virtualmode) { return this.dataview.loadedrecords } if (this.pageable) { var f = []; for (var e = 0; e < this.dataview.pagesize; e++) { var d = this.dataview.loadedrecords[e + (this.dataview.pagesize * this.dataview.pagenum)]; if (d == undefined) { break } f.push(d) } return f } else { if (this._startboundindex != undefined && this._endboundindex != undefined) { var f = []; for (var e = this._startvisibleindex; e <= this._endvisibleindex; e++) { var d = this.dataview.loadedrecords[e]; if (d == undefined) { break } f.push(d) } return f } } return this.dataview.loadedrecords }, getrowid: function (d) { if (d == undefined) { d = 0 } if (this.virtualmode) { var g = this.getrowvisibleindex(d); var f = this.dataview.loadedrecords[g]; if (f) { return f.uid } } else { var f = null; var e = this.dataview.filters.length > 0; if (d >= 0 && d < this.dataview.bounditems.length && !e) { if (this.groupable && this.groups.length > 0) { var g = this.getrowvisibleindex(d); var f = this.dataview.loadedrecords[g] } else { var g = this.getrowvisibleindex(d); var f = this.dataview.loadedrecords[g] } if (f) { return f.uid } } if (this.dataview.filters.length > 0) { var f = this.getboundrows()[d]; if (f) { if (f.uid != null) { return f.uid } } return null } } return null }, _updateGridData: function (e) { var d = false; if (this.filterable && this._initfilterpanel && this.dataview.filters.length) { d = true } if (d) { this.dataview.refresh(); if (e == "updaterow") { this._render(true, true, false, false, false); this.invalidate() } else { this.render() } } else { if (this.sortcolumn || (this.groupable && this.groups.length > 0)) { this.dataview.reloaddata(); this.render() } else { this._cellscache = new Array(); this._pagescache = new Array(); this._renderrows(this.virtualsizeinfo) } } if (this.showfilterrow && this.filterable && this.filterrow) { this._updatelistfilters(true) } }, updaterow: function (i, k, g) { if (i != undefined && k != undefined) { var h = this.that; var j = false; h._datachanged = true; var e = function (o, n, s) { if (o._loading) { throw new Error("jqxGrid: " + o.loadingerrormessage); return false } var q = false; if (!b.isArray(n)) { q = o.dataview.updaterow(n, s) } else { b.each(n, function (t, u) { q = o.dataview.updaterow(this, s[t], false) }); o.dataview.refresh() } var r = o.vScrollInstance.value; if (g == undefined || g == true) { if (o._updating == undefined || o._updating == false) { o._updateGridData("updaterow") } } if (o.showaggregates && o._updatecolumnsaggregates) { o._updatecolumnsaggregates() } if (o.source && o.source._knockoutdatasource && !o._updateFromAdapter && o.autokoupdates) { if (o.source._source._localdata) { var m = o.dataview.recordsbyid["id" + n]; var p = o.dataview.records.indexOf(m); var l = o.source._source._localdata()[p]; o.source.suspendKO = true; o.source._source._localdata.replace(l, b.extend({}, m)); o.source.suspendKO = false } } o.vScrollInstance.setPosition(r); return q }; if (this.source.updaterow) { var d = function (l) { if (l == true || l == undefined) { e(h, i, k) } else { j = false } }; try { j = this.source.updaterow(i, k, d); if (j == undefined) { j = true } } catch (f) { j = false } } else { j = e(h, i, k) } return j } return false }, deleterow: function (j, h) { if (j != undefined) { this._datachanged = true; var k = false; var i = this.that; var g = this.getrowboundindexbyid(j); if (g != undefined) { if (this.selectedrowindexes.indexOf(g) >= 0) { this.selectedrowindexes.splice(this.selectedrowindexes.indexOf(g), 1) } if (this.selectedrowindex == g) { this.selectedrowindex = -1 } } var e = function (m, l) { if (m._loading) { throw new Error("jqxGrid: " + m.loadingerrormessage); return false } var n = false; var o = m.vScrollInstance.value; if (!b.isArray(l)) { var n = m.dataview.deleterow(l) } else { b.each(l, function () { n = m.dataview.deleterow(this, false) }); m.dataview.refresh() } if (m._updating == undefined || m._updating == false) { if (h == undefined || h == true) { m._render(true, true, false, false); if (m.vScrollBar.css("visibility") != "visible") { m._arrange(); m._updatecolumnwidths(); m._updatecellwidths(); m._renderrows(m.virtualsizeinfo) } } } if (m.source && m.source._knockoutdatasource && !m._updateFromAdapter && m.autokoupdates) { if (m.source._source._localdata) { m.source.suspendKO = true; m.source._source._localdata.pop(rowdata); m.source.suspendKO = false } } if (m.dataview.sortby) { m.dataview.clearsortdata() } m.vScrollInstance.setPosition(o); return n }; if (this.source.deleterow) { var d = function (l) { if (l == true || l == undefined) { e(i, j) } }; try { this.source.deleterow(j, d); if (k == undefined) { k = true } } catch (f) { k = false } } else { k = e(i, j) } return k } return false }, addrow: function (f, o, j) { if (o != undefined) { this._datachanged = true; if (j == undefined) { j = "last" } var n = false; var m = this.that; if (f == null) { var g = this.dataview.filters && this.dataview.filters.length > 0; var l = !g ? this.dataview.totalrecords : this.dataview.cachedrecords.length; if (!b.isArray(o)) { f = this.dataview.getid(this.dataview.source.id, o, l); while (null != this.dataview.recordsbyid["id" + f]) { f++ } } else { var d = new Array(); b.each(o, function (e, p) { var q = m.dataview.getid(m.dataview.source.id, o[e], l + e); d.push(q) }); f = d } } var h = function (q, p, t, e) { if (q._loading) { throw new Error("jqxGrid: " + q.loadingerrormessage); return false } var s = q.vScrollInstance.value; var r = false; if (!b.isArray(t)) { if (t != undefined && t.dataindex != undefined) { delete t.dataindex } r = q.dataview.addrow(p, t, e) } else { b.each(t, function (u, v) { if (this.dataindex != undefined) { delete this.dataindex } var w = null; if (p != null && p[u] != null) { w = p[u] } r = q.dataview.addrow(w, this, e, false) }); q.dataview.refresh() } if (q._updating == undefined || q._updating == false) { q._render(true, true, false, false); q.invalidate() } if (q.source && q.source._knockoutdatasource && !q._updateFromAdapter && q.autokoupdates) { if (q.source._source._localdata) { q.source.suspendKO = true; q.source._source._localdata.push(t); q.source.suspendKO = false } } if (q.scrollmode != "deferred") { q.vScrollInstance.setPosition(s) } else { q.vScrollInstance.setPosition(0) } return r }; if (this.source.addrow) { var i = function (e, p) { if (e == true || e == undefined) { if (p != undefined) { f = p } h(m, f, o, j) } }; try { n = this.source.addrow(f, o, j, i); if (n == undefined) { n = true } } catch (k) { n = false } if (n == false) { return false } } else { h(this, f, o, j) } return n } return false }, _findvisiblerow: function (g, h) { if (g == undefined) { g = parseInt(this.vScrollInstance.value) } var e = 0; if (h == undefined || h == null) { h = this.rows.records } var d = h.length; while (e <= d) { mid = parseInt((e + d) / 2); var f = h[mid]; if (f == undefined) { break } if (f.top > g && f.top + f.height > g) { d = mid - 1 } else { if (f.top < g && f.top + f.height < g) { e = mid + 1 } else { return mid; break } } } return -1 }, _updatecellwidths: function () { var f = this.virtualsizeinfo; if (!f) { return } var p = this.that; if (p.gridcontent == undefined) { return } if (p.table == undefined) { p.table = p.gridcontent.find("#contenttable" + p.element.id) } var k = p.groupable && p.groups.length > 0; var q = 0; var l = f.visiblerecords; if (p.pageable && (p.autoheight || p.autorowheight)) { l = p.dataview.pagesize; if (p.groupable) { p.dataview.updateview(); l = p.dataview.rows.length } } if (!p.groupable && !p.pageable && (p.autoheight || p.autorowheight)) { l = p.dataview.totalrecords } if (p.rowdetails) { l += p.dataview.pagesize } if (!p.columns.records) { return } var r = p.columns.records.length; var t = p.table[0].rows; for (var n = 0; n < l; n++) { var d = t[n]; if (!d) { break } var s = d.cells; var h = 0; for (var m = 0; m < r; m++) { var g = p.columns.records[m]; var e = g.width; var o = s[m]; if (parseInt(o.style.left) != h) { o.style.left = h + "px" } if (parseInt(o.style.width) != e) { o.style.width = e + "px" } if (!(g.hidden && g.hideable)) { h += parseFloat(e) } else { o.style.display = "none" } } if (q == 0) { p.table.width(parseFloat(h) + 2); q = h } } if (p.showaggregates && p._updateaggregates) { p._updateaggregates() } if (p.showfilterrow && p.filterable && p._updatefilterrowui) { p._updatefilterrowui() } p._updatescrollbarsafterrowsprerender(); if (k) { p._renderrows(p.virtualsizeinfo) } }, _updatescrollbarsafterrowsprerender: function () { var g = this.that; var f = g.hScrollBar[0].style.visibility; var i = 0; var d = g.vScrollBar[0].style.visibility; if (d == "visible") { i = g.scrollbarsize + 3 } if (g.scrollbarautoshow) { i = 0 } var e = g.element.style.width; if (e.toString().indexOf("%") >= 0) { e = g.host.width() } else { e = parseInt(e) } if (parseInt(g.table[0].style.width) - 2 > e - i) { if (f != "visible") { if (!g.autowidth) { g.hScrollBar[0].style.visibility = "visible" } g._arrange() } if (d == "visible") { if (g.scrollmode != "deferred" && !g.virtualmode) { if (g.virtualsizeinfo) { var h = g.virtualsizeinfo.virtualheight - g._gettableheight(); if (!isNaN(h) && h > 0) { if (f != "hidden") { g.vScrollBar.jqxScrollBar("max", h + g.scrollbarsize + 4) } else { g.vScrollBar.jqxScrollBar("max", h) } } } } else { g._updatevscrollbarmax() } } else { i = -2 } g.hScrollBar.jqxScrollBar("max", i + g.table.width() - g.host.width()) } else { if (f != "hidden") { g.hScrollBar.css("visibility", "hidden"); g._arrange() } } g._renderhorizontalscroll() }, _prerenderrows: function (o) { var B = this.that; if (B.prerenderrequired == true) { B.prerenderrequired = false; if (B.editable && B._destroyeditors) { B._destroyeditors() } if (B.gridcontent == undefined) { return } B.gridcontent.find("#contenttable" + B.element.id).remove(); if (B.table != null) { B.table.remove(); B.table = null } B.table = b('<div id="contenttable' + B.element.id + '" style="overflow: hidden; position: relative;" height="100%"></div>'); B.gridcontent.addClass(B.toTP("jqx-grid-content")); B.gridcontent.addClass(B.toTP("jqx-widget-content")); B.gridcontent.append(B.table); var A = B.groupable && B.groups.length > 0; var p = 0; B.table[0].rows = new Array(); var l = B.toTP("jqx-grid-cell"); if (A) { l = " " + B.toTP("jqx-grid-group-cell") } var u = o.visiblerecords; if (B.pageable && (B.autoheight || B.autorowheight)) { u = B.dataview.pagesize; if (B.groupable) { B.dataview.updateview(); u = B.dataview.rows.length; if (u < B.dataview.pagesize) { u = B.dataview.pagesize } } } if (!B.pageable && (B.autoheight || B.autorowheight)) { u = B.dataview.totalrecords } if (B.groupable && (B.autoheight || B.autorowheight) && !B.pageable) { u = B.dataview.rows.length } if (B.rowdetails) { if (B.autoheight || B.autorowheight) { u += B.dataview.pagesize } else { u += u } } if (!B.columns.records) { return } var z = B.columns.records.length; if (b.jqx.browser.msie && b.jqx.browser.version > 8) { B.table.css("opacity", "0.99") } if (b.jqx.browser.mozilla) { } if (navigator.userAgent.indexOf("Safari") != -1) { B.table.css("opacity", "0.99") } var r = b.jqx.browser.msie && b.jqx.browser.version < 8; if (r) { B.host.attr("hideFocus", "true") } var k = B.tableZIndex; if (u * z > k) { k = u * z } var g = B.dataview.records.length == 0; var n = B.isTouchDevice(); var v = ""; B._hiddencolumns = false; for (var y = 0; y < u; y++) { var s = '<div role="row" style="position: relative; height=' + B.rowsheight + 'px;" id="row' + y + B.element.id + '">'; if (r) { var s = '<div role="row" style="position: relative; z-index: ' + k + "; height:" + B.rowsheight + 'px;" id="row' + y + B.element.id + '">'; k-- } var f = 0; for (var w = 0; w < z; w++) { var x = B.columns.records[w]; var t = x.width; if (t < x.minwidth) { t = x.minwidth } if (t > x.maxwidth) { t = x.maxwidth } if (B.rtl) { var q = k - z + 2 * w; var d = '<div role="gridcell" style="left: ' + f + "px; z-index: " + q + "; width:" + t + "px;"; k-- } else { var d = '<div role="gridcell" style="left: ' + f + "px; z-index: " + k-- + "; width:" + t + "px;" } if (!(x.hidden && x.hideable)) { f += t } else { d += "display: none;"; B._hiddencolumns = true; k++ } d += '" class="' + l + '"></div>'; s += d } if (p == 0) { B.table.width(parseInt(f) + 2); p = f } s += "</div>"; v += s } if (B.WinJS) { MSApp.execUnsafeLocalFunction(function () { B.table.html(v) }) } else { B.table[0].innerHTML = v } B.table[0].rows = new Array(); var m = B.table.children(); for (var y = 0; y < u; y++) { var h = m[y]; B.table[0].rows.push(h); h.cells = new Array(); var e = b(h).children(); for (var w = 0; w < z; w++) { h.cells.push(e[w]) } } if (u == 0) { var f = 0; if (B.showemptyrow) { var s = b('<div style="position: relative;" id="row0' + B.element.id + '"></div>'); B.table.append(s); s.height(B.rowsheight); B.table[0].rows[0] = s[0]; B.table[0].rows[0].cells = new Array() } for (var w = 0; w < z; w++) { var x = B.columns.records[w]; var t = x.width; if (B.showemptyrow) { var d = b('<div style="position: absolute; height: 100%; left: ' + f + "px; z-index: " + k-- + "; width:" + t + 'px;" class="' + l + '"></div>'); d.height(B.rowsheight); s.append(d); B.table[0].rows[0].cells[w] = d[0] } if (t < x.minwidth) { t = x.minwidth } if (t > x.maxwidth) { t = x.maxwidth } if (!(x.hidden && x.hideable)) { f += t } } B.table.width(parseInt(f) + 2); p = f } B._updatescrollbarsafterrowsprerender(); if (B.rendered) { B.rendered("rows") } B._addoverlayelement() } }, _groupsheader: function () { return this.groupable && this.showgroupsheader }, _arrange: function () { var A = null; var x = null; this.tableheight = null; var F = this.that; var n = false; var m = false; if (F.width != null && F.width.toString().indexOf("px") != -1) { A = F.width } else { if (F.width != undefined && !isNaN(F.width)) { A = F.width } } if (F.width != null && F.width.toString().indexOf("%") != -1) { A = F.width; n = true } if (F.scrollbarautoshow) { F.vScrollBar[0].style.display = "none"; F.hScrollBar[0].style.display = "none"; F.vScrollBar[0].style.zIndex = F.tableZIndex + F.headerZIndex; F.hScrollBar[0].style.zIndex = F.tableZIndex + F.headerZIndex } if (F.autowidth) { var p = 0; for (var B = 0; B < F.columns.records.length; B++) { var e = F.columns.records[B].width; if (e == "auto") { e = F._measureElementWidth(F.columns.records[B].text); p += e } else { p += e } } if (F.vScrollBar.css("visibility") != "hidden") { p += F.scrollbarsize + 4 } A = p; F.width = A } if (F.height != null && F.height.toString().indexOf("px") != -1) { x = F.height } else { if (F.height != undefined && !isNaN(F.height)) { x = F.height } } if (F.height != null && F.height.toString().indexOf("%") != -1) { x = F.height; m = true } var k = function () { var i = 0; var w = F.showheader ? F.columnsheader != null ? F.columnsheader.height() + 2 : 0 : 0; i += w; if (F.pageable) { i += F.pagerheight } if (F._groupsheader()) { i += F.groupsheaderheight } if (F.showtoolbar) { i += F.toolbarheight } if (F.showstatusbar) { i += F.statusbarheight } if (F.hScrollBar[0].style.visibility == "visible") { i += 20 } return i }; if (F.autoheight && F.virtualsizeinfo) { if (F.pageable && F.gotopage) { var C = 0; x = C + (F._pageviews[0] ? F._pageviews[0].height : 0); x += k(); if (F.showemptyrow && F.dataview.totalrecords == 0) { x += F.rowsheight } } else { var C = F.host.height() - F._gettableheight(); if (F._pageviews.length > 0) { x = C + F._pageviews[F._pageviews.length - 1].height + F._pageviews[F._pageviews.length - 1].top; F.vScrollBar[0].style.visibility = "hidden" } else { x = k(); if (F.showemptyrow) { x += F.rowsheight } } } } else { if (F.autoheight) { x = F.dataview.totalrecords * F.rowsheight; if (F._loading) { x = 250; F.dataloadelement.height(x) } x += k(); if (x > 10000) { x = 10000 } } } if (A != null) { A = parseInt(A); if (!n) { if (F.element.style.width != parseInt(F.width) + "px") { F.element.style.width = parseInt(F.width) + "px" } } else { F.element.style.width = F.width } if (n) { A = F.host.width(); if (A <= 2) { A = 600; F.host.width(A) } if (!F._oldWidth) { F._oldWidth = A } } } else { F.host.width(250) } if (x != null) { if (!m) { x = parseInt(x) } if (!m) { if (F.element.style.height != parseInt(x) + "px") { F.element.style.height = parseInt(x) + "px" } } else { F.element.style.height = F.height } if (m && !F.autoheight) { x = F.host.height(); if (x == 0) { x = 400; F.host.height(x) } if (!F._oldHeight) { F._oldHeight = x } } } else { F.host.height(250) } if (F.autoheight) { F.tableheight = null; F._gettableheight() } var v = 0; if (F.showtoolbar) { F.toolbar.width(A); F.toolbar.height(F.toolbarheight - 1); F.toolbar.css("top", 0); v += F.toolbarheight; x -= parseInt(F.toolbarheight) } else { F.toolbar[0].style.height = "0px" } if (F.showstatusbar) { if (F.showaggregates) { F.statusbar.width(!F.table ? A : Math.max(A, F.table.width())) } else { F.statusbar.width(A) } F.statusbar.height(F.statusbarheight) } else { F.statusbar[0].style.height = "0px" } if (F._groupsheader()) { F.groupsheader.width(A); F.groupsheader.height(F.groupsheaderheight); F.groupsheader.css("top", v); var y = F.groupsheader.height() + 1; v += y; if (x > y) { x -= parseInt(y) } } else { if (F.groupsheader[0].style.width != A + "px") { F.groupsheader[0].style.width = parseInt(A) + "px" } F.groupsheader[0].style.height = "0px"; if (F.groupsheader[0].style.top != v + "px") { F.groupsheader.css("top", v) } var y = F.showgroupsheader && F.groupable ? F.groupsheaderheight : 0; var f = v + y + "px"; if (F.content[0].style.top != f) { F.content.css("top", v + F.groupsheaderheight) } } var d = F.scrollbarsize; if (isNaN(d)) { d = parseInt(d); if (isNaN(d)) { d = "17px" } else { d = d + "px" } } d = parseInt(d); var s = 4; var h = 2; var j = 0; if (F.vScrollBar[0].style.visibility == "visible") { j = d + s } if (F.hScrollBar[0].style.visibility == "visible") { h = d + s + 2 } var r = 0; if (F.pageable) { r = F.pagerheight; h += F.pagerheight } if (F.showstatusbar) { h += F.statusbarheight; r += F.statusbarheight } if (F.hScrollBar[0].style.height != d + "px") { F.hScrollBar[0].style.height = parseInt(d) + "px" } if (F.hScrollBar[0].style.top != v + x - s - d - r + "px" || F.hScrollBar[0].style.left != "0px") { F.hScrollBar.css({ top: v + x - s - d - r + "px", left: "0px" }) } var q = F.hScrollBar[0].style.width; var l = false; var D = false; if (j == 0) { if (q != (A - 2) + "px") { F.hScrollBar.width(A - 2); l = true } } else { if (q != (A - d - s) + "px") { F.hScrollBar.width(A - d - s + "px"); l = true } } if (!F.autoheight) { if (F.vScrollBar[0].style.width != d + "px") { F.vScrollBar.width(d); D = true } if (F.vScrollBar[0].style.height != parseInt(x) - h + "px") { F.vScrollBar.height(parseInt(x) - h + "px"); D = true } if (F.vScrollBar[0].style.left != parseInt(A) - parseInt(d) - s + "px" || F.vScrollBar[0].style.top != v + "px") { F.vScrollBar.css({ left: parseInt(A) - parseInt(d) - s + "px", top: v }) } } if (F.rtl) { F.vScrollBar.css({ left: "0px", top: v }); if (F.vScrollBar.css("visibility") != "hidden") { F.hScrollBar.css({ left: d + 2 }) } } var o = F.vScrollInstance; o.disabled = F.disabled; if (!F.autoheight) { if (D) { o.refresh() } } var z = F.hScrollInstance; z.disabled = F.disabled; if (l) { z.refresh() } if (F.autowidth) { F.hScrollBar[0].style.visibility = "hidden" } F.statusbarheight = parseInt(F.statusbarheight); F.toolbarheight = parseInt(F.toolbarheight); var t = function (i) { if ((i.vScrollBar[0].style.visibility == "visible") && (i.hScrollBar[0].style.visibility == "visible")) { i.bottomRight[0].style.visibility = "visible"; i.bottomRight.css({ left: 1 + parseInt(i.vScrollBar.css("left")), top: parseInt(i.hScrollBar.css("top")) }); if (i.rtl) { i.bottomRight.css("left", "0px") } i.bottomRight.width(parseInt(d) + 3); i.bottomRight.height(parseInt(d) + 4); if (i.showaggregates) { i.bottomRight.css("z-index", 99); i.bottomRight.height(parseInt(d) + 4 + i.statusbarheight); i.bottomRight.css({ top: parseInt(i.hScrollBar.css("top")) - i.statusbarheight }) } } else { i.bottomRight[0].style.visibility = "hidden" } }; t(this); if (F.content[0].style.width != A - j + "px") { F.content.width(A - j) } if (F.content[0].style.height != x - h + 3 + "px") { F.content.height(x - h + 3) } if (F.scrollbarautoshow) { if (F.content[0].style.width != A + "px") { F.content.width(A) } if (F.content[0].style.height != x + "px") { F.content.height(x) } } if (F.content[0].style.top != v + "px") { F.content.css("top", v) } if (F.rtl) { F.content.css("left", j); if (F.scrollbarautoshow) { F.content.css("left", "0px") } if (F.table) { var u = F.table.width(); if (u < A - j) { F.content.css("left", A - u) } } } if (F.showstatusbar) { F.statusbar.css("top", v + x - F.statusbarheight - (F.pageable ? F.pagerheight : 0)); if (F.showaggregates) { if (F.hScrollBar.css("visibility") == "visible") { F.hScrollBar.css({ top: v + x - s - d - r + F.statusbarheight + "px" }); F.statusbar.css("top", 1 + v + x - d - 5 - F.statusbarheight - (F.pageable ? F.pagerheight : 0)) } t(this) } if (F.rtl) { if (F.hScrollBar.css("visibility") != "visible") { F.statusbar.css("left", F.content.css("left")) } else { F.statusbar.css("left", "0px") } } } if (F.pageable) { F.pager.width(A); F.pager.height(F.pagerheight); F.pager.css("top", v + x - F.pagerheight - 1) } else { F.pager[0].style.height = "0px" } if (F.table != null) { var g = -2; if (F.vScrollBar[0].style.visibility == "visible") { g = F.scrollbarsize + 3 } if (F.hScrollBar[0].style.visibility == "visible") { var E = g + F.table.width() - F.host.width(); if (E >= 0) { F.hScrollBar.jqxScrollBar("max", E) } if (F.hScrollBar[0].style.visibility == "visible" && E == 0) { F.hScrollBar[0].style.visibility = "hidden"; F._arrange() } } } if (A != parseInt(F.dataloadelement[0].style.width)) { F.dataloadelement[0].style.width = F.element.style.width } if (x != parseInt(F.dataloadelement[0].style.height)) { F.dataloadelement[0].style.height = F.element.style.height } F._hostwidth = A }, destroy: function () { delete b.jqx.dataFormat.datescache; delete this.gridlocalization; b.jqx.utilities.resize(this.host, null, true); if (this.table && this.table[0]) { var m = this.table[0].rows.length; for (var k = 0; k < m; k++) { var q = this.table[0].rows[k]; var p = q.cells; var f = p.length; for (var h = 0; h < f; h++) { b(q.cells[h]).remove(); q.cells[h] = null; delete q.cells[h] } q.cells = null; if (q.cells) { delete q.cells } b(this.table[0].rows[k]).remove(); this.table[0].rows[k] = null } try { delete this.table[0].rows } catch (n) { } this.table.remove(); delete this.table } if (this.columns && this.columns.records) { for (var k = 0; k < this.columns.records.length; k++) { var e = this.columns.records[k]; this._removecolumnhandlers(this.columns.records[k]); if (e.element) { b(e.element).remove(); b(e.sortasc).remove(); b(e.sortdesc).remove(); b(e.filtericon).remove(); b(e.menu).remove(); e.element = null; e.uielement = null; e.sortasc = null; e.sortdesc = null; e.filtericon = null; e.menu = null; delete e.element; delete e.uielement; delete e.sortasc; delete e.sortdesc; delete e.filtericon; delete e.menu; delete this.columnsrow[0].cells[k] } } try { delete this.columnsrow[0].cells } catch (n) { } delete this.columnsrow } b.removeData(document.body, "contextmenu" + this.element.id); if (this.host.jqxDropDownList) { if (this._destroyfilterpanel) { this._destroyfilterpanel() } } if (this.editable && this._destroyeditors) { this._destroyeditors() } if (this.filterable && this._destroyedfilters && this.showfilterrow) { this._destroyedfilters() } if (this.host.jqxMenu) { if (this.gridmenu) { this.removeHandler(b(document), "click.menu" + this.element.id); this.removeHandler(this.gridmenu, "keydown"); this.removeHandler(this.gridmenu, "closed"); this.removeHandler(this.gridmenu, "itemclick"); this.gridmenu.jqxMenu("destroy"); this.gridmenu = null } } if (this.pagershowrowscombo) { this.pagershowrowscombo.jqxDropDownList("destroy"); this.pagershowrowscombo = null } if (this.pagerrightbutton) { this.removeHandler(this.pagerrightbutton, "mousedown"); this.removeHandler(this.pagerrightbutton, "mouseup"); this.removeHandler(this.pagerrightbutton, "click"); this.pagerrightbutton.jqxButton("destroy"); this.pagerrightbutton = null } if (this.pagerleftbutton) { this.removeHandler(this.pagerleftbutton, "mousedown"); this.removeHandler(this.pagerleftbutton, "mouseup"); this.removeHandler(this.pagerleftbutton, "click"); this.pagerleftbutton.jqxButton("destroy"); this.removeHandler(b(document), "mouseup.pagerbuttons" + this.element.id); this.pagerleftbutton = null } this.removeHandler(b(document), "selectstart." + this.element.id); this.removeHandler(b(document), "mousedown.resize" + this.element.id); this.removeHandler(b(document), "mouseup.resize" + this.element.id); this.removeHandler(b(document), "mousemove.resize" + this.element.id); if (this.isTouchDevice()) { var l = b.jqx.mobile.getTouchEventName("touchmove") + ".resize" + this.element.id; var d = b.jqx.mobile.getTouchEventName("touchstart") + ".resize" + this.element.id; var g = b.jqx.mobile.getTouchEventName("touchend") + ".resize" + this.element.id; this.removeHandler(b(document), l); this.removeHandler(b(document), d); this.removeHandler(b(document), g) } this.removeHandler(b(document), "mousedown.reorder" + this.element.id); this.removeHandler(b(document), "mouseup.reorder" + this.element.id); this.removeHandler(b(document), "mousemove.reorder" + this.element.id); if (this.isTouchDevice()) { var l = b.jqx.mobile.getTouchEventName("touchmove") + ".reorder" + this.element.id; var d = b.jqx.mobile.getTouchEventName("touchstart") + ".reorder" + this.element.id; var g = b.jqx.mobile.getTouchEventName("touchend") + ".reorder" + this.element.id; this.removeHandler(b(document), l); this.removeHandler(b(document), d); this.removeHandler(b(document), g) } this.removeHandler(b(window), "resize." + this.element.id); if (this.groupable) { var l = "mousemove.grouping" + this.element.id; var d = "mousedown.grouping" + this.element.id; var g = "mouseup.grouping" + this.element.id; this.removeHandler(b(document), l); this.removeHandler(b(document), d); this.removeHandler(b(document), g) } if (this.columnsreorder) { var l = "mousemove.reorder" + this.element.id; var d = "mousedown.reorder" + this.element.id; var g = "mouseup.reorder" + this.element.id; this.removeHandler(b(document), l); this.removeHandler(b(document), d); this.removeHandler(b(document), g); delete this.columnsbounds } if (this.content) { this.removeHandler(this.content, "mousedown"); this.removeHandler(this.content, "scroll") } this._removeHandlers(); this.hScrollInstance.destroy(); this.vScrollInstance.destroy(); this.hScrollBar.remove(); this.vScrollBar.remove(); this._clearcaches(); delete this.hScrollInstance; delete this.vScrollInstance; delete this.visiblerows; delete this.hittestinfo; delete this.rows; delete this.columns; delete this.columnsbydatafield; delete this.pagescache; delete this.pageviews; delete this.cellscache; delete this.heights; delete this.hiddens; delete this.hiddenboundrows; delete this.heightboundrows; delete this.detailboundrows; delete this.details; delete this.expandedgroups; delete this._rowdetailscache; delete this._rowdetailselementscache; delete this.columnsmenu; this.columnsheader.remove(); delete this.columnsheader; this.selectionarea.remove(); delete this.selectionarea; if (this.menuitemsarray && this.menuitemsarray.length) { var o = this.menuitemsarray.length; for (var k = 0; k < o; k++) { b(this.menuitemsarray[k]).remove() } } delete this.menuitemsarray; this.dataview._clearcaches(); this.content.removeClass(); this.content.remove(); this.content = null; delete this.content; this.vScrollBar = null; this.hScrollBar = null; delete this.hScrollBar; delete this.hScrollBar; this.gridcontent.remove(); delete this.gridcontent; if (this.gridmenu) { this.gridmenu = null; delete this.gridmenu } delete this._mousemovefunc; delete this._mousewheelfunc; this.dataview.destroy(); delete this.dataview; this.bottomRight.remove(); delete this.bottomRight; this.wrapper.remove(); delete this.wrapper; if (this.pagerdiv) { this.pagerdiv.remove(); delete this.pagerdiv } if (this.pagerpageinput) { this.pagerpageinput.remove(); delete this.pagerpageinput } if (this.pagergoto) { this.pagergoto.remove(); delete this.pagergoto } if (this.pagershowrows) { this.pagershowrows.remove(); delete this.pagershowrows } if (this.pagerfirstbutton) { this.pagerfirstbutton.remove(); delete this.pagerfirstbutton } if (this.pagerlastbutton) { this.pagerlastbutton.remove(); delete this.pagerlastbutton } if (this.pagerbuttons) { this.pagerbuttons.remove(); delete this.pagerbuttons } if (this.pagerdetails) { this.pagerdetails.remove(); delete this.pagerdetails } if (this.pagergotoinput) { this.pagergotoinput.remove(); delete this.pagergotoinput } this.pager.remove(); delete this.pager; this.groupsheader.remove(); delete this.groupsheader; this.dataloadelement.remove(); delete this.dataloadelement; this.toolbar.remove(); delete this.toolbar; this.statusbar.remove(); delete this.statusbar; this.host.removeData(); this.host.removeClass(); this.host.remove(); this.host = null; delete this.host; delete this.element; delete this.set; delete this.get; delete this.that; delete this.call }, _initializeColumns: function () { var f = this.source ? this.source.datafields : null; if (f == null && this.source && this.source._source) { f = this.source._source.datafields } var j = f ? f.length > 0 : false; if (this.autogeneratecolumns) { var l = new Array(); if (f) { b.each(f, function () { var i = { datafield: this.name, text: this.text || this.name, cellsformat: this.format || "" }; l.push(i) }) } else { if (this.source.records.length > 0) { var n = this.source.records[0]; for (obj in n) { if (obj != "uid") { var g = { width: 100, datafield: obj, text: obj }; l.push(g) } } } } this.columns = l } if (this.columns && this.columns.records) { for (var h = 0; h < this.columns.records.length; h++) { this._removecolumnhandlers(this.columns.records[h]) } } var k = this.that; var e = new b.jqx.collection(this.element); var d = 0; this._haspinned = false; if (!this._columns) { this._columns = this.columns } else { this.columns = this._columns } if (this.groupable) { b.each(this.groups, function (i) { var o = new c(k, this); o.visibleindex = d++; o.width = k.groupindentwidth; e.add(o); o.grouped = true; o.filterable = false; o.sortable = false; o.editable = false; o.resizable = false; o.draggable = false }) } if (this.rowdetails && this.showrowdetailscolumn) { var g = new c(k, this); g.visibleindex = d++; g.width = k.groupindentwidth; g.pinned = true; g.editable = false; g.filterable = false; g.draggable = false; g.groupable = false; g.resizable = false; e.add(g); k._haspinned = true } if (this.selectionmode == "checkbox") { var g = new c(k, null); g.visibleindex = d++; g.width = k.groupindentwidth; g.checkboxcolumn = true; g.editable = false; g.columntype = "checkbox"; g.groupable = false; g.draggable = false; g.filterable = false; g.resizable = false; g.datafield = "_checkboxcolumn"; e.add(g) } var m = new Array(); b.each(this.columns, function (i) { if (k.columns[i] != undefined) { var o = new c(k, this); o.visibleindex = d++; if (this.dataField != undefined) { this.datafield = this.dataField } if (this.pinned) { k._haspinned = true } if (this.datafield == null) { if (k.source && k.source._source && (k.source._source.datatype == "array")) { if (!j) { if (!k.source._source.datafields) { k.source._source.datafields = new Array(); k.source._source.datafields.push({ name: i.toString() }) } else { k.source._source.datafields.push({ name: i.toString() }) } } this.datafield = i.toString(); this.displayfield = i.toString(); o.datafield = this.datafield; o.displayfield = this.displayfield } } else { if (m[this.datafield]) { throw new Error("jqxGrid: Invalid column 'datafield' setting. jqxGrid's columns should be initialized with unique data fields."); k.host.remove(); return false } else { m[this.datafield] = true } } e.add(o) } }); if (this.rtl) { e.records.reverse() } this.columns = e }, _initializeRows: function () { var d = new b.jqx.collection(this.element); if (this.rows) { this.rows.clear() } this.rows = d }, _raiseEvent: function (h, e) { if (e == undefined) { e = { owner: null } } if (this._trigger === false) { return } var f = this.events[h]; if (!this._camelCase) { f = f.toLowerCase() } args = e; args.owner = this; var g = new b.Event(f); g.owner = this; g.args = args; var d = this.host.trigger(g); e = g.args; return d }, wheel: function (f, e) { if (e.autoheight && e.hScrollBar.css("visibility") != "visible") { f.returnValue = true; return true } var g = 0; if (!f) { f = window.event } if (f.originalEvent && f.originalEvent.wheelDelta) { f.wheelDelta = f.originalEvent.wheelDelta } if (f.wheelDelta) { g = f.wheelDelta / 120 } else { if (f.detail) { g = -f.detail / 3 } } if (g) { var d = e._handleDelta(g); if (d) { if (f.preventDefault) { f.preventDefault() } if (f.originalEvent != null) { f.originalEvent.mouseHandled = true } if (f.stopPropagation != undefined) { f.stopPropagation() } } if (d) { d = false; f.returnValue = d; return d } else { return false } } if (f.preventDefault) { f.preventDefault() } f.returnValue = false }, _handleDelta: function (f) { if (this.vScrollBar.css("visibility") != "hidden") { var e = this.vScrollInstance.value; if (f < 0) { this.scrollDown() } else { this.scrollUp() } var d = this.vScrollInstance.value; if (e != d) { return true } } else { if (this.hScrollBar.css("visibility") != "hidden") { var e = this.hScrollInstance.value; if (f > 0) { if (this.hScrollInstance.value > 2 * this.horizontalscrollbarstep) { this.hScrollInstance.setPosition(this.hScrollInstance.value - 2 * this.horizontalscrollbarstep) } else { this.hScrollInstance.setPosition(0) } } else { if (this.hScrollInstance.value < this.hScrollInstance.max) { this.hScrollInstance.setPosition(this.hScrollInstance.value + 2 * this.horizontalscrollbarstep) } else { this.hScrollInstance.setPosition(this.hScrollInstance.max) } } var d = this.hScrollInstance.value; if (e != d) { return true } } } return false }, scrollDown: function () { if (this.vScrollBar.css("visibility") == "hidden") { return } var d = this.vScrollInstance; if (d.value + this.rowsheight <= d.max) { d.setPosition(parseInt(d.value) + this.rowsheight) } else { d.setPosition(d.max) } }, scrollUp: function () { if (this.vScrollBar.css("visibility") == "hidden") { return } var d = this.vScrollInstance; if (d.value - this.rowsheight >= d.min) { d.setPosition(parseInt(d.value) - this.rowsheight) } else { d.setPosition(d.min) } }, _removeHandlers: function () { var d = this.that; d.removeHandler(d.vScrollBar, "valueChanged"); d.removeHandler(d.hScrollBar, "valueChanged"); d.vScrollInstance.valueChanged = null; d.hScrollInstance.valueChanged = null; var e = "mousedown.jqxgrid"; if (d.isTouchDevice()) { e = b.jqx.mobile.getTouchEventName("touchend") } d.removeHandler(d.host, "dblclick.jqxgrid"); d.removeHandler(d.host, e); d.removeHandler(d.content, "mousemove", d._mousemovefunc); d.removeHandler(d.host, "mouseleave.jqxgrid"); d.removeHandler(d.content, "mouseenter"); d.removeHandler(d.content, "mouseleave"); d.removeHandler(d.content, "mousedown"); d.removeHandler(d.content, "scroll"); d.removeHandler(d.content, "selectstart." + d.element.id); d.removeHandler(d.host, "dragstart." + d.element.id); d.removeHandler(d.host, "keydown.edit" + d.element.id); d.removeHandler(b(document), "keydown.edit" + d.element.id); d.removeHandler(b(document), "keyup.edit" + d.element.id); if (d._mousemovedocumentfunc) { d.removeHandler(b(document), "mousemove.selection" + d.element.id, d._mousemovedocumentfunc) } d.removeHandler(b(document), "mouseup.selection" + d.element.id); if (d._mousewheelfunc) { d.removeHandler(d.host, "mousewheel", d._mousewheelfunc) } if (d.editable) { d.removeHandler(b(document), "mousedown.gridedit" + d.element.id) } if (d.host.off) { d.content.off("mousemove"); d.host.off("mousewheel") } }, _addHandlers: function () { var e = this.that; var d = e.isTouchDevice(); if (!d) { e.addHandler(e.host, "dragstart." + e.element.id, function (j) { return false }) } if (e.scrollbarautoshow) { e.addHandler(e.host, "mouseenter.gridscroll" + e.element.id, function (j) { e.vScrollBar.fadeIn("fast"); e.hScrollBar.fadeIn("fast") }); e.addHandler(e.host, "mouseleave.gridscroll" + e.element.id, function (j) { if (!e.vScrollInstance.isScrolling() && !e.hScrollInstance.isScrolling()) { e.vScrollBar.fadeOut("fast"); e.hScrollBar.fadeOut("fast") } }) } if (e.editable) { e.addHandler(b(document), "mousedown.gridedit" + e.element.id, function (m) { if (e.editable && e.begincelledit) { if (e.editcell) { if (!e.vScrollInstance.isScrolling() && !e.vScrollInstance.isScrolling()) { var r = e.host.coord(); var q = e.host.width(); var n = e.host.height(); var v = false; var k = false; var t = false; if (m.pageY < r.top || m.pageY > r.top + n) { v = true; k = true } if (m.pageX < r.left || m.pageX > r.left + q) { v = true; t = true } if (v) { var u = false; if (e.editcell && e.editcell.editor) { switch (e.editcell.columntype) { case "datetimeinput": if (e.editcell.editor.jqxDateTimeInput && e.editcell.editor.jqxDateTimeInput("container") && e.editcell.editor.jqxDateTimeInput("container")[0].style.display == "block") { var s = e.editcell.editor.jqxDateTimeInput("container").coord().top; var j = e.editcell.editor.jqxDateTimeInput("container").coord().top + e.editcell.editor.jqxDateTimeInput("container").height(); if (k && (m.pageY < s || m.pageY > j)) { v = true; e.editcell.editor.jqxDateTimeInput("close") } else { return } } break; case "combobox": if (e.editcell.editor.jqxComboBox && e.editcell.editor.jqxComboBox("container") && e.editcell.editor.jqxComboBox("container")[0].style.display == "block") { var s = e.editcell.editor.jqxComboBox("container").coord().top; var j = e.editcell.editor.jqxComboBox("container").coord().top + e.editcell.editor.jqxComboBox("container").height(); if (k && (m.pageY < s || m.pageY > j)) { v = true; e.editcell.editor.jqxComboBox("close") } else { return } } break; case "dropdownlist": if (e.editcell.editor.jqxDropDownList && e.editcell.editor.jqxDropDownList("container") && e.editcell.editor.jqxDropDownList("container")[0].style.display == "block") { var s = e.editcell.editor.jqxDropDownList("container").coord().top; var j = e.editcell.editor.jqxDropDownList("container").coord().top + e.editcell.editor.jqxDropDownList("container").height(); if (k && (m.pageY < s || m.pageY > j)) { v = true; e.editcell.editor.jqxDropDownList("close") } else { return } } break; case "template": case "custom": var l = ["jqxDropDownList", "jqxComboBox", "jqxDropDownButton", "jqxDateTimeInput"]; var p = function (A) { var z = e.editcell.editor.data(); if (z[A] && z[A].instance.container && z[A].instance.container[0].style.display == "block") { var x = z[A].instance; var B = x.container.coord().top; var y = x.container.coord().top + x.container.height(); if (k && (m.pageY < B || m.pageY > y)) { v = true; x.close(); return true } else { return false } } }; for (var o = 0; o < l.length; o++) { var w = p(l[o]); if (w == false) { return } } break } } e.endcelledit(e.editcell.row, e.editcell.column, false, true); e._oldselectedcell = null } } } } }) } e.vScrollInstance.valueChanged = function (j) { if (e.virtualsizeinfo) { e._closemenu(); if (e.scrollmode != "physical") { e._renderrows(e.virtualsizeinfo); e.currentScrollValue = j.currentValue } else { if (e.currentScrollValue != undefined && Math.abs(e.currentScrollValue - j.currentValue) >= 5) { e._renderrows(e.virtualsizeinfo); e.currentScrollValue = j.currentValue } else { e._renderrows(e.virtualsizeinfo); e.currentScrollValue = j.currentValue } } if (!e.pageable && !e.groupable && e.dataview.virtualmode) { if (e.loadondemandupdate) { clearTimeout(e.loadondemandupdate) } e.loadondemandupdate = setTimeout(function () { e.loadondemand = true; e._renderrows(e.virtualsizeinfo) }, 100) } if (d) { e._lastScroll = new Date() } } }; e.hScrollInstance.valueChanged = function (l) { if (e.virtualsizeinfo) { e._closemenu(); var k = function () { e._renderhorizontalscroll(); e._renderrows(e.virtualsizeinfo); if (e.editcell && !e.editrow) { if (e._showcelleditor && e.editcell.editing) { if (!e.hScrollInstance.isScrolling()) { e._showcelleditor(e.editcell.row, e.getcolumn(e.editcell.column), e.editcell.element, e.editcell.init) } } } }; var j = e._browser == undefined ? e._isIE10() : e._browser; if (navigator && navigator.userAgent.indexOf("Safari") != -1) { if (e._hScrollTimer) { clearTimeout(e._hScrollTimer) } e._hScrollTimer = setTimeout(function () { k() }, 1) } else { if (b.jqx.browser.msie) { if (e._hScrollTimer) { clearTimeout(e._hScrollTimer) } e._hScrollTimer = setTimeout(function () { k() }, 0.01) } else { k() } } if (d) { e._lastScroll = new Date() } } }; e._mousewheelfunc = e._mousewheelfunc || function (j) { if (!e.editcell && e.enablemousewheel) { e.wheel(j, e); return false } }; e.removeHandler(e.host, "mousewheel", e._mousewheelfunc); e.addHandler(e.host, "mousewheel", e._mousewheelfunc); var h = "mousedown.jqxgrid"; if (d) { h = b.jqx.mobile.getTouchEventName("touchend") } e.addHandler(e.host, h, function (k) { if (e.isTouchDevice()) { e._newScroll = new Date(); if (e._newScroll - e._lastScroll < 500) { return false } if (b(k.target).ischildof(e.vScrollBar)) { return false } if (b(k.target).ischildof(e.hScrollBar)) { return false } } e._mousedown = new Date(); var j = e._handlemousedown(k, e); if (e.isNestedGrid) { if (!e.resizablecolumn && !e.columnsreorder) { k.stopPropagation() } } e._lastmousedown = new Date(); return j }); if (!d) { e.addHandler(e.host, "dblclick.jqxgrid", function (k) { if (e.editable && e.begincelledit && e.editmode == "dblclick") { e._handledblclick(k, e) } else { if (b.jqx.browser.msie && b.jqx.browser.version < 9) { var j = e._handlemousedown(k, e) } } e.mousecaptured = false; e._lastmousedown = new Date(); return true }); e._mousemovefunc = function (j) { if (e._handlemousemove) { return e._handlemousemove(j, e) } }; e.addHandler(e.content, "mousemove", e._mousemovefunc); if (e._handlemousemoveselection) { e._mousemovedocumentfunc = function (j) { if (e._handlemousemoveselection) { return e._handlemousemoveselection(j, e) } }; e.addHandler(b(document), "mousemove.selection" + e.element.id, e._mousemovedocumentfunc) } e.addHandler(b(document), "mouseup.selection" + e.element.id, function (j) { if (e._handlemouseupselection) { e._handlemouseupselection(j, e) } }) } try { if (document.referrer != "" || window.frameElement) { if (window.top != null && window.top != window.self) { var i = null; if (window.parent && document.referrer) { i = document.referrer } if (i && i.indexOf(document.location.host) != -1) { var g = function (j) { if (e._handlemouseupselection) { e._handlemouseupselection(j, e) } }; if (window.top.document.addEventListener) { window.top.document.addEventListener("mouseup", g, false) } else { if (window.top.document.attachEvent) { window.top.document.attachEvent("onmouseup", g) } } } } } } catch (f) { } e.focused = false; if (!d) { e.addHandler(e.content, "mouseenter", function (j) { e.focused = true; if (e.wrapper) { e.wrapper.attr("tabindex", 1); e.content.attr("tabindex", 2) } if (e._overlayElement) { if (e.vScrollInstance.isScrolling() || e.hScrollInstance.isScrolling()) { e._overlayElement[0].style.visibility = "visible" } else { e._overlayElement[0].style.visibility = "hidden" } } }); e.addHandler(e.content, "mouseleave", function (j) { if (e._handlemousemove) { if (e.enablehover) { e._clearhoverstyle() } } if (e._overlayElement) { e._overlayElement[0].style.visibility = "hidden" } e.focused = false }); if (e.groupable || e.columnsreorder) { e.addHandler(b(document), "selectstart." + e.element.id, function (j) { if (e.__drag === true) { return false } }) } e.addHandler(e.content, "selectstart." + e.element.id, function (j) { if (e.enablebrowserselection) { return true } if (e.showfilterrow) { if (b(j.target).ischildof(e.filterrow)) { return true } } if (!e.editcell) { return false } if (j.stopPropagation) { j.stopPropagation() } }); e.addHandler(b(document), "keyup.edit" + e.element.id, function (j) { e._keydown = false }); e.addHandler(b(document), "keydown.edit" + e.element.id, function (l) { e._keydown = true && !e.editcell; var k = l.charCode ? l.charCode : l.keyCode ? l.keyCode : 0; if (e.handlekeyboardnavigation) { var m = e.handlekeyboardnavigation(l); if (m == true) { return false } } if (e.editable && e.editcell) { if (k == 13 || k == 27) { if (e._handleeditkeydown) { j = e._handleeditkeydown(l, e) } } } if (k == 27) { e.mousecaptured = false; if (e.selectionarea.css("visibility") == "visible") { e.selectionarea.css("visibility", "hidden") } } if (b.jqx.browser.msie && b.jqx.browser.version < 8 && e.focused && !e.isNestedGrid) { if (k == 13 && j == false) { return j } var j = true; var k = l.charCode ? l.charCode : l.keyCode ? l.keyCode : 0; if (!e.editcell && e.editable && e.editmode != "programmatic") { if (e._handleeditkeydown) { j = e._handleeditkeydown(l, e) } } if (j && e.keyboardnavigation && e._handlekeydown) { j = e._handlekeydown(l, e); if (!j) { if (l.preventDefault) { l.preventDefault() } if (l.stopPropagation != undefined) { l.stopPropagation() } } return j } } return true }); e.addHandler(e.host, "keydown.edit" + e.element.id, function (k) { var j = true; if (e.handlekeyboardnavigation) { var l = e.handlekeyboardnavigation(k); if (l == true) { return false } } if (e.editable && e.editmode != "programmatic") { if (e._handleeditkeydown) { j = e._handleeditkeydown(k, e); if (e.isNestedGrid) { k.stopPropagation() } } } if (!(b.jqx.browser.msie && b.jqx.browser.version < 8)) { if (j && e.keyboardnavigation && e._handlekeydown) { j = e._handlekeydown(k, e); if (e.isNestedGrid) { k.stopPropagation() } } } else { if (e.isNestedGrid) { if (j && e.keyboardnavigation && e._handlekeydown) { j = e._handlekeydown(k, e); k.stopPropagation() } } } if (!j) { if (k.preventDefault) { k.preventDefault() } if (k.stopPropagation != undefined) { k.stopPropagation() } } return j }) } }, _hittestrow: function (s, q) { if (this.vScrollInstance == null || this.hScrollInstance == null) { return } if (s == undefined) { s = 0 } if (q == undefined) { q == 0 } var l = this.vScrollInstance; var k = this.hScrollInstance; var f = l.value; if (this.vScrollBar.css("visibility") != "visible") { f = 0 } var m = k.value; if (this.hScrollBar.css("visibility") != "visible") { m = 0 } if (this.scrollmode == "deferred" && this._newmax != null) { if (f > this._newmax) { f = this._newmax } } var r = parseInt(f) + q; var j = parseInt(m) + s; if (this.visiblerows == null) { return } if (this.visiblerows.length == 0) { return } var e = false; var i = this._findvisiblerow(r, this.visiblerows); if (i >= 0) { var o = this.visiblerows[i]; var d = this.rowdetails && o.rowdetails; var n = !o.rowdetailshidden; if (d) { var g = this.visiblerows[i - 1]; if (g == o) { o = g; i-- } if (n) { var h = b(this.hittestinfo[i].visualrow).position().top + parseInt(this.table.css("top")); var p = b(this.hittestinfo[i].visualrow).height(); if (!(q >= h && q <= h + p)) { i++; o = this.visiblerows[i]; e = true } } } } return { index: i, row: o, details: e } }, getcellatposition: function (j, q) { var r = this.that; var z = this.showheader ? this.columnsheader.height() + 2 : 0; var s = this._groupsheader() ? this.groupsheader.height() : 0; var B = this.showtoolbar ? this.toolbarheight : 0; s += B; var g = this.host.coord(); if (this.hasTransform) { g = b.jqx.utilities.getOffset(this.host) } var p = j - g.left; var n = q - z - g.top - s; var d = this._hittestrow(p, n); var k = d.row; var l = d.index; var t = this.table[0].rows[l]; if (this.dataview && this.dataview.records.length == 0) { var o = this.table[0].rows; var C = 0; for (var w = 0; w < o.length; w++) { if (n >= C && n < C + this.rowsheight) { t = o[w]; break } C += this.rowsheight } k = { boundindex: w } } if (t == null) { return true } var u = this.hScrollInstance; var v = u.value; var f = 0; var m = this.groupable ? this.groups.length : 0; for (var w = 0; w < t.cells.length; w++) { var h = parseInt(b(this.columnsrow[0].cells[w]).css("left")); var j = h - v; if (r.columns.records[w].pinned) { j = h } var A = j + b(this.columnsrow[0].cells[w]).width(); if (A >= p && p >= j) { f = w; break } } if (k != null) { var e = this._getcolumnat(f); return { row: this.getboundindex(k), column: e.datafield, value: this.getcellvalue(this.getboundindex(k), e.datafield) } } return null }, _handlemousedown: function (P, l) { if (P.target == null) { return true } if (l.disabled) { return true } if (b(P.target).ischildof(this.columnsheader)) { return true } var m; if (P.which) { m = (P.which == 3) } else { if (P.button) { m = (P.button == 2) } } var I; if (P.which) { I = (P.which == 2) } else { if (P.button) { I = (P.button == 1) } } if (I) { return true } if (this.showstatusbar) { if (b(P.target).ischildof(this.statusbar)) { return true } if (P.target == this.statusbar[0]) { return true } } if (this.showtoolbar) { if (b(P.target).ischildof(this.toolbar)) { return true } if (P.target == this.toolbar[0]) { return true } } if (this.pageable) { if (b(P.target).ischildof(this.pager)) { return true } if (P.target == this.pager[0]) { return true } } if (!this.columnsheader) { return true } if (!this.editcell) { if (this.pageable) { if (b(P.target).ischildof(this.pager)) { return true } } } var N = this.showheader ? this.columnsheader.height() + 2 : 0; var u = this._groupsheader() ? this.groupsheader.height() : 0; var z = this.showtoolbar ? this.toolbarheight : 0; u += z; var L = this.host.coord(); if (this.hasTransform) { L = b.jqx.utilities.getOffset(this.host); var R = this._getBodyOffset(); L.left -= R.left; L.top -= R.top } var h = parseInt(P.pageX); var j = parseInt(P.pageY); if (this.isTouchDevice()) { var Q = l.getTouches(P); var H = Q[0]; h = parseInt(H.pageX); j = parseInt(H.pageY); if (l.touchmode == true) { if (H._pageX != undefined) { h = parseInt(H._pageX); j = parseInt(H._pageY) } } } var C = h - L.left; var B = j - N - L.top - u; if (this.pageable && !this.autoheight && this.gotopage) { var d = this.pager.coord().top - L.top - u - N; if (B > d) { return } } var M = this._hittestrow(C, B); if (!M) { return } if (M.details) { return } var p = M.row; var w = M.index; var q = P.target.className; var g = this.table[0].rows[w]; if (g == null) { if (l.editable && l.begincelledit) { if (l.editcell) { l.endcelledit(l.editcell.row, l.editcell.column, false, true) } } return true } l.mousecaptured = true; l.mousecaptureposition = { left: P.pageX, top: P.pageY - u, clickedrow: g }; var k = this.hScrollInstance; var s = k.value; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { s = k.max - k.value } } var A = -1; var v = this.groupable ? this.groups.length : 0; if (this.rtl) { if (this.vScrollBar[0].style.visibility != "hidden") { s -= this.scrollbarsize + 4 } if (this.hScrollBar[0].style.visibility == "hidden") { s = -parseInt(this.content.css("left")) } } for (var J = 0; J < g.cells.length; J++) { var K = parseInt(b(this.columnsrow[0].cells[J]).css("left")); var h = K - s; if (l.columns.records[J].pinned && !l.rtl) { h = K } var D = this._getcolumnat(J); if (D != null && D.hidden) { continue } var E = h + b(this.columnsrow[0].cells[J]).width(); if (E >= C && C >= h) { A = J; l.mousecaptureposition.clickedcell = J; break } } if (this.rtl && this._haspinned) { for (var J = g.cells.length - 1; J >= 0; J--) { if (!l.columns.records[J].pinned) { break } var K = b(this.columnsrow[0].cells[J]).coord().left - this.host.coord().left; var h = K; var D = this._getcolumnat(J); if (D != null && D.hidden) { continue } var E = h + b(this.columnsrow[0].cells[J]).width(); if (E >= C && C >= h) { A = J; l.mousecaptureposition.clickedcell = J; break } } } if (p != null && A >= 0) { this._raiseEvent(1, { rowindex: this.getboundindex(p), visibleindex: p.visibleindex, row: p, group: p.group, rightclick: m, originalEvent: P }); var D = this._getcolumnat(A); var F = this.getcellvalue(this.getboundindex(p), D.datafield); if (this.editable && this.editcell) { if (D.datafield == this.editcell.column) { if (this.getboundindex(p) == this.editcell.row) { this.mousecaptured = false } } } this._raiseEvent(8, { rowindex: this.getboundindex(p), column: D ? D.getcolumnproperties() : null, row: p, visibleindex: p.visibleindex, datafield: D ? D.datafield : null, columnindex: A, value: F, rightclick: m, originalEvent: P }); if (this.isTouchDevice()) { if (D.columntype == "checkbox" && this.editable && this._overlayElement) { if (!this.editcell) { this._overlayElement.css("visibility", "hidden"); this.editcell = this.getcell(w, D.datafield); return true } } else { if (D.columntype == "button" && this._overlayElement) { if (D.buttonclick) { D.buttonclick(g.cells[A].buttonrow, P) } return true } } } var f = false; if (this._lastmousedown != null) { if (this._mousedown - this._lastmousedown < 300) { if (this._clickedrowindex == this.getboundindex(p)) { this._raiseEvent(22, { rowindex: this.getboundindex(p), row: p, visibleindex: p.visibleindex, group: p.group, rightclick: m, originalEvent: P }); if (this._clickedcolumn == D.datafield) { this._raiseEvent(23, { rowindex: this.getboundindex(p), row: p, visibleindex: p.visibleindex, column: D ? D.getcolumnproperties() : null, datafield: D ? D.datafield : null, columnindex: A, value: F, rightclick: m, originalEvent: P }) } f = true; this._clickedrowindex = -1; this._clickedcolumn = null; if (P.isPropagationStopped && P.isPropagationStopped()) { return false } } } } if (m) { return true } if (!f) { this._clickedrowindex = this.getboundindex(p); this._clickedcolumn = D.datafield } var e = b.jqx.utilities.getBrowser(); if (e.browser == "msie" && parseInt(e.version) <= 7) { if (A == 0 && this.rowdetails) { q = "jqx-grid-group-collapse" } if (v > 0) { if (A <= v) { q = "jqx-grid-group-collapse" } } } if (q.indexOf("jqx-grid-group-expand") != -1 || q.indexOf("jqx-grid-group-collapse") != -1) { if (!this.rtl) { if (v > 0 && A < v && this._togglegroupstate) { this._togglegroupstate(p.bounddata, true) } else { if (A == v && this.rowdetails && this.showrowdetailscolumn) { this._togglerowdetails(p.bounddata, true); this.gridcontent[0].scrollTop = 0; this.gridcontent[0].scrollLeft = 0 } } } else { if (v > 0 && A > g.cells.length - v - 1 && this._togglegroupstate) { this._togglegroupstate(p.bounddata, true) } else { if (A == g.cells.length - 1 - v && this.rowdetails && this.showrowdetailscolumn) { this._togglerowdetails(p.bounddata, true); this.gridcontent[0].scrollTop = 0; this.gridcontent[0].scrollLeft = 0 } } } } else { if (p.boundindex != -1) { var n = this.selectedrowindexes.slice(0); var O = false; if (l.selectionmode != "none" && l.selectionmode != "checkbox" && this._selectrowwithmouse) { if (l.selectionmode == "multiplecellsadvanced" || l.selectionmode == "multiplecellsextended" || l.selectionmode == "multiplerowsextended" || l.selectionmode == "multiplerowsadvanced") { if (!P.ctrlKey && !P.shiftKey) { l.selectedrowindexes = new Array(); l.selectedcells = new Array() } } var t = false; var o = this.getboundindex(p); if (l._oldselectedrow === o || l.selectionmode === "none") { t = true } if (l.selectionmode.indexOf("cell") == -1) { if ((l.selectionmode != "singlerow") || (l.selectedrowindex != o && l.selectionmode == "singlerow")) { this._applyrowselection(o, true, false, null, D.datafield); this._selectrowwithmouse(l, M, n, D.datafield, P.ctrlKey, P.shiftKey) } } else { if (D.datafield != null) { this._selectrowwithmouse(l, M, n, D.datafield, P.ctrlKey, P.shiftKey); if (!P.shiftKey) { this._applycellselection(o, D.datafield, true, false) } } } if (l._oldselectedcell) { if (l._oldselectedcell.datafield == l.selectedcell.datafield && l._oldselectedcell.rowindex == l.selectedcell.rowindex) { O = true } } l._oldselectedcell = l.selectedcell; l._oldselectedrow = o } if (l.autosavestate) { if (l.savestate) { l.savestate() } } if (l.editable && l.begincelledit && l.editmode != "programmatic") { if (P.isPropagationStopped && P.isPropagationStopped()) { return false } if (l.editmode == "selectedrow") { if (t && !l.editcell) { if (D.columntype !== "checkbox") { var r = l.beginrowedit(this.getboundindex(p)) } } else { if (l.editcell && !t && l.selectionmode != "none") { var r = l.endrowedit(l.editcell.row) } } } else { var G = l.editmode == "click" || (O && l.editmode == "selectedcell"); if (l.selectionmode.indexOf("cell") == -1) { if (l.editmode != "dblclick") { G = true } } if (G) { if (p.boundindex != undefined && D.editable) { var r = l.begincelledit(this.getboundindex(p), D.datafield, D.defaulteditorvalue); if (l.selectionmode.indexOf("cell") != -1) { l._applycellselection(o, D.datafield, false, false) } } } if (l.selectionmode.indexOf("cell") != -1) { if (l.editmode == "selectedcell" && !O && l.editcell) { l.endcelledit(l.editcell.row, l.editcell.column, false, true) } } } return true } } } } return true }, _columnPropertyChanged: function (e, d, g, f) { }, _rowPropertyChanged: function (g, d, f, e) { }, _serializeObject: function (d) { if (d == null) { return "" } var e = ""; b.each(d, function (g) { var h = this; if (g > 0) { e += ", " } e += "["; var f = 0; for (obj in h) { if (f > 0) { e += ", " } e += "{" + obj + ":" + h[obj] + "}"; f++ } e += "]" }); return e }, propertyChangedHandler: function (e, f, i, h) { if (this.isInitialized == undefined || this.isInitialized == false) { return } f = f.toLowerCase(); switch (f) { case "enablebrowserselection": if (!e.showfilterrow) { if (!e.showstatusbar && !e.showtoolbar) { e.host.addClass("jqx-disableselect") } e.content.addClass("jqx-disableselect") } if (e.enablebrowserselection) { e.content.removeClass("jqx-disableselect"); e.host.removeClass("jqx-disableselect") } break; case "columnsheight": if (e.columnsheight != 25 || e.columngroups) { e._measureElement("column") } e._render(true, true, true, false, false); break; case "rowsheight": if (h != i) { if (e.rowsheight != 25) { e._measureElement("cell") } e.virtualsizeinfo = null; e.rendergridcontent(true, false); e.refresh() } break; case "scrollMode": e.vScrollInstance.thumbStep = e.rowsheight; break; case "showdefaultloadelement": e._builddataloadelement(); break; case "showfiltermenuitems": case "showsortmenuitems": case "showgroupmenuitems": case "filtermode": e._initmenu(); break; case "touchmode": if (i != h) { e._removeHandlers(); e.touchDevice = null; e.vScrollBar.jqxScrollBar({ touchMode: h }); e.hScrollBar.jqxScrollBar({ touchMode: h }); e._updateTouchScrolling(); e._arrange(); e._updatecolumnwidths(); e._updatecellwidths(); e._addHandlers() } break; case "autoshowcolumnsmenubutton": if (i != h) { e._rendercolumnheaders() } break; case "rendergridrows": if (i != h) { e.updatebounddata() } break; case "editmode": if (i != h) { e._removeHandlers(); e._addHandlers() } break; case "source": e.updatebounddata(); if (e.virtualmode && !e._loading) { e.loadondemand = true; e._renderrows(e.virtualsizeinfo) } break; case "horizontalscrollbarstep": case "verticalscrollbarstep": case "horizontalscrollbarlargestep": case "verticalscrollbarlargestep": this.vScrollBar.jqxScrollBar({ step: this.verticalscrollbarstep, largestep: this.verticalscrollbarlargestep }); this.hScrollBar.jqxScrollBar({ step: this.horizontalscrollbarstep, largestep: this.horizontalscrollbarlargestep }); break; case "closeablegroups": if (e._initgroupsheader) { e._initgroupsheader() } break; case "showgroupsheader": if (i != h) { e._arrange(); if (e._initgroupsheader) { e._initgroupsheader() } e._renderrows(e.virtualsizeinfo) } break; case "theme": if (h != i) { if (e.pager) { e.pager.removeClass(); e.pager.addClass(e.toTP("jqx-grid-pager")); e.pager.addClass(e.toTP("jqx-widget-header")); if (e.pageable && e._updatepagertheme) { e._updatepagertheme() } } if (e.groupsheader) { e.groupsheader.removeClass(); e.groupsheader.addClass(e.toTP("jqx-grid-groups-header")); e.groupsheader.addClass(e.toTP("jqx-widget-header")) } e.toolbar.removeClass(); e.toolbar.addClass(e.toTP("jqx-grid-toolbar")); e.toolbar.addClass(e.toTP("jqx-widget-header")); e.statusbar.removeClass(); e.statusbar.addClass(e.toTP("jqx-grid-statusbar")); e.statusbar.addClass(e.toTP("jqx-widget-content")); e.vScrollBar.jqxScrollBar({ theme: e.theme }); e.hScrollBar.jqxScrollBar({ theme: e.theme }); e.host.removeClass(); e.host.addClass(e.toTP("jqx-grid")); e.host.addClass(e.toTP("jqx-reset")); e.host.addClass(e.toTP("jqx-rc-all")); e.host.addClass(e.toTP("jqx-widget")); e.host.addClass(e.toTP("jqx-widget-content")); e.bottomRight.removeClass(); e.bottomRight.addClass(e.toTP("jqx-grid-bottomright")); e.bottomRight.addClass(e.toTP("jqx-scrollbar-state-normal")); e.toolbar.addClass(e.toTP("jqx-grid-toolbar")); e.toolbar.addClass(e.toTP("jqx-widget-header")); e.statusbar.addClass(e.toTP("jqx-grid-statusbar")); e.statusbar.addClass(e.toTP("jqx-widget-header")); e.render() } break; case "showtoolbar": case "toolbarheight": if (i != h) { e._arrange(); e.refresh() } break; case "showstatusbar": if (i != h) { if (e.statusbar) { if (h) { e.statusbar.show() } else { e.statusbar.hide() } } e._arrange(); e.refresh() } break; case "statusbarheight": if (i != h) { e._arrange(); e.refresh() } break; case "filterable": case "showfilterrow": if (i != h) { e.render() } break; case "autoshowfiltericon": case "showfiltercolumnbackground": case "showpinnedcolumnbackground": case "showsortcolumnbackground": if (i != h) { e.rendergridcontent() } break; case "showrowdetailscolumn": if (i != h) { e.render() } break; case "scrollbarsize": if (i != h) { e._arrange() } break; case "width": case "height": if (i != h) { e._updatesize(true, true); e._resizeWindow(); if (e.virtualmode && !e._loading) { e.vScrollInstance.setPosition(0) } } break; case "altrows": case "altstart": case "altstep": if (i != h) { e._renderrows(e.virtualsizeinfo) } break; case "groupsheaderheight": if (i != h) { e._arrange(); if (e._initgroupsheader) { e._initgroupsheader() } } break; case "pagerheight": if (i != h) { e._initpager() } break; case "selectedrowindex": e.selectrow(h); break; case "selectionmode": if (i != h) { if (h == "none") { e.selectedrowindexes = new Array(); e.selectedcells = new Array(); e.selectedrowindex = -1 } e._renderrows(e.virtualsizeinfo); if (h == "checkbox") { e._render(false, false, true, false, false) } } break; case "showheader": if (h) { e.columnsheader.css("display", "block") } else { e.columnsheader.css("display", "none") } break; case "virtualmode": if (i != h) { e.dataview.virtualmode = e.virtualmode; e.dataview.refresh(false); e._render(false, false, false) } break; case "columnsmenu": if (i != h) { e.render() } break; case "columngroups": e._render(true, true, true, false, false); break; case "columns": if (e._serializeObject(e._cachedcolumns) !== e._serializeObject(h)) { var d = false; if (e.filterable) { if (i && i.records) { b.each(i.records, function () { if (this.filter) { d = true } e.dataview.removefilter(this.displayfield, this.filter) }) } } e._columns = null; e._filterrowcache = []; e.render(); if (d) { e.applyfilters() } e._cachedcolumns = e.columns; if (e.removesort) { e.removesort() } } else { e._initializeColumns() } break; case "autoheight": if (i != h) { e._render(false, false, true) } break; case "pagermode": case "pagerbuttonscount": if (i != h) { if (e._initpager) { if (e.pagershowrowscombo) { e.pagershowrowscombo.jqxDropDownList("destroy"); e.pagershowrowscombo = null } if (e.pagerrightbutton) { e.removeHandler(e.pagerrightbutton, "mousedown"); e.removeHandler(e.pagerrightbutton, "mouseup"); e.removeHandler(e.pagerrightbutton, "click"); e.pagerrightbutton.jqxButton("destroy"); e.pagerrightbutton = null } if (e.pagerleftbutton) { e.removeHandler(e.pagerleftbutton, "mousedown"); e.removeHandler(e.pagerleftbutton, "mouseup"); e.removeHandler(e.pagerleftbutton, "click"); e.pagerleftbutton.jqxButton("destroy"); e.removeHandler(b(document), "mouseup.pagerbuttons" + e.element.id); e.pagerleftbutton = null } e.pagerdiv.remove(); e._initpager() } } break; case "pagesizeoptions": case "pageable": case "pagesize": if (i != h) { if (e._loading) { throw new Error("jqxGrid: " + e.loadingerrormessage); return } if (!e.host.jqxDropDownList || !e.host.jqxListBox) { e._testmodules(); return } if (e._initpager) { if (f != "pageable" && f != "pagermode") { if (typeof (h) == "string") { var g = "The expected value type is: Int."; if (f != "pagesize") { var g = "The expected value type is: Array of Int values." } throw new Error("Invalid Value for: " + f + ". " + g) } } e.dataview.pageable = e.pageable; e.dataview.pagenum = 0; e.dataview.pagesize = e._getpagesize(); if (e.virtualmode) { e.updatebounddata() } e.dataview.refresh(true); e._initpager(); if (f == "pagesizeoptions") { if (h != null && h.length > 0) { e.pagesize = parseInt(h[0]); e.dataview.pagesize = parseInt(h[0]); e.prerenderrequired = true; e._requiresupdate = true; e.dataview.pagenum = -1; e.gotopage(0) } } } e._render(false, false, false) } break; case "groups": if (e._serializeObject(i) !== e._serializeObject(h)) { e.dataview.groups = h; e._refreshdataview(); e._render(true, true, true, false) } break; case "groupable": if (i != h) { e.dataview.groupable = e.groupable; e.dataview.pagenum = 0; e.dataview.refresh(false); e._render(false, false, true) } break; case "renderstatusbar": if (h != null) { e.renderstatusbar(e.statusbar) } break; case "rendertoolbar": if (h != null) { e.rendertoolbar(e.toolbar) } break; case "disabled": if (h) { e.host.addClass(e.toThemeProperty("jqx-fill-state-disabled")) } else { e.host.removeClass(e.toThemeProperty("jqx-fill-state-disabled")) } b.jqx.aria(e, "aria-disabled", e.disabled); if (e.pageable) { if (e.pagerrightbutton) { e.pagerrightbutton.jqxButton({ disabled: h }); e.pagerleftbutton.jqxButton({ disabled: h }); e.pagershowrowscombo.jqxDropDownList({ disabled: h }); e.pagergotoinput.attr("disabled", h) } if (e.pagerfirstbutton) { e.pagerfirstbutton.jqxButton({ disabled: h }); e.pagerlastbutton.jqxButton({ disabled: h }) } } e.vScrollBar.jqxScrollBar({ disabled: h }); e.hScrollBar.jqxScrollBar({ disabled: h }); if (e.filterable && e.showfilterrow) { e._updatefilterrowui(true) } break } } }); function c(d, e) { this.owner = d; this.datafield = null; this.displayfield = null; this.text = ""; this.sortable = true; this.hideable = true; this.editable = true; this.hidden = false; this.groupable = true; this.renderer = null; this.cellsrenderer = null; this.checkchange = null, this.threestatecheckbox = false; this.buttonclick = null, this.columntype = null; this.cellsformat = ""; this.align = "left"; this.cellsalign = "left"; this.width = "auto"; this.minwidth = 25; this.maxwidth = "auto"; this.pinned = false; this.visibleindex = -1; this.filterable = true; this.filter = null; this.filteritems = []; this.resizable = true; this.initeditor = null; this.createeditor = null; this.destroyeditor = null; this.geteditorvalue = null; this.validation = null; this.classname = ""; this.cellclassname = ""; this.cellendedit = null; this.cellbeginedit = null; this.cellvaluechanging = null; this.aggregates = null; this.aggregatesrenderer = null; this.menu = true; this.createfilterwidget = null; this.filtertype = "default"; this.filtercondition = null; this.rendered = null; this.exportable = true; this.exporting = false; this.draggable = true; this.nullable = true; this.enabletooltips = true; this.columngroup = null; this.filterdelay = 800; this.getcolumnproperties = function () { return { nullable: this.nullable, sortable: this.sortable, hideable: this.hideable, hidden: this.hidden, groupable: this.groupable, width: this.width, align: this.align, editable: this.editable, minwidth: this.minwidth, maxwidth: this.maxwidth, resizable: this.resizable, datafield: this.datafield, text: this.text, exportable: this.exportable, cellsalign: this.cellsalign, pinned: this.pinned, cellsformat: this.cellsformat, columntype: this.columntype, classname: this.classname, cellclassname: this.cellclassname, menu: this.menu } }, this.setproperty = function (f, g) { if (this[f]) { var h = this[f]; this[f] = g; this.owner._columnPropertyChanged(this, f, g, h) } else { if (this[f.toLowerCase()]) { var h = this[f.toLowerCase()]; this[f.toLowerCase()] = g; this.owner._columnPropertyChanged(this, f.toLowerCase(), g, h) } } }; this._initfields = function (g) { if (g != null) { var f = this.that; if (b.jqx.hasProperty(g, "dataField")) { this.datafield = b.jqx.get(g, "dataField") } if (b.jqx.hasProperty(g, "displayField")) { this.displayfield = b.jqx.get(g, "displayField") } else { this.displayfield = this.datafield } if (b.jqx.hasProperty(g, "enableTooltips")) { this.enabletooltips = b.jqx.get(g, "enableTooltips") } if (b.jqx.hasProperty(g, "text")) { this.text = b.jqx.get(g, "text") } else { this.text = this.displayfield } if (b.jqx.hasProperty(g, "sortable")) { this.sortable = b.jqx.get(g, "sortable") } if (b.jqx.hasProperty(g, "hideable")) { this.hideable = b.jqx.get(g, "hideable") } if (b.jqx.hasProperty(g, "hidden")) { this.hidden = b.jqx.get(g, "hidden") } if (b.jqx.hasProperty(g, "groupable")) { this.groupable = b.jqx.get(g, "groupable") } if (b.jqx.hasProperty(g, "renderer")) { this.renderer = b.jqx.get(g, "renderer") } if (b.jqx.hasProperty(g, "align")) { this.align = b.jqx.get(g, "align") } if (b.jqx.hasProperty(g, "cellsAlign")) { this.cellsalign = b.jqx.get(g, "cellsAlign") } if (b.jqx.hasProperty(g, "cellsFormat")) { this.cellsformat = b.jqx.get(g, "cellsFormat") } if (b.jqx.hasProperty(g, "width")) { this.width = b.jqx.get(g, "width") } if (b.jqx.hasProperty(g, "minWidth")) { this.minwidth = b.jqx.get(g, "minWidth") } if (b.jqx.hasProperty(g, "maxWidth")) { this.maxwidth = b.jqx.get(g, "maxWidth") } if (b.jqx.hasProperty(g, "cellsRenderer")) { this.cellsrenderer = b.jqx.get(g, "cellsRenderer") } if (b.jqx.hasProperty(g, "columnType")) { this.columntype = b.jqx.get(g, "columnType") } if (b.jqx.hasProperty(g, "checkChange")) { this.checkchange = b.jqx.get(g, "checkChange") } if (b.jqx.hasProperty(g, "buttonClick")) { this.buttonclick = b.jqx.get(g, "buttonClick") } if (b.jqx.hasProperty(g, "pinned")) { this.pinned = b.jqx.get(g, "pinned") } if (b.jqx.hasProperty(g, "visibleIndex")) { this.visibleindex = b.jqx.get(g, "visibleIndex") } if (b.jqx.hasProperty(g, "filterable")) { this.filterable = b.jqx.get(g, "filterable") } if (b.jqx.hasProperty(g, "filter")) { this.filter = b.jqx.get(g, "filter") } if (b.jqx.hasProperty(g, "resizable")) { this.resizable = b.jqx.get(g, "resizable") } if (b.jqx.hasProperty(g, "editable")) { this.editable = b.jqx.get(g, "editable") } if (b.jqx.hasProperty(g, "initEditor")) { this.initeditor = b.jqx.get(g, "initEditor") } if (b.jqx.hasProperty(g, "createEditor")) { this.createeditor = b.jqx.get(g, "createEditor") } if (b.jqx.hasProperty(g, "destroyEditor")) { this.destroyeditor = b.jqx.get(g, "destroyEditor") } if (b.jqx.hasProperty(g, "getEditorValue")) { this.geteditorvalue = b.jqx.get(g, "getEditorValue") } if (b.jqx.hasProperty(g, "validation")) { this.validation = b.jqx.get(g, "validation") } if (b.jqx.hasProperty(g, "cellBeginEdit")) { this.cellbeginedit = b.jqx.get(g, "cellBeginEdit") } if (b.jqx.hasProperty(g, "cellEndEdit")) { this.cellendedit = b.jqx.get(g, "cellEndEdit") } if (b.jqx.hasProperty(g, "className")) { this.classname = b.jqx.get(g, "className") } if (b.jqx.hasProperty(g, "cellClassName")) { this.cellclassname = b.jqx.get(g, "cellClassName") } if (b.jqx.hasProperty(g, "menu")) { this.menu = b.jqx.get(g, "menu") } if (b.jqx.hasProperty(g, "aggregates")) { this.aggregates = b.jqx.get(g, "aggregates") } if (b.jqx.hasProperty(g, "aggregatesRenderer")) { this.aggregatesrenderer = b.jqx.get(g, "aggregatesRenderer") } if (b.jqx.hasProperty(g, "createFilterWidget")) { this.createfilterwidget = b.jqx.get(g, "createFilterWidget") } if (b.jqx.hasProperty(g, "filterType")) { this.filtertype = b.jqx.get(g, "filterType") } if (b.jqx.hasProperty(g, "filterDelay")) { this.filterdelay = b.jqx.get(g, "filterDelay") } if (b.jqx.hasProperty(g, "rendered")) { this.rendered = b.jqx.get(g, "rendered") } if (b.jqx.hasProperty(g, "exportable")) { this.exportable = b.jqx.get(g, "exportable") } if (b.jqx.hasProperty(g, "filterItems")) { this.filteritems = b.jqx.get(g, "filterItems") } if (b.jqx.hasProperty(g, "cellValueChanging")) { this.cellvaluechanging = b.jqx.get(g, "cellValueChanging") } if (b.jqx.hasProperty(g, "draggable")) { this.draggable = b.jqx.get(g, "draggable") } if (b.jqx.hasProperty(g, "filterCondition")) { this.filtercondition = b.jqx.get(g, "filterCondition") } if (b.jqx.hasProperty(g, "threeStateCheckbox")) { this.threestatecheckbox = b.jqx.get(g, "threeStateCheckbox") } if (b.jqx.hasProperty(g, "nullable")) { this.nullable = b.jqx.get(g, "nullable") } if (b.jqx.hasProperty(g, "columnGroup")) { this.columngroup = b.jqx.get(g, "columnGroup") } if (!g instanceof String && !(typeof g == "string")) { for (var h in g) { if (!f.hasOwnProperty(h)) { if (!f.hasOwnProperty(h.toLowerCase())) { d.host.remove(); throw new Error("jqxGrid: Invalid property name - " + h + ".") } } } } } }; this._initfields(e); return this } function a(d, e) { this.setdata = function (f) { if (f != null) { this.bounddata = f; this.boundindex = f.boundindex; this.visibleindex = f.visibleindex; this.group = f.group; this.parentbounddata = f.parentItem; this.uniqueid = f.uniqueid; this.level = f.level } }; this.setdata(e); this.parentrow = null; this.subrows = new Array(); this.owner = d; this.height = 25; this.hidden = false; this.rowdetails = null; this.rowdetailsheight = 100; this.rowdetailshidden = true; this.top = -1; this.setrowinfo = function (f) { this.hidden = f.hidden; this.rowdetails = f.rowdetails; this.rowdetailsheight = f.rowdetailsheight; this.rowdetailshidden = !f.showdetails; this.height = f.height }; return this } b.jqx.collection = function (d) { this.records = new Array(); this.owner = d; this.updating = false; this.beginupdate = function () { this.updating = true }; this.resumeupdate = function () { this.updating = false }; this._raiseEvent = function (e) { }; this.clear = function () { this.records = new Array() }; this.replace = function (f, e) { this.records[f] = e; if (!this.updating) { this._raiseEvent({ type: "replace", element: e }) } }; this.isempty = function (e) { if (this.records[e] == undefined) { return true } return false }; this.initialize = function (e) { if (e < 1) { e = 1 } this.records[e - 1] = -1 }; this.length = function () { return this.records.length }; this.indexOf = function (e) { return this.records.indexOf(e) }; this.add = function (e) { if (e == null) { return false } this.records[this.records.length] = e; if (!this.updating) { this._raiseEvent({ type: "add", element: e }) } return true }; this.insertAt = function (f, e) { if (f == null || f == undefined) { return false } if (e == null) { return false } if (f >= 0) { if (f < this.records.length) { this.records.splice(f, 0, e); if (!this.updating) { this._raiseEvent({ type: "insert", index: f, element: e }) } return true } else { return this.add(e) } } return false }; this.remove = function (f) { if (f == null || f == undefined) { return false } var e = this.records.indexOf(f); if (e != -1) { this.records.splice(e, 1); if (!this.updating) { this._raiseEvent({ type: "remove", element: f }) } return true } return false }; this.removeAt = function (f) { if (f == null || f == undefined) { return false } if (f < 0) { return false } if (f < this.records.length) { var e = this.records[f]; this.records.splice(f, 1); if (!this.updating) { this._raiseEvent({ type: "removeAt", index: f, element: e }) } return true } return false }; return this }; b.jqx.dataview = function () { this.self = this; this.grid = null; this.uniqueId = "id"; this.records = []; this.rows = []; this.columns = []; this.groups = []; this.filters = new Array(); this.updated = null; this.update = null; this.suspend = false; this.pagesize = 0; this.pagenum = 0; this.totalrows = 0; this.totalrecords = 0; this.groupable = true; this.loadedrecords = []; this.loadedrootgroups = []; this.loadedgroups = []; this.loadedgroupsByKey = []; this.virtualmode = true; this._cachegrouppages = new Array(); this.source = null; this.changedrecords = new Array(); this.rowschangecallback = null; this.that = this; this.destroy = function () { delete this.self; delete this.grid; delete this.uniqueId; delete this.records; delete this.rows; delete this.columns; delete this.groups; delete this.filters; delete this.updated; delete this.update; delete this.suspend; delete this.pagesize; delete this.pagenum; delete this.totalrows; delete this.totalrecords; delete this.groupable; delete this.loadedrecords; delete this.loadedrootgroups; delete this.loadedgroups; delete this.loadedgroupsByKey; delete this.virtualmode; delete this._cachegrouppages; delete this.source; delete this.changedrecords; delete this.rowschangecallback; delete this.that }, this.suspendupdate = function () { this.suspend = true }, this.isupdating = function () { return this.suspend }, this.resumeupdate = function (d) { this.suspend = false; if (d == undefined) { d = true } this.refresh(d) }, this.getrecords = function () { return this.records }, this.clearrecords = function () { this.recordids = new Array() }; this.databind = function (q, l) { var p = q._source ? true : false; var g = null; if (p) { g = q; q = q._source } else { g = new b.jqx.dataAdapter(q, { autoBind: false }) } var e = function (m) { g.recordids = []; g.records = new Array(); g.cachedrecords = new Array(); g.originaldata = new Array(); g._options.virtualmode = m.virtualmode; g._options.totalrecords = m.totalrecords; g._options.originaldata = m.originaldata; g._options.recordids = m.recordids; g._options.cachedrecords = new Array(); g._options.pagenum = m.pagenum; g._options.pageable = m.pageable; if (q.type != undefined) { g._options.type = q.type } if (q.formatdata != undefined) { g._options.formatData = q.formatdata } if (q.contenttype != undefined) { g._options.contentType = q.contenttype } if (q.async != undefined) { g._options.async = q.async } if (q.updaterow != undefined) { g._options.updaterow = q.updaterow } if (q.addrow != undefined) { g._options.addrow = q.addrow } if (q.deleterow != undefined) { g._options.deleterow = q.deleterow } if (m.pagesize == 0) { m.pagesize = 10 } g._options.pagesize = m.pagesize }; var t = function (C) { C.totalrecords = g.totalrecords; if (!C.virtualmode) { C.originaldata = g.originaldata; C.records = g.records; C.recordids = g.recordids; C.cachedrecords = g.cachedrecords } else { var x = { startindex: C.pagenum * C.pagesize, endindex: (C.pagenum * C.pagesize + C.pagesize) }; if (q.recordstartindex != undefined) { x.startindex = parseInt(q.recordstartindex) } if (q.recordendindex != undefined) { x.endindex = parseInt(q.recordendindex) } else { if (!C.grid.pageable) { x.endindex = x.startindex + 100; if (C.grid.autoheight) { x.endindex = x.startindex + C.totalrecords } } } if (!q.recordendindex) { if (!C.grid.pageable) { x.endindex = x.startindex + 100; if (C.grid.autoheight) { x.endindex = x.startindex + C.totalrecords } } else { x = { startindex: C.pagenum * C.pagesize, endindex: (C.pagenum * C.pagesize + C.pagesize) } } } x.data = g.records; if (C.grid.rendergridrows && C.totalrecords > 0) { var E = 0; q.records = C.grid.rendergridrows(x); if (q.records.length) { E = q.records.length } if (q.records && !q.records[x.startindex]) { var m = new Array(); var D = x.startindex; b.each(q.records, function () { m[D] = this; D++; E++ }); q.records = m } if (E == 0) { if (q.records) { b.each(q.records, function () { E++ }) } } if (E > 0 && E < x.endindex - x.startindex && !C.grid.groupable) { var A = q.records[0]; for (var z = 0; z < x.endindex - x.startindex - E; z++) { var B = {}; for (obj in A) { B[obj] = "" } if (q.records.push) { q.records.push(B) } } } } if (!q.records || C.totalrecords == 0) { q.records = new Array() } C.originaldata = q.records; C.records = q.records; C.cachedrecords = q.records } }; e(this); this.source = q; if (l !== undefined) { uniqueId = l } var y = this.that; switch (q.datatype) { case "local": case "array": default: if (q.localdata == null) { q.localdata = [] } if (q.localdata != null) { g.unbindBindingUpdate(y.grid.element.id); if ((!y.grid.autobind && y.grid.isInitialized) || y.grid.autobind) { g.dataBind() } var k = function (x) { if (x != undefined && x != "") { var z = g._changedrecords[0]; if (z) { var A = new Array(); b.each(g._changedrecords, function (E) { var B = this.index; var C = this.record; y.grid._updateFromAdapter = true; switch (x) { case "update": var D = y.grid.getrowid(B); if (E == g._changedrecords.length - 1) { y.grid.updaterow(D, C) } else { y.grid.updaterow(D, C, false) } y.grid._updateFromAdapter = false; return; case "add": y.grid.addrow(null, C); y.grid._updateFromAdapter = false; return; case "remove": var D = y.grid.getrowid(B); A.push(D); return } }); if (A.length > 0) { y.grid.deleterow(A, false); y.grid._updateFromAdapter = false } } if (x == "update") { return } } var m = y.totalrecords; t(y, x); if (x == "updateData") { y.refresh(); y.grid._updateGridData() } else { if (q.recordstartindex && this.virtualmode) { y.updateview(q.recordstartindex, q.recordstartindex + y.pagesize) } else { y.refresh() } y.update(m != y.totalrecords) } }; k(); g.bindBindingUpdate(y.grid.element.id, k) } break; case "json": case "jsonp": case "xml": case "xhtml": case "script": case "text": case "csv": case "tab": if (q.localdata != null) { g.unbindBindingUpdate(y.grid.element.id); if ((!y.grid.autobind && y.grid.isInitialized) || y.grid.autobind) { g.dataBind() } var k = function (x) { var m = y.totalrecords; t(y); if (x == "updateData") { y.refresh(); y.grid._updateGridData() } else { if (q.recordstartindex) { y.updateview(q.recordstartindex, q.recordstartindex + y.pagesize) } else { y.refresh() } y.update(m != y.totalrecords) } }; k(); g.bindBindingUpdate(y.grid.element.id, k); return } var u = {}; var o = 0; var v = {}; for (var i = 0; i < this.filters.length; i++) { var f = this.filters[i].datafield; var j = this.filters[i].filter; var h = j.getfilters(); v[f + "operator"] = j.operator; for (var s = 0; s < h.length; s++) { h[s].datafield = f; var n = h[s].value; if (h[s].type == "datefilter") { if (h[s].value && h[s].value.toLocaleString) { var d = this.grid.getcolumn(h[s].datafield); if (d.cellsformat) { var r = this.grid.source.formatDate(h[s].value, d.cellsformat, this.grid.gridlocalization); if (r) { v["filtervalue" + o] = r } else { v["filtervalue" + o] = h[s].value.toLocaleString() } } else { v["filtervalue" + o] = n.toString() } } else { v["filtervalue" + o] = n.toString() } } else { v["filtervalue" + o] = n.toString() } v["filtercondition" + o] = h[s].condition; v["filteroperator" + o] = h[s].operator; v["filterdatafield" + o] = f; o++ } } v.filterscount = o; v.groupscount = y.groups.length; for (var i = 0; i < y.groups.length; i++) { v["group" + i] = y.groups[i] } if (q.recordstartindex == undefined) { q.recordstartindex = 0 } if (q.recordendindex == undefined || q.recordendindex == 0) { if (y.grid.height && y.grid.height.toString().indexOf("%") == -1) { q.recordendindex = parseInt(y.grid.height) / y.grid.rowsheight; q.recordendindex += 2 } else { q.recordendindex = b(window).height() / y.grid.rowsheight } if (this.pageable) { q.recordendindex = this.pagesize } } b.extend(v, { sortdatafield: y.sortfield, sortorder: y.sortfielddirection, pagenum: y.pagenum, pagesize: y.grid.pagesize, recordstartindex: q.recordstartindex, recordendindex: q.recordendindex }); var w = g._options.data; if (g._options.data) { b.extend(g._options.data, v) } else { if (q.data) { b.extend(v, q.data) } g._options.data = v } var k = function () { var x = b.jqx.browser.msie && b.jqx.browser.version < 9; var z = function () { var A = y.totalrecords; t(y); if (q.recordstartindex) { y.updateview(q.recordstartindex, q.recordstartindex + y.pagesize) } else { y.refresh() } y.update(A != y.totalrecords) }; if (x) { try { z() } catch (m) { } } else { z() } }; g.unbindDownloadComplete(y.grid.element.id); g.bindDownloadComplete(y.grid.element.id, k); if ((!y.grid.autobind && y.grid.isInitialized) || y.grid.autobind) { g.dataBind() } else { if (!y.grid.isInitialized && !y.grid.autobind) { k() } } g._options.data = w } }; this.getid = function (g, e, f) { if (b(g, e).length > 0) { return b(g, e).text() } if (g) { if (g.toString().length > 0) { var d = b(e).attr(g); if (d != null && d.toString().length > 0) { return d } } } return f }; this.getvaluebytype = function (g, d) { var e = g; if (d.type == "date") { var f = new Date(g); if (f.toString() == "NaN" || f.toString() == "Invalid Date") { if (b.jqx.dataFormat) { g = b.jqx.dataFormat.tryparsedate(g) } else { g = f } } else { g = f } if (g == null) { g = e } } else { if (d.type == "float") { var g = parseFloat(g); if (isNaN(g)) { g = e } } else { if (d.type == "int") { var g = parseInt(g); if (isNaN(g)) { g = e } } else { if (d.type == "bool") { if (g != null) { if (g.toLowerCase() == "false") { g = false } else { if (g.toLowerCase() == "true") { g = true } } } if (g == 1) { g = true } else { if (g == 0) { g = false } else { g = "" } } } } } } return g }; this.setpaging = function (d) { if (d.pageSize != undefined) { this.pagesize = d.pageSize } if (d.pageNum != undefined) { this.pagenum = Math.min(d.pageNum, Math.ceil(this.totalrows / this.pagesize)) } this.refresh() }; this.getpagingdetails = function () { return { pageSize: this.pagesize, pageNum: this.pagenum, totalrows: this.totalrows } }; this._clearcaches = function () { this.sortcache = {}; this.sortdata = null; this.changedrecords = new Array(); this.records = new Array(); this.rows = new Array(); this.cacheddata = new Array(); this.originaldata = new Array(); this.bounditems = new Array(); this.loadedrecords = new Array(); this.loadedrootgroups = new Array(); this.loadedgroups = new Array(); this.loadedgroupsByKey = new Array(); this._cachegrouppages = new Array(); this.recordsbyid = new Array(); this.cachedrecords = new Array(); this.recordids = new Array() }; this.addfilter = function (g, f) { var e = -1; for (var d = 0; d < this.filters.length; d++) { if (this.filters[d].datafield == g) { e = d; break } } if (e == -1) { this.filters[this.filters.length] = { filter: f, datafield: g } } else { this.filters[e] = { filter: f, datafield: g } } }; this.removefilter = function (e) { for (var d = 0; d < this.filters.length; d++) { if (this.filters[d].datafield == e) { this.filters.splice(d, 1); break } } }; this.getItemFromIndex = function (d) { return this.records[d] }; this.updaterow = function (d, n, l) { var e = this.filters && this.filters.length > 0 && !this.virtualmode; if (!e && n != undefined && d != undefined) { n.uid = d; if (!(n[this.source.id])) { n[this.source.id] = n.uid } var j = this.recordsbyid["id" + d]; var k = this.records.indexOf(j); if (k == -1) { return false } this.records[k] = n; if (this.cachedrecords) { this.cachedrecords[k] = n } if (l == true || l == undefined) { this.refresh() } this.changedrecords[n.uid] = { Type: "Update", OldData: j, Data: n }; return true } else { if (this.filters && this.filters.length > 0) { var f = this.cachedrecords; var j = null; var k = -1; for (var h = 0; h < f.length; h++) { if (f[h].uid == d) { j = f[h]; k = h; break } } if (j) { var m = this.that; for (var g in n) { m.cachedrecords[k][g] = n[g] } if (l == true || l == undefined) { this.refresh() } return true } } } return false }; this.addrow = function (h, i, d, g) { if (i != undefined) { if (!h) { i.uid = this.getid(this.source.id, i, this.totalrecords); var e = this.recordsbyid["id" + i.uid]; while (e != null) { var f = Math.floor(Math.random() * 10000).toString(); i.uid = f; e = this.recordsbyid["id" + f] } } else { i.uid = h } if (!(i[this.source.id])) { if (this.source.id != undefined) { i[this.source.id] = i.uid } } if (d == "last") { this.records.push(i) } else { if (typeof d === "number" && isFinite(d)) { this.records.splice(d, 0, i) } else { this.records.splice(0, 0, i) } } if (this.filters && this.filters.length > 0) { if (d == "last") { this.cachedrecords.push(i) } else { if (typeof d === "number" && isFinite(d)) { this.cachedrecords.splice(d, 0, i) } else { this.cachedrecords.splice(0, 0, i) } } } this.totalrecords++; if (this.virtualmode) { this.source.totalrecords = this.totalrecords } if (g == true || g == undefined) { this.refresh() } this.changedrecords[i.uid] = { Type: "New", Data: i }; return true } return false }; this.deleterow = function (j, h) { if (j != undefined) { var d = this.filters && this.filters.length > 0; if (this.recordsbyid["id" + j] && !d) { var e = this.recordsbyid["id" + j]; var k = this.records.indexOf(e); this.changedrecords[j] = { Type: "Delete", Data: this.records[k] }; this.records.splice(k, 1); this.totalrecords--; if (this.virtualmode) { this.source.totalrecords = this.totalrecords } if (h == true || h == undefined) { this.refresh() } return true } else { if (this.filters && this.filters.length > 0) { var f = this.cachedrecords; var e = null; var k = -1; for (var g = 0; g < f.length; g++) { if (f[g].uid == j) { e = f[g]; k = g; break } } if (e) { this.cachedrecords.splice(k, 1); if (h == true || h == undefined) { this.totalrecords = 0; this.records = this.cachedrecords; this.refresh() } return true } } } return false } return false }; this.reload = function (f, d, r, g, h, u, t) { var m = this.that; var l = new Array(); var o = f; var i = d; var j = r; var p = g; var k = i.length; var w = 0; var e = 0; var s, n; this.columns = []; this.bounditems = new Array(); this.loadedrecords = new Array(); this.loadedrootgroups = new Array(); this.loadedgroups = new Array(); this.loadedgroupsByKey = new Array(); this._cachegrouppages = new Array(); this.recordsbyid = {}; if (this.totalrecords == 0) { Object.size = function (z) { var y = 0, x; for (x in z) { if (z.hasOwnProperty(x)) { y++ } } return y }; var v = Object.size(o); this.totalrecords = v; b.each(this.records, function (y) { var z = this; var x = 0; b.each(z, function (A, B) { m.columns[x++] = A }); return false }) } if (this.virtualmode) { if (this.pageable) { this.updateview(); return } var u = 0; if (!this.groupable) { this.updateview(); return } else { var t = this.totalrecords } } else { var u = 0; var t = this.totalrecords } if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) { var q = u; q = this.loadgrouprecords(0, u, t, j, e, p, i, k, l) } else { w = this.loadflatrecords(u, t, j, e, p, i, k, l) } if (k > e) { i.splice(e, k - e) } if (this.groups.length > 0 && this.groupable) { this.totalrows = q } else { this.totalrows = w } return l }; this.loadflatrecords = function (d, o, e, p, l, u, n, q) { var t = this.that; var k = d; var m = d; o = Math.min(o, this.totalrecords); var g = this.sortdata != null; var f = this.source.id && (this.source.datatype == "local" || this.source.datatype == "array" || this.source.datatype == ""); var j = g ? this.sortdata : this.records; for (var h = d; h < o; h++) { var s = {}; if (!g) { s = b.extend({}, j[h]); id = s[t.uniqueId]; s.boundindex = k; t.loadedrecords[k] = s; if (s.uid == undefined) { s.uid = t.getid(t.source.id, s, k) } t.recordsbyid["id" + s.uid] = j[h]; s.uniqueid = t.generatekey(); t.bounditems[this.bounditems.length] = s } else { s = b.extend({}, j[h].value); id = s[t.uniqueId]; s.boundindex = j[h].index; if (s.uid == undefined) { s.uid = t.getid(t.source.id, s, s.boundindex) } t.recordsbyid["id" + s.uid] = j[h].value; t.loadedrecords[k] = s; s.uniqueid = t.generatekey(); t.bounditems[s.boundindex] = s } if (p >= n || id != u[p][t.uniqueId] || (l && l[id])) { q[q.length] = p } u[p] = s; p++; s.visibleindex = m; m++; k++ } if (t.grid.summaryrows) { var r = k; b.each(t.grid.summaryrows, function () { var i = b.extend({}, this); i.boundindex = o++; t.loadedrecords[r] = i; i.uniqueid = t.generatekey(); t.bounditems[t.bounditems.length] = i; u[p] = i; p++; i.visibleindex = m; m++; r++ }) } return m }, this.updateview = function (o, p) { var r = this.that; var k = this.pagesize * this.pagenum; var n = 0; var s = new Array(); var e = this.filters; var j = this.updated; var l = s.length; if (this.pageable) { if (this.virtualmode) { if (!this.groupable || this.groups.length == 0) { this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), e, n, j, s, l, []); this.totalrows = s.length } else { if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) { if (this._cachegrouppages[this.pagenum + "_" + this.pagesize] != undefined) { this.rows = this._cachegrouppages[this.pagenum + "_" + this.pagesize]; this.totalrows = this.rows.length; return } var m = this.pagesize * (1 + this.pagenum); if (m > this.totalrecords) { m = this.totalrecords } this.loadgrouprecords(0, this.pagesize * this.pagenum, m, e, n, j, s, l, []); this._cachegrouppages[this.pagenum + "_" + this.pagesize] = this.rows; this.totalrows = this.rows.length; return } } } } else { if (this.virtualmode && (!this.groupable || this.groups.length == 0)) { var g = this.pagesize; if (g == 0) { g = Math.min(100, this.totalrecords) } var d = g * this.pagenum; if (this.loadedrecords.length == 0) { d = 0 } if (o != null && p != null) { this.loadflatrecords(o, p, e, n, j, s, l, []) } else { this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), e, n, j, s, l, []) } this.totalrows = this.loadedrecords.length; this.rows = s; if (s.length >= g) { return } } } if (this.groupable && this.pageable && this.groups.length > 0 && this._updategroupsinpage) { s = this._updategroupsinpage(r, e, k, n, l, this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum)) } else { for (var h = this.pagesize * this.pagenum; h < this.pagesize * (1 + this.pagenum); h++) { var q = h < this.loadedrecords.length ? this.loadedrecords[h] : null; if (q == null) { continue } if (!this.pagesize || (k >= this.pagesize * this.pagenum && k <= this.pagesize * (this.pagenum + 1))) { s[n] = q; n++ } k++ } } if ((s.length == 0 || s.length < this.pagesize) && !this.pageable && this.virtualmode) { n = s.length; var f = s.length; for (var h = this.pagesize * this.pagenum; h < this.pagesize * (1 + this.pagenum) - f; h++) { var q = {}; q.boundindex = h + f; q.visibleindex = h + f; q.uniqueid = r.generatekey(); q.empty = true; r.bounditems[h + f] = q; s[n] = q; n++ } } this.rows = s }; this.generatekey = function () { var d = function () { return (((1 + Math.random()) * 16) | 0) }; return ("" + d() + d() + "-" + d() + "-" + d() + "-" + d() + "-" + d() + d() + d()) }; this.reloaddata = function () { this.reload(this.records, this.rows, this.filter, this.updated, true) }; this.refresh = function (h) { if (this.suspend) { return } if (h == undefined) { h = true } var l = this.rows.length; var k = this.totalrows; if (this.filters.length > 0 && !this.virtualmode) { var e = ""; var g = this.cachedrecords.length; var s = new Array(); this.totalrecords = 0; var n = this.cachedrecords; this._dataIndexToBoundIndex = new Array(); var f = this.filters.length; if (this.source != null && this.source.filter != undefined && this.source.localdata != undefined) { s = this.source.filter(this.filters, n, g); if (s == undefined) { s = new Array() } this.records = s } else { if (this.source.filter == null || this.source.filter == undefined) { for (var u = 0; u < g; u++) { var o = n[u]; var d = undefined; for (var m = 0; m < f; m++) { var e = this.filters[m].filter; var r = o[this.filters[m].datafield]; var t = e.evaluate(r); if (d == undefined) { d = t } else { if (e.operator == "or") { d = d || t } else { d = d && t } } } if (d) { s[s.length] = b.extend({ dataindex: u }, o); this._dataIndexToBoundIndex[u] = { boundindex: s.length - 1 } } else { this._dataIndexToBoundIndex[u] = null } } this.records = s } } if (this.sortdata) { var i = this.sortfield; if (this.sortcache[i]) { this.sortdata = null; var p = this.sortcache[i].direction; this.sortcache[i] = null; this.sortby(this.sortfield, p); return } } } else { if (this.filters.length == 0 && !this.virtualmode) { if (this.cachedrecords) { this.totalrecords = 0; var n = this.cachedrecords; this.records = n; if (this.sortdata) { var i = this.sortfield; if (this.sortcache[i]) { this.sortdata = null; var p = this.sortcache[i].direction; this.sortcache[i] = null; this.sortby(this.sortfield, p); return } } } } } var q = this.reload(this.records, this.rows, this.filter, this.updated, h); this.updated = null; if (this.rowschangecallback != null) { if (k != totalrows) { this.rowschangecallback({ type: "PagingChanged", data: getpagingdetails() }) } if (l != rows.length) { this.rowschangecallback({ type: "RowsCountChanged", data: { previous: l, current: rows.length } }) } if (q.length > 0 || l != rows.length) { this.rowschangecallback({ type: "RowsChanged", data: { previous: l, current: rows.length, diff: q } }) } } }; return this } })(jqxBaseFramework);

(function (a) { a.extend(a.jqx._jqxGrid.prototype, { _initpager: function () { var r = this.that; var j = this.gridlocalization.pagergotopagestring; var s = this.gridlocalization.pagerrangestring; var l = this.gridlocalization.pagershowrowsstring; var m = (this.pagerheight - 17) / 2; this.pagerdiv = this.pagerdiv || a('<div style="width: 100%; height: 100%; position: relative;"></div>'); if (!this.pageable) { this.pagerdiv.remove(); this.vScrollBar.jqxScrollBar({ thumbSize: 0 }); return } if (!this.pagerrenderer) { this.pagerdiv.css("top", m); this.pager.append(this.pagerdiv); this.pagergotoinput = this.pagergotoinput || a('<div style="margin-right: 7px; width: 27px; height: 17px; float: right;"><input style="margin-top: 0px; text-align: right; width: 27px;" type="text"/></div>'); this.pagergoto = this.pagergoto || a('<div style="float: right; margin-right: 7px;"></div>'); this.pagerrightbutton = this.pagerrightbutton || a('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); this.pagerleftbutton = this.pagerleftbutton || a('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); this.pagerdetails = this.pagerdetails || a('<div style="margin-right: 7px; float: right;"></div>'); this.pagershowrows = this.pagershowrows || a('<div style="margin-right: 7px; float: right;"></div>'); this.pagerbuttons = a('<div style="margin-right: 3px; float: right;"></div>'); if (this.pagershowrowscombo && this.pagershowrowscombo.jqxDropDownList) { this.pagershowrowscombo.remove(); this.pagershowrowscombo = null } this.pagergotoinput.attr("disabled", this.disabled); this.pagerfirstbutton = a('<div type="button" style="padding: 0px; margin-top: 0px; margin-left: 3px; margin-right: 3px; width: 27px; float: right;"></div>'); this.pagerlastbutton = a('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); this.pagershowrowscombo = this.pagershowrowscombo || a('<div id="gridpagerlist" style="margin-top: 0px; margin-right: 7px; float: right;"></div>'); this.pagerdiv.children().remove(); this.pagershowrowscombo[0].id = "gridpagerlist" + this.element.id; this.removeHandler(this.pagerrightbutton, "mousedown"); this.removeHandler(this.pagerrightbutton, "mouseup"); this.removeHandler(this.pagerrightbutton, "click"); this.removeHandler(this.pagerleftbutton, "mousedown"); this.removeHandler(this.pagerleftbutton, "mouseup"); this.removeHandler(this.pagerleftbutton, "click"); this.removeHandler(this.pagerfirstbutton, "mousedown"); this.removeHandler(this.pagerfirstbutton, "mouseup"); this.removeHandler(this.pagerfirstbutton, "click"); this.removeHandler(this.pagerlastbutton, "mousedown"); this.removeHandler(this.pagerlastbutton, "mouseup"); this.removeHandler(this.pagerlastbutton, "click"); this.pagerleftbutton.attr("title", this.gridlocalization.pagerpreviousbuttonstring); this.pagerrightbutton.attr("title", this.gridlocalization.pagernextbuttonstring); if (this.pagermode == "simple") { if (a.jqx.browser.msie && a.jqx.browser.version < 8) { this.pagerbuttons.css("overflow", "visible"); this.pagerbuttons.css("padding", "3px") } this.pagerfirstbutton.attr("title", this.gridlocalization.pagerfirstbuttonstring); this.pagerlastbutton.attr("title", this.gridlocalization.pagerlastbuttonstring); var n = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); n.addClass(this.toThemeProperty("jqx-icon-arrow-first")); this.pagerfirstbutton.wrapInner(n); var g = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); g.addClass(this.toThemeProperty("jqx-icon-arrow-last")); this.pagerlastbutton.wrapInner(g); if (!this.rtl) { this.pagerdiv.append(this.pagerfirstbutton); this.pagerdiv.append(this.pagerleftbutton); this.pagerdiv.append(this.pagerbuttons); this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerlastbutton) } else { this.pagerdiv.append(this.pagerlastbutton); this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerbuttons); this.pagerdiv.append(this.pagerleftbutton); this.pagerdiv.append(this.pagerfirstbutton) } this.pagerlastbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerfirstbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); var t = !this.rtl ? "left" : "right"; this.pagerbuttons.css("float", t); this.pagerlastbutton.css("float", t); this.pagerfirstbutton.css("float", t); this.pagerrightbutton.css("float", t); this.pagerleftbutton.css("float", t); this.pagerdetails.css("float", this.rtl ? "left" : "right"); if (this.rtl) { this.pagerdetails.css("margin-left", "7px"); this.pagerdetails.css("margin-right", "0px") } else { this.pagerdetails.css("margin-left", "0px"); this.pagerdetails.css("margin-right", "7px") } this.pagergotoinput.hide(); this.pagershowrowscombo.hide(); this.pagergoto.hide(); this.pagershowrows.hide() } else { this.pagergotoinput.show(); this.pagershowrowscombo.show(); this.pagergoto.show(); this.pagershowrows.show(); if (!this.rtl) { this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerleftbutton) } } this.pagerrightbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerleftbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerleftbutton.find(".jqx-icon-arrow-left").remove(); this.pagerrightbutton.find(".jqx-icon-arrow-right").remove(); var c = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); c.addClass(this.toThemeProperty("jqx-icon-arrow-left")); this.pagerleftbutton.wrapInner(c); var d = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); d.addClass(this.toThemeProperty("jqx-icon-arrow-right")); this.pagerrightbutton.wrapInner(d); if (!this.rtl) { this.pagerdiv.append(this.pagerdetails) } if (this.pagermode != "simple") { if (!this.rtl) { this.pagerdiv.append(this.pagershowrowscombo); this.pagerdiv.append(this.pagershowrows); this.pagerdiv.append(this.pagergotoinput); this.pagerdiv.append(this.pagergoto) } else { this.pagerdiv.append(this.pagergoto); this.pagerdiv.append(this.pagergotoinput); this.pagerdiv.append(this.pagershowrows); this.pagerdiv.append(this.pagershowrowscombo); this.pagerdiv.append(this.pagerdetails); this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerleftbutton) } } var o = this.pagesizeoptions; if (!this.pagershowrowscombo.jqxDropDownList) { throw new Error("jqxGrid: jqxdropdownlist.js is not loaded."); return } this.pagershowrowscombo.jqxDropDownList({ rtl: this.rtl, disabled: this.disabled, source: o, enableBrowserBoundsDetection: true, keyboardSelection: false, autoDropDownHeight: true, width: "auto", height: 16, theme: this.theme }); var q = 0; for (var p = 0; p < o.length; p++) { if (this.pagesize >= o[p]) { q = p } } this.pagershowrows[0].innerHTML = l; this.pagergoto[0].innerHTML = j; this.updatepagerdetails(); this.pagershowrowscombo.jqxDropDownList({ selectedIndex: q }); this.pagerpageinput = this.pagergotoinput.find("input"); this.pagerpageinput.addClass(this.toThemeProperty("jqx-input")); this.pagerpageinput.addClass(this.toThemeProperty("jqx-widget-content")); if (this.rtl) { this.pagerpageinput.css("direction", "rtl") } var r = this.that; this.removeHandler(this.pagershowrowscombo, "select"); this.addHandler(this.pagershowrowscombo, "select", function (w) { if (w.args) { if (r.vScrollInstance) { r.vScrollInstance.setPosition(0) } if (r.editcell != null && r.endcelledit) { r.endcelledit(r.editcell.row, r.editcell.column, true, false) } var u = w.args.index; var x = r.dataview.pagenum * r.dataview.pagesize; var v = o[u]; var y = r.pagesize; r.pagesize = parseInt(v); if (isNaN(r.pagesize)) { r.pagesize = 10 } if (v >= 100) { r.pagershowrowscombo.jqxDropDownList({ width: "auto" }) } else { r.pagershowrowscombo.jqxDropDownList({ width: 44 }) } r.dataview.pagesize = r.pagesize; var i = Math.floor(x / r.dataview.pagesize); r.prerenderrequired = true; r._requiresupdate = true; r._raiseEvent(10, { pagenum: i, oldpagesize: y, pagesize: r.dataview.pagesize }); r.gotopage(i); if (r.autoheight && r._updatesizeonwindowresize) { r._updatesize(true); setTimeout(function () { r._updatesize(true) }, 500) } } }); var k = this.pagergotoinput.find("input"); k.addClass(this.toThemeProperty("jqx-grid-pager-input")); k.addClass(this.toThemeProperty("jqx-rc-all")); this.removeHandler(k, "keydown"); this.removeHandler(k, "change"); this.addHandler(k, "keydown", function (i) { if (i.keyCode >= 65 && i.keyCode <= 90) { return false } if (i.keyCode == "13") { var u = k.val(); u = parseInt(u); if (!isNaN(u)) { r.gotopage(u - 1) } return false } }); this.addHandler(k, "change", function () { var i = k.val(); i = parseInt(i); if (!isNaN(i)) { r.gotopage(i - 1) } }); this.addHandler(this.pagerrightbutton, "mouseenter", function () { d.addClass(r.toThemeProperty("jqx-icon-arrow-right-hover")) }); this.addHandler(this.pagerleftbutton, "mouseenter", function () { c.addClass(r.toThemeProperty("jqx-icon-arrow-left-hover")) }); this.addHandler(this.pagerrightbutton, "mouseleave", function () { d.removeClass(r.toThemeProperty("jqx-icon-arrow-right-hover")) }); this.addHandler(this.pagerleftbutton, "mouseleave", function () { c.removeClass(r.toThemeProperty("jqx-icon-arrow-left-hover")) }); this.addHandler(this.pagerrightbutton, "mousedown", function () { d.addClass(r.toThemeProperty("jqx-icon-arrow-right-selected")) }); this.addHandler(this.pagerrightbutton, "mouseup", function () { d.removeClass(r.toThemeProperty("jqx-icon-arrow-right-selected")) }); this.addHandler(this.pagerleftbutton, "mousedown", function () { c.addClass(r.toThemeProperty("jqx-icon-arrow-left-selected")) }); this.addHandler(this.pagerleftbutton, "mouseup", function () { c.removeClass(r.toThemeProperty("jqx-icon-arrow-left-selected")) }); this.addHandler(a(document), "mouseup.pagerbuttons" + this.element.id, function () { d.removeClass(r.toThemeProperty("jqx-icon-arrow-right-selected")); c.removeClass(r.toThemeProperty("jqx-icon-arrow-left-selected")) }); this.addHandler(this.pagerrightbutton, "click", function () { if (!r.pagerrightbutton.jqxButton("disabled")) { if (!r.rtl) { r.gotonextpage() } else { r.gotoprevpage() } } }); this.addHandler(this.pagerleftbutton, "click", function () { if (!r.pagerleftbutton.jqxButton("disabled")) { if (!r.rtl) { r.gotoprevpage() } else { r.gotonextpage() } } }); var f = this; if (this.pagermode === "simple") { var e = this.pagerfirstbutton; var h = this.pagerlastbutton; this.addHandler(h, "mouseenter", function () { g.addClass(f.toThemeProperty("jqx-icon-arrow-last-hover")) }); this.addHandler(e, "mouseenter", function () { n.addClass(f.toThemeProperty("jqx-icon-arrow-first-hover")) }); this.addHandler(h, "mouseleave", function () { g.removeClass(f.toThemeProperty("jqx-icon-arrow-last-hover")) }); this.addHandler(e, "mouseleave", function () { n.removeClass(f.toThemeProperty("jqx-icon-arrow-first-hover")) }); this.addHandler(h, "mousedown", function () { g.addClass(f.toThemeProperty("jqx-icon-arrow-last-selected")) }); this.addHandler(e, "mousedown", function () { n.addClass(f.toThemeProperty("jqx-icon-arrow-first-selected")) }); this.addHandler(h, "mouseup", function () { g.removeClass(f.toThemeProperty("jqx-icon-arrow-last-selected")) }); this.addHandler(e, "mouseup", function () { n.removeClass(f.toThemeProperty("jqx-icon-arrow-first-selected")) }); this.addHandler(a(document), "mouseup.pagerbuttons" + name + this.element.id, function () { d.removeClass(f.toThemeProperty("jqx-icon-arrow-right-selected")); c.removeClass(f.toThemeProperty("jqx-icon-arrow-left-selected")); if (g) { g.removeClass(f.toThemeProperty("jqx-icon-arrow-last-selected")); n.removeClass(f.toThemeProperty("jqx-icon-arrow-first-selected")) } }); this.addHandler(e, "click", function () { if (!e.jqxButton("disabled")) { if (!f.rtl) { f.gotopage(0) } else { var u = f.dataview.totalrecords; var i = Math.ceil(u / f.pagesize); f.gotopage(i - 1) } } }); this.addHandler(h, "click", function () { if (!h.jqxButton("disabled")) { if (!f.rtl) { var u = f.dataview.totalrecords; var i = Math.ceil(u / f.pagesize); f.gotopage(i - 1) } else { f.gotopage(0) } } }) } } else { this.pagerdiv.children().remove(); var b = this.pagerrenderer(); if (b != null) { this.pagerdiv.append(a(b)) } this.pager.append(this.pagerdiv) } this.vScrollBar.jqxScrollBar("refresh"); this._arrange() }, _updatepagertheme: function () { if (this.pagershowrowscombo == null) { return } this.pagershowrowscombo.jqxDropDownList({ theme: this.theme }); this.pagerrightbutton.jqxButton({ theme: this.theme }); this.pagerleftbutton.jqxButton({ theme: this.theme }); this.pagerpageinput.removeClass(); var c = this.pagergotoinput.find("input"); c.removeClass(); c.addClass(this.toThemeProperty("jqx-grid-pager-input")); c.addClass(this.toThemeProperty("jqx-rc-all")); this.pagerpageinput.addClass(this.toThemeProperty("jqx-input")); this.pagerpageinput.addClass(this.toThemeProperty("jqx-widget-content")); this.pagerleftbutton.find(".jqx-icon-arrow-left").remove(); this.pagerrightbutton.find(".jqx-icon-arrow-right").remove(); var d = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); d.addClass(this.toThemeProperty("jqx-icon-arrow-left")); this.pagerleftbutton.wrapInner(d); var e = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); e.addClass(this.toThemeProperty("jqx-icon-arrow-right")); this.pagerrightbutton.wrapInner(e); if (this.pagermode == "simple") { if (a.jqx.browser.msie && a.jqx.browser.version < 8) { this.pagerbuttons.css("overflow", "visible"); this.pagerbuttons.css("padding", "3px") } this.pagerfirstbutton.attr("title", this.gridlocalization.pagerfirstbuttonstring); this.pagerlastbutton.attr("title", this.gridlocalization.pagerlastbuttonstring); var h = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); h.addClass(this.toThemeProperty("jqx-icon-arrow-first")); this.pagerfirstbutton.wrapInner(h); var g = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); g.addClass(this.toThemeProperty("jqx-icon-arrow-last")); this.pagerlastbutton.wrapInner(g); this.pagerdiv.append(this.pagerfirstbutton); this.pagerdiv.append(this.pagerleftbutton); this.pagerdiv.append(this.pagerbuttons); this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerlastbutton); this.pagerlastbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerfirstbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerbuttons.css("float", "left"); this.pagerlastbutton.css("float", "left"); this.pagerfirstbutton.css("float", "left"); this.pagerrightbutton.css("float", "left"); this.pagerleftbutton.css("float", "left"); this.pagergotoinput.hide(); this.pagershowrowscombo.hide(); this.pagergoto.hide(); this.pagershowrows.hide() } else { this.pagergotoinput.show(); this.pagershowrowscombo.show(); this.pagergoto.show(); this.pagershowrows.show() } var b = function (j, i) { j.removeHandler(i, "mouseenter"); j.removeHandler(i, "mouseleave"); j.removeHandler(i, "mousedown"); j.removeHandler(i, "mouseup") }; b(this, this.pagerrightbutton); b(this, this.pagerleftbutton); var f = this.that; this.addHandler(this.pagerrightbutton, "mouseenter", function () { e.addClass(f.toThemeProperty("jqx-icon-arrow-right-hover")) }); this.addHandler(this.pagerleftbutton, "mouseenter", function () { d.addClass(f.toThemeProperty("jqx-icon-arrow-left-hover")) }); this.addHandler(this.pagerrightbutton, "mouseleave", function () { e.removeClass(f.toThemeProperty("jqx-icon-arrow-right-hover")) }); this.addHandler(this.pagerleftbutton, "mouseleave", function () { d.removeClass(f.toThemeProperty("jqx-icon-arrow-left-hover")) }); this.addHandler(this.pagerrightbutton, "mousedown", function () { e.addClass(f.toThemeProperty("jqx-icon-arrow-right-selected")) }); this.addHandler(this.pagerrightbutton, "mouseup", function () { e.removeClass(f.toThemeProperty("jqx-icon-arrow-right-selected")) }); this.addHandler(this.pagerleftbutton, "mousedown", function () { d.addClass(f.toThemeProperty("jqx-icon-arrow-left-selected")) }); this.addHandler(this.pagerleftbutton, "mouseup", function () { d.removeClass(f.toThemeProperty("jqx-icon-arrow-left-selected")) }) }, gotopage: function (d) { if (d == null || d == undefined) { d = 0 } if (d == -1) { d = 0 } if (d < 0) { return } var c = this.dataview.totalrecords; if (this.summaryrows) { c += this.summaryrows.length } var e = this.pagenum; this._raiseEvent(25, { oldpagenum: this.dataview.pagenum, pagenum: d, pagesize: this.dataview.pagesize }); var b = Math.ceil(c / this.pagesize); if (d >= b) { if (this.dataview.totalrecords == 0) { this.dataview.pagenum = 0; this.updatepagerdetails() } if (d > 0) { d = b - 1 } } if (this.dataview.pagenum != d || this._requiresupdate) { if (this.pageable) { if (this.source.pager) { this.source.pager(d, this.dataview.pagesize, this.dataview.pagenum) } this.dataview.pagenum = d; if (this.virtualmode) { this.hiddens = new Array(); this.expandedgroups = new Array(); if (this.rendergridrows) { var h = d * this.dataview.pagesize; var g = h + this.dataview.pagesize; if (h != null && g != null) { if (this.pagerrightbutton) { this.pagerrightbutton.jqxButton({ disabled: true }); this.pagerleftbutton.jqxButton({ disabled: true }); this.pagershowrowscombo.jqxDropDownList({ disabled: true }) } if (this.pagerfirstbutton) { this.pagerfirstbutton.jqxButton({ disabled: true }); this.pagerlastbutton.jqxButton({ disabled: true }) } this.updatebounddata("pagechanged"); this._raiseEvent(9, { pagenum: d, oldpagenum: e, pagesize: this.dataview.pagesize }); this.updatepagerdetails(); if (this.autosavestate) { if (this.savestate) { this.savestate() } } return } } } else { this.dataview.updateview() } this._loadrows(); this._updatepageviews(); this.tableheight = null; this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo); this.updatepagerdetails(); if (this.autoheight || this.autorowheight) { var f = this.host.height() - this._gettableheight(); height = f + this._pageviews[0].height; if (height != this.host.height()) { this._arrange(); this._updatepageviews(); if (this.autorowheight) { this._renderrows(this.virtualsizeinfo) } } } if (this.editcell != null && this.endcelledit) { this.endcelledit(this.editcell.row, this.editcell.column, true, false) } this._raiseEvent(9, { pagenum: d, oldpagenum: e, pagesize: this.dataview.pagesize }); if (this.autosavestate) { if (this.savestate) { this.savestate() } } } } }, gotoprevpage: function () { if (this.dataview.pagenum > 0) { this.gotopage(this.dataview.pagenum - 1) } else { if (this.pagermode != "simple") { var c = this.dataview.totalrecords; if (this.summaryrows) { c += this.summaryrows.length } var b = Math.ceil(c / this.pagesize); this.gotopage(b - 1) } } }, gotonextpage: function () { var c = this.dataview.totalrecords; if (this.summaryrows) { c += this.summaryrows.length } var b = Math.ceil(c / this.pagesize); if (this.dataview.pagenum < b - 1) { this.gotopage(this.dataview.pagenum + 1) } else { if (this.pagermode != "simple") { this.gotopage(0) } } }, updatepagerdetails: function () { if (this.pagerdetails != null && this.pagerdetails.length > 0) { var n = this.dataview.pagenum * this.pagesize; var d = (this.dataview.pagenum + 1) * this.pagesize; if (d >= this.dataview.totalrecords) { d = this.dataview.totalrecords } var q = this.dataview.totalrecords; if (this.summaryrows) { q += this.summaryrows.length; if ((this.dataview.pagenum + 1) * this.pagesize > this.dataview.totalrecords) { d = q } } n++; var g = Math.ceil(q / this.dataview.pagesize); if (g >= 1) { g-- } g++; if (this.pagermode !== "simple") { var o = this.pagergotoinput.find("input"); o.val(this.dataview.pagenum + 1) } else { var b = ""; var f = this.pagerbuttonscount; if (f == 0 || !f) { f = 5 } var h = 0; if (this.rtl) { h = f - 1 } while ((this.rtl && h >= 0) || (!this.rtl && h < f)) { var m = 1 + h; var k = this.dataview.pagenum / f; var e = Math.floor(k); m += e * f; var l = this.toTP("jqx-grid-pager-number"); l += " " + this.toTP("jqx-rc-all"); if (m > g) { break } if (!this.rtl) { if (h == 0 && m > f) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + (-1 + m) + "'>...</a>" } } if (this.dataview.pagenum === m - 1) { l += " " + this.toTP("jqx-fill-state-pressed") } if (!this.rtl) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + m + "'>" + m + "</a>"; if (h === f - 1) { var l = this.toTP("jqx-grid-pager-number"); if (g >= 1 + m) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + (1 + m) + "'>...</a>" } } } else { if (h === f - 1) { var l = this.toTP("jqx-grid-pager-number"); if (g >= 1 + m) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + (1 + m) + "'>...</a>" } } if (this.dataview.pagenum === m - 1) { l += " " + this.toTP("jqx-fill-state-pressed") } b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + m + "'>" + m + "</a>" } if (this.rtl) { var l = this.toTP("jqx-grid-pager-number"); if (h == 0 && m > f) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + (-1 + m) + "'>...</a>" } } if (!this.rtl) { h++ } else { h-- } } var p = this["pagerbuttons"].find("a"); this.removeHandler(p, "click"); this.removeHandler(p, "mouseenter"); this.removeHandler(p, "mouseleave"); this["pagerbuttons"][0].innerHTML = b; var j = this; var c = function () { j.addHandler(p, "click", function (i) { var r = a(i.target).attr("data-page"); j.gotopage(parseInt(r) - 1); return false }); j.addHandler(p, "mouseenter", function (i) { a(i.target).addClass(j.toTP("jqx-fill-state-hover")) }); j.addHandler(p, "mouseleave", function (i) { a(i.target).removeClass(j.toTP("jqx-fill-state-hover")) }) }; var p = this["pagerbuttons"].find("a"); c(p) } this.pagergotoinput.attr("title", "1 - " + g); if (d == 0 && d < n) { n = 0 } if (!this.rtl) { this.pagerdetails[0].innerHTML = n + "-" + d + this.gridlocalization.pagerrangestring + q } else { this.pagerdetails[0].innerHTML = q + this.gridlocalization.pagerrangestring + d + "-" + n } if (n > d) { this.gotoprevpage() } } }, _updatepagedview: function (e, g, b) { var j = this.that; if (this.dataview.rows.length != this.dataview.pagesize) { this.dataview.updateview() } var k = this.dataview.rows.length; for (var d = 0; d < k; d++) { var f = this.dataview.rows[d].visibleindex; var h = { index: f, height: this.heights[f], hidden: this.hiddens[f], details: this.details[f] }; if (this.heights[f] == undefined) { this.heights[f] = this.rowsheight; h.height = this.rowsheight } if (this.hiddens[f] == undefined) { this.hiddens[f] = false; h.hidden = false } if (this.details[f] == undefined) { this.details[f] = null } if (h.height != j.rowsheight) { g -= j.rowsheight; g += h.height } if (h.hidden) { g -= h.height } else { b += h.height; var c = 0; if (this.rowdetails) { if (h.details && h.details.rowdetails && !h.details.rowdetailshidden) { c = h.details.rowdetailsheight; b += c; g += c } } } } this._pageviews[0] = { top: 0, height: b }; return g } }) })(jQuery);

(function (a) { a.extend(a.jqx._jqxGrid.prototype, { _handledblclick: function (t, n) { if (t.target == null) { return } if (n.disabled) { return } if (a(t.target).ischildof(this.columnsheader)) { return } var w; if (t.which) { w = (t.which == 3) } else { if (t.button) { w = (t.button == 2) } } if (w) { return } var B; if (t.which) { B = (t.which == 2) } else { if (t.button) { B = (t.button == 1) } } if (B) { return } var v = this.showheader ? this.columnsheader.height() + 2 : 0; var o = this._groupsheader() ? this.groupsheader.height() : 0; var A = this.showtoolbar ? this.toolbarheight : 0; o += A; var e = this.host.offset(); var m = t.pageX - e.left; var l = t.pageY - v - e.top - o; var b = this._hittestrow(m, l); if (!b) { return } var h = b.row; var j = b.index; var q = t.target.className; var p = this.table[0].rows[j]; if (p == null) { return } n.mousecaptured = true; n.mousecaptureposition = { left: t.pageX, top: t.pageY - o }; var r = this.hScrollInstance; var s = r.value; var d = 0; var k = this.groupable ? this.groups.length : 0; for (var u = 0; u < p.cells.length; u++) { var f = parseInt(a(this.columnsrow[0].cells[u]).css("left")); var g = f - s; if (n.columns.records[u].pinned) { g = f } var c = this._getcolumnat(u); if (c != null && c.hidden) { continue } var z = g + a(this.columnsrow[0].cells[u]).width(); if (z >= m && m >= g) { d = u; break } } if (h != null) { var c = this._getcolumnat(d); if (!(q.indexOf("jqx-grid-group-expand") != -1 || q.indexOf("jqx-grid-group-collapse") != -1)) { if (h.boundindex != -1) { n.begincelledit(n.getboundindex(h), c.datafield, c.defaulteditorvalue) } } } }, _getpreveditablecolumn: function (c) { var b = this; while (c > 0) { c--; var d = b.getcolumnat(c); if (!d) { return null } if (!d.editable) { continue } if (!d.hidden) { return d } } return null }, _getnexteditablecolumn: function (c) { var b = this; while (c < this.columns.records.length) { c++; var d = b.getcolumnat(c); if (!d) { return null } if (!d.editable) { continue } if (!d.hidden) { return d } } return null }, _handleeditkeydown: function (B, v) { if (v.handlekeyboardnavigation) { var n = v.handlekeyboardnavigation(B); if (n == true) { return true } } var F = B.charCode ? B.charCode : B.keyCode ? B.keyCode : 0; if (v.showfilterrow && v.filterable) { if (this.filterrow) { if (a(B.target).ischildof(this.filterrow)) { return true } } } if (v.pageable) { if (a(B.target).ischildof(this.pager)) { return true } } if (this.showtoolbar) { if (a(B.target).ischildof(this.toolbar)) { return true } } if (this.showstatusbar) { if (a(B.target).ischildof(this.statusbar)) { return true } } if (this.rowdetails) { if (a(B.target).ischildof(this.content.find("[role='rowgroup']"))) { return true } } if (this.editcell) { if (this.editmode === "selectedrow") { if (F === 13) { this.endrowedit(this.editcell.row, false) } else { if (F === 27) { this.endrowedit(this.editcell.row, true) } } if (F === 9) { return false } return true } if (this.editcell.columntype == null || this.editcell.columntype == "textbox" || this.editcell.columntype == "numberinput" || this.editcell.columntype == "combobox" || this.editcell.columntype == "datetimeinput") { if (F >= 33 && F <= 40 && v.selectionmode == "multiplecellsadvanced") { var h = this.editcell.columntype == "textbox" || this.editcell.columntype == null ? this.editcell.editor : this.editcell.editor.find("input"); var G = v._selection(h); var w = h.val().length; if (G.length > 0 && this.editcell.columntype != "datetimeinput") { v._cancelkeydown = true } if (G.start > 0 && F == 37) { v._cancelkeydown = true } if (G.start < w && F == 39 && this.editcell.columntype != "datetimeinput") { v._cancelkeydown = true } if (this.editcell.columntype == "datetimeinput" && F == 39) { if (G.start + G.length < w) { v._cancelkeydown = true } } } } else { if (this.editcell.columntype == "dropdownlist") { if (F == 37 || F == 39 && v.selectionmode == "multiplecellsadvanced") { v._cancelkeydown = false } } else { if (this.selectionmode == "multiplecellsadvanced" && this.editcell.columntype != "textbox" && this.editcell.columntype != "numberinput") { v._cancelkeydown = true } } } if (F == 32) { if (v.editcell.columntype == "checkbox") { var e = v.getcolumn(v.editcell.datafield); if (e.editable) { var l = !v.getcellvalue(v.editcell.row, v.editcell.column); if (e.cellbeginedit) { var b = e.cellbeginedit(v.editcell.row, e.datafield, e.columntype, !l); if (b == false) { return false } } v.setcellvalue(v.editcell.row, v.editcell.column, l, true); v._raiseEvent(18, { rowindex: v.editcell.row, datafield: v.editcell.column, oldvalue: !l, value: l, columntype: "checkbox" }); return false } } } if (F == 9) { var g = this.editcell.row; var t = this.editcell.column; var k = t; var y = v._getcolumnindex(t); var s = false; var d = v.getrowvisibleindex(g); this.editchar = ""; if (this.editcell.validated != false) { if (B.shiftKey) { var e = v._getpreveditablecolumn(y); if (e) { t = e.datafield; s = true; if (v.selectionmode.indexOf("cell") != -1) { v.selectprevcell(g, k); setTimeout(function () { v.ensurecellvisible(d, t) }, 10) } } } else { var e = v._getnexteditablecolumn(y); if (e) { t = e.datafield; s = true; if (v.selectionmode.indexOf("cell") != -1) { v.selectnextcell(g, k); v._oldselectedcell = v.selectedcell; setTimeout(function () { v.ensurecellvisible(d, t) }, 10) } } } if (s) { v.begincelledit(g, t); if (this.editcell != null && this.editcell.columntype == "checkbox") { this._renderrows(this.virtualsizeinfo) } } else { if (this.editcell != null) { v.endcelledit(g, t, false); this._renderrows(this.virtualsizeinfo) } return true } } return false } else { if (F == 13) { var r = this.selectedcell; if (r) { var u = this.getrowvisibleindex(r.rowindex) } this.endcelledit(this.editcell.row, this.editcell.column, false, true); if (this.selectionmode == "multiplecellsadvanced") { var c = v.getselectedcell(); if (c != null) { if (v.selectcell) { if (this.editcell == null) { if (c.rowindex + 1 < this.dataview.totalrecords) { if (this.sortcolumn != c.datafield) { var d = this.getrowvisibleindex(c.rowindex); var E = this.dataview.loadedrecords[d + 1]; if (E) { if (!this.pageable || (this.pageable && d + 1 < (this.dataview.pagenum + 1) * this.pagesize)) { this.clearselection(false); this.selectcell(this.getboundindex(E), c.datafield); var c = this.getselectedcell(); this.ensurecellvisible(E.visibleindex, c.datafield) } } } else { if (r != null) { var D = this.dataview.loadedrecords[u + 1]; if (D) { if (!this.pageable || (this.pageable && u + 1 < this.pagesize)) { this.clearselection(false); this.selectcell(this.getboundindex(D), c.datafield) } else { if (this.pageable && u + 1 >= this.pagesize) { this.clearselection(false); var D = this.dataview.loadedrecords[u]; this.selectcell(this.getboundindex(D), c.datafield) } } } } } } } } } } return false } else { if (F == 27) { this.endcelledit(this.editcell.row, this.editcell.column, true, true); return false } } } } else { var x = false; if (F == 113) { x = true } if (!B.ctrlKey && !B.altKey) { if (F >= 48 && F <= 57) { this.editchar = String.fromCharCode(F); x = true } if (F >= 65 && F <= 90) { this.editchar = String.fromCharCode(F); var q = false; if (B.shiftKey) { q = B.shiftKey } else { if (B.modifiers) { q = !!(B.modifiers & 4) } } if (!q) { this.editchar = this.editchar.toLowerCase() } x = true } else { if (F >= 96 && F <= 105) { this.editchar = F - 96; this.editchar = this.editchar.toString(); x = true } } var p = a(".jqx-grid").length; x = x && (p == 1 || (p > 1 && v.focused)); var j = a.data(document.body, "jqxgrid.edit"); if (j !== undefined && j !== "") { if (F === 13 || x) { if (j != v.element.id) { return true } } } } if (F == 13 || x) { if (v.getselectedrowindex) { var g = v.getselectedrowindex(); switch (v.selectionmode) { case "singlerow": case "multiplerows": case "multiplerowsextended": if (g >= 0) { var t = ""; for (var z = 0; z < v.columns.records.length; z++) { var e = v.getcolumnat(z); if (e.editable) { t = e.datafield; break } } v.begincelledit(g, t) } break; case "singlecell": case "multiplecells": case "multiplecellsextended": var c = v.getselectedcell(); if (c != null) { var e = v._getcolumnbydatafield(c.datafield); if (e.columntype != "checkbox") { v.begincelledit(c.rowindex, c.datafield) } } break; case "multiplecellsadvanced": var c = v.getselectedcell(); if (c != null) { if (F == 13) { if (v.selectcell) { if (c.rowindex + 1 < v.dataview.totalrecords) { var d = this.getrowvisibleindex(c.rowindex); var E = this.dataview.loadedrecords[d + 1]; if (E) { this.clearselection(false); this.selectcell(this.getboundindex(E), c.datafield); var c = this.getselectedcell(); this.ensurecellvisible(E.visibleindex, c.datafield) } } } } else { if (v.editmode !== "selectedrow") { v.begincelledit(c.rowindex, c.datafield) } } } break } return false } } if (F == 46) { var f = v.getselectedcells(); if (v.selectionmode.indexOf("cell") == -1) { if (v._getcellsforcopypaste) { f = v._getcellsforcopypaste() } } if (f != null && f.length > 0) { for (var o = 0; o < f.length; o++) { var c = f[o]; if (!c.datafield) { continue } var e = v.getcolumn(c.datafield); var C = v.getcellvalue(c.rowindex, c.datafield); if (C !== "" && e.editable && v.enablekeyboarddelete) { var i = null; if (e.columntype == "checkbox") { if (!e.threestatecheckbox) { i = false } } if (e.cellbeginedit) { var b = e.cellbeginedit(c.rowindex, e.datafield, e.columntype, i); if (b == false) { return false } } v._raiseEvent(17, { rowindex: c.rowindex, datafield: c.datafield, value: C }); if (o == f.length - 1) { v.setcellvalue(c.rowindex, c.datafield, i, true); if (e.displayfield != e.datafield) { v.setcellvalue(c.rowindex, e.displayfield, i, true) } } else { v.setcellvalue(c.rowindex, c.datafield, i, false); if (e.displayfield != e.datafield) { v.setcellvalue(c.rowindex, e.displayfield, i, true) } } if (e.cellendedit) { var A = e.cellendedit(c.rowindex, e.datafield, e.columntype, i) } v._raiseEvent(18, { rowindex: c.rowindex, datafield: c.datafield, oldvalue: C, value: i }) } } this.dataview.updateview(); this._renderrows(this.virtualsizeinfo); return false } } if (F == 32) { var c = v.getselectedcell(); if (c != null) { var e = v.getcolumn(c.datafield); if (e.columntype == "checkbox" && e.editable) { var l = !v.getcellvalue(c.rowindex, c.datafield); if (e.cellbeginedit) { var b = e.cellbeginedit(c.rowindex, e.datafield, e.columntype, !l); if (b == false) { return false } } v._raiseEvent(17, { rowindex: c.rowindex, datafield: c.datafield, value: !l, columntype: "checkbox" }); v.setcellvalue(c.rowindex, c.datafield, l, true); v._raiseEvent(18, { rowindex: c.rowindex, datafield: c.datafield, oldvalue: !l, value: l, columntype: "checkbox" }); return false } } } } return true }, begincelledit: function (m, e, k, g, c) { var f = this.getcolumn(e); this._cellscache = new Array(); if (e == null) { return } if (f.columntype == "number" || f.columntype == "button") { return } if (this.groupable) { if (this.groups.indexOf(e) >= 0) { return } if (this.groups.indexOf(f.displayfield) >= 0) { return } } if (this.editrow != undefined) { return } if (this.editcell) { if (this.editcell.row == m && this.editcell.column == e) { return true } if (this.editmode === "selectedrow") { if (this.editcell.row == m) { return } } var d = this.endcelledit(this.editcell.row, this.editcell.column, false, true, false); if (false == d) { return } } var h = f.columntype == "checkbox" || f.columntype == "button"; this.host.removeClass("jqx-disableselect"); this.content.removeClass("jqx-disableselect"); if (f.editable) { if (f.cellbeginedit) { var j = this.getcell(m, e); var l = f.cellbeginedit(m, e, f.columntype, j != null ? j.value : null); if (l == false) { return } } var i = this.getrowvisibleindex(m); this.editcell = this.getcell(m, e); if (this.editcell) { this.editcell.visiblerowindex = i; if (!this.editcell.editing) { if (!h) { this.editcell.editing = true } this.editcell.columntype = f.columntype; this.editcell.defaultvalue = k; if (f.defaultvalue != undefined) { this.editcell.defaultvalue = f.defaultvalue } this.editcell.init = true; if (f.columntype != "checkbox" && this.editmode != "selectedrow") { this._raiseEvent(17, { rowindex: m, datafield: f.datafield, value: this.editcell.value, columntype: f.columntype }) } a.data(document.body, "jqxgrid.edit", this.element.id); if (!h) { var b = this.getrowvisibleindex(m); if (g !== false) { this.ensurecellvisible(b, f.datafield) } if (c !== false) { this._renderrows(this.virtualsizeinfo) } } if (this.editcell) { this.editcell.init = false; return true } } } } else { if (!this.editcell) { return } this.editcell.editor = null; this.editcell.editing = false; if (c !== false) { this._renderrows(this.virtualsizeinfo) } this.editcell = null } }, getScrollTop: function () { if (this._py) { return pageYOffset } this._py = typeof pageYOffset != "undefined"; if (this._py) { return pageYOffset } else { var c = document.body; var b = document.documentElement; b = (b.clientHeight) ? b : c; return b.scrollTop } }, getScrollLeft: function () { if (typeof pageXOffset != "undefined") { return pageXOffset } else { var c = document.body; var b = document.documentElement; b = (b.clientHeight) ? b : c; return b.scrollLeft } }, endcelledit: function (g, m, i, e, n) { if (g == undefined || m == undefined) { if (this.editcell) { g = this.editcell.row; m = this.editcell.column } if (i == undefined) { i = true } } if (!this.editcell) { return } var d = this.getcolumn(m); var t = this; if (t.editmode === "selectedrow") { this.endrowedit(g, i); return } var s = function () { if (n != false) { if (t.isTouchDevice()) { return } if (!t.isNestedGrid) { var u = t.getScrollTop(); var w = t.getScrollLeft(); try { t.element.focus(); t.content.focus(); if (u != t.getScrollTop()) { window.scrollTo(w, u) } setTimeout(function () { t.element.focus(); t.content.focus(); if (u != t.getScrollTop()) { window.scrollTo(w, u) } }, 10) } catch (v) { } } } }; if (d.columntype == "checkbox" || d.columntype == "button") { if (this.editcell) { this.editcell.editor = null; this.editcell.editing = false; this.editcell = null } return true } var h = this._geteditorvalue(d); var f = function (v) { v._hidecelleditor(); if (d.cellendedit) { d.cellendedit(g, m, d.columntype, v.editcell.value, h) } v.editchar = null; if (d.displayfield != d.datafield) { var u = v.getcellvalue(v.editcell.row, d.displayfield); var w = v.editcell.value; oldvalue = { value: w, label: u} } else { oldvalue = v.editcell.value } v._raiseEvent(18, { rowindex: g, datafield: m, displayfield: d.displayfield, oldvalue: h, value: h, columntype: d.columntype }); v.editcell.editor = null; v.editcell.editing = false; v.editcell = null; if (e || e == undefined) { v._renderrows(v.virtualsizeinfo) } s(); if (!v.enablebrowserselection) { v.host.addClass("jqx-disableselect"); v.content.addClass("jqx-disableselect") } }; if (i) { f(this); return false } if (this.validationpopup) { this.validationpopup.hide(); this.validationpopuparrow.hide() } if (d.cellvaluechanging) { var b = d.cellvaluechanging(g, m, d.columntype, this.editcell.value, h); if (b != undefined) { h = b } } if (d.validation) { var c = this.getcell(g, m); try { var o = d.validation(c, h); var k = this.gridlocalization.validationstring; if (o.message != undefined) { k = o.message } var l = typeof o == "boolean" ? o : o.result; if (!l) { if (o.showmessage == undefined || o.showmessage == true) { this._showvalidationpopup(g, m, k) } this.editcell.validated = false; return false } } catch (q) { this._showvalidationpopup(g, m, this.gridlocalization.validationstring); this.editcell.validated = false; return false } } if (d.displayfield != d.datafield) { var j = this.getcellvalue(this.editcell.row, d.displayfield); var p = this.editcell.value; oldvalue = { value: p, label: j} } else { oldvalue = this.editcell.value } if (d.cellendedit) { var r = d.cellendedit(g, m, d.columntype, this.editcell.value, h); if (r == false) { this._raiseEvent(18, { rowindex: g, datafield: m, displayfield: d.displayfield, oldvalue: oldvalue, value: oldvalue, columntype: d.columntype }); f(this); return false } } this._raiseEvent(18, { rowindex: g, datafield: m, displayfield: d.displayfield, oldvalue: oldvalue, value: h, columntype: d.columntype }); this._hidecelleditor(false); if (this.editcell != undefined) { this.editcell.editor = null; this.editcell.editing = false } this.editcell = null; this.editchar = null; this.setcellvalue(g, m, h, e); if (!this.enablebrowserselection) { this.host.addClass("jqx-disableselect"); this.content.addClass("jqx-disableselect") } if (!a.jqx.browser.msie) { s() } a.data(document.body, "jqxgrid.edit", ""); return true }, beginrowedit: function (e) { var d = this; var f = -1; d._oldselectedrow = e; this._cellscache = new Array(); var c = false; if (this.editmode != "selectedrow") { c = true } if (c) { var b = this.editmode; this.editmode = "selectedrow" } a.each(this.columns.records, function (h, i) { if (d.editable && this.editable) { var g = d.getcell(e, this.datafield); d.begincelledit(e, this.datafield, null, false, false); d._raiseEvent(17, { rowindex: e, datafield: this.datafield, value: g.value, columntype: this.columntype }) } }); if (d.editcell) { d.editcell.init = true } this._renderrows(this.virtualsizeinfo); if (c) { this.editmode = b } }, endrowedit: function (k, o) { var D = this; if (!this.editcell) { return false } if (this.editcell.editor == undefined) { return false } var C = function () { if (focus != false) { if (D.isTouchDevice()) { return } if (!D.isNestedGrid) { var i = D.getScrollTop(); var F = D.getScrollLeft(); try { D.element.focus(); D.content.focus(); if (i != D.getScrollTop()) { window.scrollTo(F, i) } setTimeout(function () { D.element.focus(); D.content.focus(); if (i != D.getScrollTop()) { window.scrollTo(F, i) } }, 10) } catch (E) { } } } }; var p = false; if (this.editmode != "selectedrow") { p = true } if (p) { var v = this.editmode; this.editmode = "selectedrow" } var h = false; var d = {}; if (this.validationpopup) { this.validationpopup.hide(); this.validationpopuparrow.hide() } for (var B = 0; B < this.columns.records.length; B++) { var e = this.columns.records[B]; if (!e.editable) { continue } if (e.hidden) { continue } if (e.columntype == "checkbox") { continue } var l = this._geteditorvalue(e); var g = function (F) { F._hidecelleditor(); var E = F.getcellvalue(F.editcell.row, e.displayfield); if (e.cellendedit) { e.cellendedit(k, u, e.columntype, E, l) } F.editchar = null; if (e.displayfield != e.datafield) { var i = F.getcellvalue(F.editcell.row, e.displayfield); var G = E; n = { value: G, label: i} } else { n = E } F._raiseEvent(18, { rowindex: k, datafield: u, displayfield: e.displayfield, oldvalue: E, value: E, columntype: e.columntype }); F.editcell.editing = false }; if (o) { g(this); continue } if (e.cellvaluechanging) { var n = this.getcellvalue(this.editcell.row, e.displayfield); var b = e.cellvaluechanging(k, u, e.columntype, n, l); if (b != undefined) { l = b } } var u = e.datafield; if (e.validation) { var c = this.getcell(k, e.datafield); try { var w = e.validation(c, l); var r = this.gridlocalization.validationstring; if (w.message != undefined) { r = w.message } var t = typeof w == "boolean" ? w : w.result; if (!t) { if (w.showmessage == undefined || w.showmessage == true) { this._showvalidationpopup(k, u, r) } h = true; this.editcell[e.datafield].validated = false; continue } } catch (z) { this._showvalidationpopup(k, u, this.gridlocalization.validationstring); this.editcell[e.datafield].validated = false; h = true; continue } } if (e.displayfield != e.datafield) { var q = this.getcellvalue(this.editcell.row, e.displayfield); var x = this.editcell.value; n = { value: x, label: q} } else { n = this.getcellvalue(this.editcell.row, e.displayfield) } d[e.datafield] = { newvalue: l, oldvalue: n} } var y = {}; var s = {}; if (!h) { this._hidecelleditor(false); for (var B = 0; B < this.columns.records.length; B++) { var e = this.columns.records[B]; var u = e.datafield; if (e.hidden) { continue } if (!e.editable) { continue } if (e.columntype == "checkbox") { var l = this.getcellvalue(k, e.displayfield); this._raiseEvent(18, { rowindex: k, datafield: e.datafield, displayfield: e.displayfield, oldvalue: l, value: l, columntype: e.columntype }); continue } if (!d[e.datafield]) { continue } var l = d[e.datafield].newvalue; var n = d[e.datafield].oldvalue; if (e.cellendedit) { var A = e.cellendedit(k, u, e.columntype, n, l); if (A == false) { this._raiseEvent(18, { rowindex: k, datafield: u, displayfield: e.displayfield, oldvalue: n, value: n, columntype: e.columntype }); g(this); continue } } if (!this.source.updaterow) { this._raiseEvent(18, { rowindex: k, datafield: e.datafield, displayfield: e.displayfield, oldvalue: n, value: l, columntype: e.columntype }) } y[e.datafield] = l; s[e.datafield] = n } var j = this.getrowid(k); var f = this.getrowdata(k); a.each(y, function (i, F) { if (F && F.label != undefined) { var E = D.getcolumn(i); f[E.displayfield] = F.label; f[E.datafield] = F.value } else { f[i] = F } }); if (!this.enablebrowserselection) { this.host.addClass("jqx-disableselect"); this.content.addClass("jqx-disableselect") } a.data(document.body, "jqxgrid.edit", ""); this.editcell = null; this.editchar = null; if (this.source.updaterow) { var m = false; var D = this; var t = function (I) { var G = D.source.updaterow; D.source.updaterow = null; if (false == I) { a.each(s, function (i, K) { if (K && K.label != undefined) { var J = D.getcolumn(i); f[J.displayfield] = K.label; f[J.datafield] = K.value } else { f[i] = K } }); D.updaterow(j, f) } else { D.updaterow(j, f) } for (var F = 0; F < D.columns.records.length; F++) { var H = D.columns.records[F]; var E = H.datafield; D._raiseEvent(18, { rowindex: k, datafield: H.datafield, displayfield: H.displayfield, oldvalue: s[H.datafield], value: f[H.displayfield], columntype: H.columntype }) } D.source.updaterow = G }; try { m = this.source.updaterow(j, f, t); if (m == undefined) { m = true } } catch (z) { m = false; return } } else { this.updaterow(j, f); this._renderrows(this.virtualsizeinfo) } } if (p) { this.editmode = v } return h }, _selection: function (b) { if ("selectionStart" in b[0]) { var g = b[0]; var h = g.selectionEnd - g.selectionStart; return { start: g.selectionStart, end: g.selectionEnd, length: h, text: g.value} } else { var d = document.selection.createRange(); if (d == null) { return { start: 0, end: g.value.length, length: 0} } var c = b[0].createTextRange(); var f = c.duplicate(); c.moveToBookmark(d.getBookmark()); f.setEndPoint("EndToStart", c); var h = d.text.length; return { start: f.text.length, end: f.text.length + d.text.length, length: h, text: d.text} } }, _setSelection: function (e, b, d) { if ("selectionStart" in d[0]) { d[0].focus(); d[0].setSelectionRange(e, b) } else { var c = d[0].createTextRange(); c.collapse(true); c.moveEnd("character", b); c.moveStart("character", e); c.select() } }, findRecordIndex: function (g, c, b) { var b = b; if (c) { var e = b.length; for (var h = 0; h < e; h++) { var f = b[h]; var d = f.label; if (g == d) { return h } } } return -1 }, _destroyeditors: function () { var b = this; if (!this.columns.records) { return } a.each(this.columns.records, function (f, j) { var c = a.trim(this.datafield).split(" ").join(""); switch (this.columntype) { case "dropdownlist": var g = b.editors["dropdownlist_" + c]; if (g) { g.jqxDropDownList("destroy"); b.editors["dropdownlist_" + c] = null } break; case "combobox": var k = b.editors["combobox_" + c]; if (k) { k.jqxComboBox("destroy"); b.editors["combobox_" + c] = null } break; case "datetimeinput": var d = b.editors["datetimeinput_" + this.datafield]; if (d) { d.jqxDateTimeInput("destroy"); b.editors["datetimeinput_" + c] = null } break; case "numberinput": var e = b.editors["numberinput_" + c]; if (e) { e.jqxNumberInput("destroy"); b.editors["numberinput_" + c] = null } break; case "custom": case "template": if (this.destroycustomeditor) { this.destroycustomeditor(b.editors["customeditor_" + c]); b.editors["customeditor_" + c] = null } if (this.destrotemplateeditor) { var m = b.getrows.length(); for (var l = 0; l < m; l++) { this.destrotemplateeditor(b.editors["templateeditor_" + c + "_" + l]); b.editors["templateeditor_" + c + "_" + l] = null } } break; case "textbox": default: var h = b.editors["textboxeditor_" + c]; if (h) { b.removeHandler(h, "keydown"); b.editors["textbox_" + c] = null } break } }); b.editors = new Array() }, _showcelleditor: function (q, G, n, J, w) { if (n == undefined) { return } if (this.editcell == null) { return } if (G.columntype == "checkbox" && G.editable) { return } if (w == undefined) { w = true } if (this.editmode == "selectedrow") { this.editchar = ""; w = false } var E = G.datafield; var g = a(n); var s = this; var d = this.editcell.editor; var H = this.getcellvalue(q, E); var C = this.getcelltext(q, E); var j = this.hScrollInstance; var t = j.value; var i = parseInt(t); var I = this.columns.records.indexOf(G); this.editcell.element = n; if (this.editcell.validated == false) { this._showvalidationpopup() } var l = function (O) { if (s.hScrollInstance.isScrolling() || s.vScrollInstance.isScrolling()) { return } if (!w) { return } if (s.isTouchDevice()) { return } O.focus(); if (s.gridcontent[0].scrollTop != 0) { s.scrolltop(Math.abs(s.gridcontent[0].scrollTop)); s.gridcontent[0].scrollTop = 0 } if (s.gridcontent[0].scrollLeft != 0) { s.gridcontent[0].scrollLeft = 0 } }; switch (G.columntype) { case "dropdownlist": if (this.host.jqxDropDownList) { n.innerHTML = ""; var D = a.trim(G.datafield).split(" ").join(""); var A = a.trim(G.displayfield).split(" ").join(""); if (D.indexOf(".") != -1) { D = D.replace(".", "") } if (A.indexOf(".") != -1) { A = A.replace(".", "") } var k = this.editors["dropdownlist_" + D]; d = k == undefined ? a("<div style='border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='dropdownlisteditor'></div>") : k; d.css("top", a(n).parent().position().top); if (this.oldhscroll) { d.css("left", -i + parseInt(a(n).position().left)) } else { d.css("left", parseInt(a(n).position().left)) } if (G.pinned) { d.css("left", i + parseInt(a(n).position().left)) } if (k == undefined) { d.prependTo(this.table); d[0].id = "dropdownlisteditor" + this.element.id + D; var f = this.source._source ? true : false; var x = null; if (!f) { x = new a.jqx.dataAdapter(this.source, { autoBind: false, uniqueDataFields: [A], async: false, autoSort: true, autoSortField: A }) } else { var o = { localdata: this.source.records, datatype: this.source.datatype, async: false }; x = new a.jqx.dataAdapter(o, { autoBind: false, async: false, uniqueDataFields: [A], autoSort: true, autoSortField: A }) } var u = !G.createeditor ? true : false; d.jqxDropDownList({ enableBrowserBoundsDetection: true, keyboardSelection: false, source: x, rtl: this.rtl, autoDropDownHeight: u, theme: this.theme, width: g.width() - 2, height: g.height() - 2, displayMember: A, valueMember: E }); this.editors["dropdownlist_" + D] = d; if (G.createeditor) { G.createeditor(q, H, d) } } if (G._requirewidthupdate) { d.jqxDropDownList({ width: g.width() - 2 }) } var c = d.jqxDropDownList("listBox").visibleItems; if (!G.createeditor) { if (c.length < 8) { d.jqxDropDownList("autoDropDownHeight", true) } else { d.jqxDropDownList("autoDropDownHeight", false) } } var H = this.getcellvalue(q, A); var z = this.findRecordIndex(H, A, c); if (J) { if (H != "") { d.jqxDropDownList("selectIndex", z, true) } else { d.jqxDropDownList("selectIndex", -1) } } if (!this.editcell) { return } if (this.editcell.defaultvalue != undefined) { d.jqxDropDownList("selectIndex", this.editcell.defaultvalue, true) } if (w) { d.jqxDropDownList("focus") } } break; case "combobox": if (this.host.jqxComboBox) { n.innerHTML = ""; var D = a.trim(G.datafield).split(" ").join(""); var A = a.trim(G.displayfield).split(" ").join(""); if (D.indexOf(".") != -1) { D = D.replace(".", "") } if (A.indexOf(".") != -1) { A = A.replace(".", "") } var r = this.editors["combobox_" + D]; d = r == undefined ? a("<div style='border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='comboboxeditor'></div>") : r; d.css("top", a(n).parent().position().top); if (this.oldhscroll) { d.css("left", -i + parseInt(a(n).position().left)) } else { d.css("left", parseInt(a(n).position().left)) } if (G.pinned) { d.css("left", i + parseInt(a(n).position().left)) } if (r == undefined) { d.prependTo(this.table); d[0].id = "comboboxeditor" + this.element.id + D; var f = this.source._source ? true : false; var x = null; if (!f) { x = new a.jqx.dataAdapter(this.source, { autoBind: false, uniqueDataFields: [A], async: false, autoSort: true, autoSortField: A }) } else { var o = { localdata: this.source.records, datatype: this.source.datatype, async: false }; x = new a.jqx.dataAdapter(o, { autoBind: false, async: false, uniqueDataFields: [A], autoSort: true, autoSortField: A }) } var u = !G.createeditor ? true : false; d.jqxComboBox({ enableBrowserBoundsDetection: true, keyboardSelection: false, source: x, rtl: this.rtl, autoDropDownHeight: u, theme: this.theme, width: g.width() - 2, height: g.height() - 2, displayMember: A, valueMember: E }); d.removeAttr("tabindex"); d.find("div").removeAttr("tabindex"); this.editors["combobox_" + D] = d; if (G.createeditor) { G.createeditor(q, H, d) } } if (G._requirewidthupdate) { d.jqxComboBox({ width: g.width() - 2 }) } var c = d.jqxComboBox("listBox").visibleItems; if (!G.createeditor) { if (c.length < 8) { d.jqxComboBox("autoDropDownHeight", true) } else { d.jqxComboBox("autoDropDownHeight", false) } } var H = this.getcellvalue(q, A); var z = this.findRecordIndex(H, A, c); if (J) { if (H != "") { d.jqxComboBox("selectIndex", z, true); d.jqxComboBox("val", H) } else { d.jqxComboBox("selectIndex", -1); d.jqxComboBox("val", H) } } if (!this.editcell) { return } if (this.editcell.defaultvalue != undefined) { d.jqxComboBox("selectIndex", this.editcell.defaultvalue, true) } if (this.editchar && this.editchar.length > 0) { d.jqxComboBox("input").val(this.editchar) } if (w) { setTimeout(function () { l(d.jqxComboBox("input")); d.jqxComboBox("_setSelection", 0, 0); if (s.editchar) { d.jqxComboBox("_setSelection", 1, 1); s.editchar = null } else { var O = d.jqxComboBox("input").val(); d.jqxComboBox("_setSelection", 0, O.length) } }, 10) } } break; case "datetimeinput": if (this.host.jqxDateTimeInput) { n.innerHTML = ""; var D = a.trim(G.datafield).split(" ").join(""); if (D.indexOf(".") != -1) { D = D.replace(".", "") } var v = this.editors["datetimeinput_" + D]; d = v == undefined ? a("<div style='border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='datetimeeditor'></div>") : v; d.show(); d.css("top", a(n).parent().position().top); if (this.oldhscroll) { d.css("left", -i + parseInt(a(n).position().left)) } else { d.css("left", parseInt(a(n).position().left)) } if (G.pinned) { d.css("left", i + parseInt(a(n).position().left)) } if (v == undefined) { d.prependTo(this.table); d[0].id = "datetimeeditor" + this.element.id + D; var F = { calendar: this.gridlocalization }; d.jqxDateTimeInput({ enableBrowserBoundsDetection: true, localization: F, _editor: true, theme: this.theme, rtl: this.rtl, width: g.width(), height: g.height(), formatString: G.cellsformat }); this.editors["datetimeinput_" + D] = d; if (G.createeditor) { G.createeditor(q, H, d) } } if (G._requirewidthupdate) { d.jqxDateTimeInput({ width: g.width() - 2 }) } if (J) { if (H != "" && H != null) { var K = new Date(H); if (K == "Invalid Date") { if (this.source.getvaluebytype) { K = this.source.getvaluebytype(H, { name: G.datafield, type: "date" }) } } d.jqxDateTimeInput("setDate", K) } else { d.jqxDateTimeInput("setDate", null) } if (this.editcell.defaultvalue != undefined) { d.jqxDateTimeInput("setDate", this.editcell.defaultvalue) } } if (w) { setTimeout(function () { l(d.jqxDateTimeInput("dateTimeInput")) }, 10) } } break; case "numberinput": if (this.host.jqxNumberInput) { n.innerHTML = ""; var D = a.trim(G.datafield).split(" ").join(""); if (D.indexOf(".") != -1) { D = D.replace(".", "") } var M = this.editors["numberinput_" + D]; d = M == undefined ? a("<div style='border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='numbereditor'></div>") : M; d.show(); d.css("top", a(n).parent().position().top); if (this.oldhscroll) { d.css("left", -i + parseInt(a(n).position().left)) } else { d.css("left", parseInt(a(n).position().left)) } if (G.pinned) { d.css("left", i + parseInt(a(n).position().left)) } if (M == undefined) { d.prependTo(this.table); d[0].id = "numbereditor" + this.element.id + D; var m = ""; var y = "left"; var L = 2; if (G.cellsformat) { if (G.cellsformat.indexOf("c") != -1) { m = this.gridlocalization.currencysymbol; y = this.gridlocalization.currencysymbolposition; if (y == "before") { y = "left" } else { y = "right" } if (G.cellsformat.length > 1) { L = parseInt(G.cellsformat.substring(1), 10) } } else { if (G.cellsformat.indexOf("p") != -1) { m = this.gridlocalization.percentsymbol; y = "right"; if (G.cellsformat.length > 1) { L = parseInt(G.cellsformat.substring(1), 10) } } } } else { L = 0 } d.jqxNumberInput({ decimalSeparator: this.gridlocalization.decimalseparator, decimalDigits: L, inputMode: "simple", theme: this.theme, rtl: this.rtl, width: g.width() - 1, height: g.height() - 1, spinButtons: true, symbol: m, symbolPosition: y }); this.editors["numberinput_" + D] = d; if (G.createeditor) { G.createeditor(q, H, d) } } if (G._requirewidthupdate) { d.jqxNumberInput({ width: g.width() - 2 }) } if (J) { if (H != "" && H != null) { var N = H; d.jqxNumberInput("setDecimal", N) } else { d.jqxNumberInput("setDecimal", 0) } if (this.editcell.defaultvalue != undefined) { d.jqxNumberInput("setDecimal", this.editcell.defaultvalue) } if (this.editchar && this.editchar.length > 0) { var p = parseInt(this.editchar); if (!isNaN(p)) { d.jqxNumberInput("setDecimal", p) } } if (w) { setTimeout(function () { l(d.jqxNumberInput("numberInput")); d.jqxNumberInput("_setSelectionStart", 0); if (s.editchar) { if (G.cellsformat.length > 0) { d.jqxNumberInput("_setSelectionStart", 2) } else { d.jqxNumberInput("_setSelectionStart", 1) } s.editchar = null } else { var O = d.jqxNumberInput("spinButtons"); if (O) { var P = d.jqxNumberInput("numberInput").val(); s._setSelection(d.jqxNumberInput("numberInput")[0], P.length, P.length) } else { var P = d.jqxNumberInput("numberInput").val(); s._setSelection(d.jqxNumberInput("numberInput")[0], 0, P.length) } } }, 10) } } } break; case "custom": n.innerHTML = ""; var D = a.trim(G.datafield).split(" ").join(""); if (D.indexOf(".") != -1) { D = D.replace(".", "") } var B = this.editors["customeditor_" + D + "_" + q]; d = B == undefined ? a("<div style='overflow: hidden; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='customeditor'></div>") : B; d.show(); d.css("top", a(n).parent().position().top); if (this.oldhscroll) { d.css("left", -i + parseInt(a(n).position().left)) } else { d.css("left", parseInt(a(n).position().left)) } if (G.pinned) { d.css("left", i + parseInt(a(n).position().left)) } if (B == undefined) { d.prependTo(this.table); d[0].id = "customeditor" + this.element.id + D + "_" + q; this.editors["customeditor_" + D + "_" + q] = d; var b = g.width() - 1; var e = g.height() - 1; d.width(b); d.height(e); if (G.createeditor) { G.createeditor(q, H, d, C, b, e, this.editchar) } } if (G._requirewidthupdate) { d.width(g.width() - 2) } break; case "template": n.innerHTML = ""; var D = a.trim(G.datafield).split(" ").join(""); if (D.indexOf(".") != -1) { D = D.replace(".", "") } var h = this.editors["templateeditor_" + D]; d = h == undefined ? a("<div style='overflow: hidden; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='templateeditor'></div>") : h; d.show(); d.css("top", a(n).parent().position().top); if (this.oldhscroll) { d.css("left", -i + parseInt(a(n).position().left)) } else { d.css("left", parseInt(a(n).position().left)) } if (G.pinned) { d.css("left", i + parseInt(a(n).position().left)) } if (h == undefined) { d.prependTo(this.table); d[0].id = "templateeditor" + this.element.id + D; this.editors["templateeditor_" + D] = d; var b = g.width() - 1; var e = g.height() - 1; d.width(b); d.height(e); if (G.createeditor) { G.createeditor(q, H, d, C, b, e, this.editchar) } } if (G._requirewidthupdate) { d.width(g.width() - 2) } break; case "textbox": default: n.innerHTML = ""; d = this.editors["textboxeditor_" + G.datafield] || a("<input autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' type='textbox' id='textboxeditor'/>"); d[0].id = "textboxeditor" + this.element.id + G.datafield; d.appendTo(g); if (this.rtl) { d.css("direction", "rtl") } if (J || d[0].className == "") { d.addClass(this.toThemeProperty("jqx-input")); d.addClass(this.toThemeProperty("jqx-widget-content")); if (this.editchar && this.editchar.length > 0) { d.val(this.editchar) } else { if (G.cellsformat != "") { H = this.getcelltext(q, E) } if (H == undefined) { H = "" } d.val(H) } if (this.editcell.defaultvalue != undefined) { d.val(this.editcell.defaultvalue) } d.width(g.width() + 1); d.height(g.height() + 1); if (G.createeditor) { G.createeditor(q, H, d) } if (G.cellsformat != "") { if (G.cellsformat.indexOf("p") != -1 || G.cellsformat.indexOf("c") != -1 || G.cellsformat.indexOf("n") != -1 || G.cellsformat.indexOf("f") != -1) { if (!this.editors["textboxeditor_" + G.datafield]) { d.keydown(function (P) { var V = P.charCode ? P.charCode : P.keyCode ? P.keyCode : 0; var S = String.fromCharCode(V); var T = parseInt(S); if (isNaN(T)) { return true } if (s._selection(d).length > 0) { return true } var R = ""; var Q = d.val(); if (G.cellsformat.length > 1) { var U = parseInt(G.cellsformat.substring(1)); if (isNaN(U)) { U = 0 } } else { var U = 0 } if (U > 0) { if (Q.indexOf(s.gridlocalization.decimalseparator) != -1) { if (s._selection(d).start > Q.indexOf(s.gridlocalization.decimalseparator)) { return true } } } for (var W = 0; W < Q.length - U; W++) { var O = Q.substring(W, W + 1); if (O.match(/^[0-9]+$/) != null) { R += O } } if (R.length >= 11) { return false } }) } } } } this.editors["textboxeditor_" + G.datafield] = d; if (J) { if (w) { setTimeout(function () { l(d); if (s.editchar) { s._setSelection(d[0], 1, 1); s.editchar = null } else { s._setSelection(d[0], 0, d.val().length) } }, 25) } } break } if (J) { if (G.initeditor) { G.initeditor(q, H, d, C, this.editchar) } } if (d) { d[0].style.zIndex = 1 + n.style.zIndex; if (a.jqx.browser.msie && a.jqx.browser.version < 8) { d[0].style.zIndex = 1 + this.columns.records.length + n.style.zIndex } d.css("display", "block"); this.editcell.editor = d; if (!this.editcell[E]) { this.editcell[E] = {}; this.editcell[E].editor = d } else { this.editcell[E].editor = d } } if (s.isTouchDevice()) { return } setTimeout(function () { if (s.content) { s.content[0].scrollTop = 0; s.content[0].scrollLeft = 0 } if (s.gridcontent) { s.gridcontent[0].scrollLeft = 0; s.gridcontent[0].scrollTop = 0 } }, 10) }, _setSelection: function (d, g, b) { try { if ("selectionStart" in d) { d.setSelectionRange(g, b) } else { var c = d.createTextRange(); c.collapse(true); c.moveEnd("character", b); c.moveStart("character", g); c.select() } } catch (e) { var f = e } }, _hideeditors: function () { if (this.editcells != null) { var b = this; for (var c in this.editcells) { b.editcell = b.editcells[c]; b._hidecelleditor() } } }, _hidecelleditor: function (b) { if (!this.editcell) { return } if (this.editmode === "selectedrow") { for (var c = 0; c < this.columns.records.length; c++) { var e = this.columns.records[c]; if (this.editcell[e.datafield] && this.editcell[e.datafield].editor) { this.editcell[e.datafield].editor.hide(); var d = this.editcell[e.datafield].editor; switch (e.columntype) { case "dropdownlist": d.jqxDropDownList({ closeDelay: 0 }); d.jqxDropDownList("hideListBox"); d.jqxDropDownList({ closeDelay: 300 }); break; case "combobox": d.jqxComboBox({ closeDelay: 0 }); d.jqxComboBox("hideListBox"); d.jqxComboBox({ closeDelay: 300 }); break; case "datetimeinput": if (d.jqxDateTimeInput("isOpened")) { d.jqxDateTimeInput({ closeDelay: 0 }); d.jqxDateTimeInput("hideCalendar"); d.jqxDateTimeInput({ closeDelay: 300 }) } break } } } if (this.validationpopup) { this.validationpopup.hide(); this.validationpopuparrow.hide() } return } if (this.editcell.columntype == "checkbox") { return } if (this.editcell.editor) { this.editcell.editor.hide(); switch (this.editcell.columntype) { case "dropdownlist": this.editcell.editor.jqxDropDownList({ closeDelay: 0 }); this.editcell.editor.jqxDropDownList("hideListBox"); this.editcell.editor.jqxDropDownList({ closeDelay: 300 }); break; case "combobox": this.editcell.editor.jqxComboBox({ closeDelay: 0 }); this.editcell.editor.jqxComboBox("hideListBox"); this.editcell.editor.jqxComboBox({ closeDelay: 300 }); break; case "datetimeinput": var f = this.editcell.editor; if (f.jqxDateTimeInput("isOpened")) { f.jqxDateTimeInput({ closeDelay: 0 }); f.jqxDateTimeInput("hideCalendar"); f.jqxDateTimeInput({ closeDelay: 300 }) } break } } if (this.validationpopup) { this.validationpopup.hide(); this.validationpopuparrow.hide() } if (!this.isNestedGrid) { if (b != false) { this.element.focus() } } }, _geteditorvalue: function (h) { var n = new String(); if (!this.editcell) { return null } var k = this.editcell.editor; if (this.editmode == "selectedrow") { if (this.editcell[h.datafield]) { var k = this.editcell[h.datafield].editor } } if (k) { switch (h.columntype) { case "textbox": default: n = k.val(); if (h.cellsformat != "") { var m = "string"; var e = this.source.datafields || ((this.source._source) ? this.source._source.datafields : null); if (e) { var o = ""; a.each(e, function () { if (this.name == h.displayfield) { if (this.type) { o = this.type } return false } }); if (o) { m = o } } var i = m === "number" || m === "float" || m === "int" || m === "integer"; var f = m === "date" || m === "time"; if (i || (m === "string" && (h.cellsformat.indexOf("p") != -1 || h.cellsformat.indexOf("c") != -1 || h.cellsformat.indexOf("n") != -1 || h.cellsformat.indexOf("f") != -1))) { if (n === "" && h.nullable) { return "" } if (n.indexOf(this.gridlocalization.currencysymbol) > -1) { n = n.replace(this.gridlocalization.currencysymbol, "") } var l = function (v, t, u) { var r = v; if (t == u) { return v } var s = r.indexOf(t); while (s != -1) { r = r.replace(t, u); s = r.indexOf(t) } return r }; n = l(n, this.gridlocalization.thousandsseparator, ""); n = n.replace(this.gridlocalization.decimalseparator, "."); if (n.indexOf(this.gridlocalization.percentsymbol) > -1) { n = n.replace(this.gridlocalization.percentsymbol, "") } var d = ""; for (var q = 0; q < n.length; q++) { var b = n.substring(q, q + 1); if (b === "-") { d += "-" } if (b === ".") { d += "." } if (b.match(/^[0-9]+$/) != null) { d += b } } n = d; n = n.replace(/ /g, ""); n = new Number(n); if (isNaN(n)) { n = "" } } if (f || (m === "string" && (h.cellsformat.indexOf("H") != -1 || h.cellsformat.indexOf("m") != -1 || h.cellsformat.indexOf("M") != -1 || h.cellsformat.indexOf("y") != -1 || h.cellsformat.indexOf("h") != -1 || h.cellsformat.indexOf("d") != -1))) { if (n === "" && h.nullable) { return "" } var c = n; n = new Date(n); if (n == "Invalid Date" || n == null) { if (a.jqx.dataFormat) { n = a.jqx.dataFormat.tryparsedate(c, this.gridlocalization) } if (n == "Invalid Date" || n == null) { n = "" } } } } if (h.displayfield != h.datafield) { n = { label: n, value: n} } break; case "checkbox": if (k.jqxCheckBox) { n = k.jqxCheckBox("checked") } break; case "datetimeinput": if (k.jqxDateTimeInput) { k.jqxDateTimeInput({ isEditing: false }); k.jqxDateTimeInput("_validateValue"); n = k.jqxDateTimeInput("getDate"); if (n == null) { return null } n = new Date(n.toString()); if (h.displayfield != h.datafield) { n = { label: n, value: n} } } break; case "dropdownlist": if (k.jqxDropDownList) { var g = k.jqxDropDownList("selectedIndex"); var p = k.jqxDropDownList("listBox").getVisibleItem(g); if (h.displayfield != h.datafield) { if (p) { n = { label: p.label, value: p.value} } else { n = "" } } else { if (p) { n = p.label } else { n = "" } } if (n == null) { n = "" } } break; case "combobox": if (k.jqxComboBox) { n = k.jqxComboBox("val"); if (h.displayfield != h.datafield) { var p = k.jqxComboBox("getSelectedItem"); if (p != null) { n = { label: p.label, value: p.value} } } if (n == null) { n = "" } } break; case "numberinput": if (k.jqxNumberInput) { if (this.touchdevice) { k.jqxNumberInput("_doTouchHandling") } var j = k.jqxNumberInput("getDecimal"); n = new Number(j); n = parseFloat(n); if (isNaN(n)) { n = 0 } if (h.displayfield != h.datafield) { n = { label: n, value: n} } } break } if (h.geteditorvalue) { if (this.editmode == "selectedrow") { n = h.geteditorvalue(this.editcell.row, this.getcellvalue(this.editcell.row, h.datafield), k) } else { n = h.geteditorvalue(this.editcell.row, this.editcell.value, k) } } } return n }, hidevalidationpopups: function () { if (this.popups) { a.each(this.popups, function () { this.validation.remove(); this.validationrow.remove() }); this.popups = new Array() } if (this.validationpopup) { this.validationpopuparrow.hide(); this.validationpopup.hide() } }, showvalidationpopup: function (o, d, p) { if (p == undefined) { var p = this.gridlocalization.validationstring } var n = a("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>"); var m = a("<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>"); n.html(p); m.addClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); n.addClass(this.toThemeProperty("jqx-grid-validation")); n.addClass(this.toThemeProperty("jqx-rc-all")); n.prependTo(this.table); m.prependTo(this.table); var g = this.hScrollInstance; var i = g.value; var f = parseInt(i); var k = this.getcolumn(d).uielement; var j = a(this.hittestinfo[o].visualrow); n.css("top", parseInt(j.position().top) + 30 + "px"); var b = parseInt(n.css("top")); m.css("top", b - 12); m.removeClass(); m.addClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); var e = false; if (b >= this._gettableheight()) { m.removeClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); m.addClass(this.toThemeProperty("jqx-grid-validation-arrow-down")); b = parseInt(j.position().top) - this.rowsheight - 5; if (b < 0) { b = 0; this.validationpopuparrow.removeClass(this.toThemeProperty("jqx-grid-validation-arrow-down")); e = true } n.css("top", b + "px"); m.css("top", b + n.outerHeight() - 9) } var l = -f + parseInt(a(k).position().left); m.css("left", f + l + 30); var c = n.width(); if (c + l > this.host.width() - 20) { var h = c + l - this.host.width() + 40; l -= h } if (!e) { n.css("left", f + l) } else { n.css("left", f + parseInt(a(k).position().left) - n.outerWidth()) } n.show(); m.show(); if (!this.popups) { this.popups = new Array() } this.popups[this.popups.length] = { validation: n, validationrow: m} }, _showvalidationpopup: function (p, e, q) { var c = this.editcell; var k = this.editcell.editor; if (this.editmode == "selectedrow") { var c = this.editcell[e]; if (c && c.editor) { k = c.editor; c.element = k } } if (!k) { return } if (this.validationpopup && a.jqx.isHidden(this.validationpopup)) { if (this.validationpopup.remove) { this.validationpopup.remove(); this.validationpopuparrow.remove() } this.validationpopup = null; this.validationpopuparrow = null; if (e === undefined && q === undefined && this.editors && this.editors.length === 0) { return } } if (!this.validationpopup) { var n = a("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>"); var m = a("<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>"); n.html(q); m.addClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); n.addClass(this.toThemeProperty("jqx-grid-validation")); n.addClass(this.toThemeProperty("jqx-rc-all")); n.prependTo(this.table); m.prependTo(this.table); this.validationpopup = n; this.validationpopuparrow = m } else { this.validationpopup.html(q) } var h = this.hScrollInstance; var j = h.value; var g = parseInt(j); this.validationpopup.css("top", parseInt(a(c.element).parent().position().top) + (this.rowsheight + 5) + "px"); var b = parseInt(this.validationpopup.css("top")); this.validationpopuparrow.css("top", b - 12); this.validationpopuparrow.removeClass(); this.validationpopuparrow.addClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); var o = this._gettableheight(); var f = false; if (b >= o) { this.validationpopuparrow.removeClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); this.validationpopuparrow.addClass(this.toThemeProperty("jqx-grid-validation-arrow-down")); b = parseInt(a(c.element).parent().position().top) - this.rowsheight - 5; if (b < 0) { b = 0; this.validationpopuparrow.removeClass(this.toThemeProperty("jqx-grid-validation-arrow-down")); f = true } this.validationpopup.css("top", b + "px"); this.validationpopuparrow.css("top", b + this.validationpopup.outerHeight() - 9) } var l = -g + parseInt(a(c.element).position().left); this.validationpopuparrow.css("left", g + l + 30); var d = this.validationpopup.width(); if (d + l > this.host.width() - 20) { var i = d + l - this.host.width() + 40; l -= i } if (!f) { this.validationpopup.css("left", g + l) } else { this.validationpopup.css("left", g + parseInt(a(c.element).position().left) - this.validationpopup.outerWidth()) } this.validationpopup.show(); this.validationpopuparrow.show() } }) })(jQuery);
(function (a) { a.extend(a.jqx._jqxGrid.prototype, { selectallrows: function () { this._trigger = false; var d = this.virtualmode ? this.dataview.totalrecords : this.dataview.loadedrecords.length; this.selectedrowindexes = new Array(); var e = this.dataview.loadedrecords; for (var c = 0; c < d; c++) { var f = e[c]; if (!f) { this.selectedrowindexes[c] = c; continue } var b = this.getboundindex(f); this.selectedrowindexes[c] = b } if (this.selectionmode == "checkbox" && !this._checkboxcolumnupdating) { if (this._checkboxcolumn) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: true }) } } this._renderrows(this.virtualsizeinfo); this._trigger = true; if (this.selectionmode == "checkbox") { this._raiseEvent(2, { rowindex: this.selectedrowindexes }) } }, unselectallrows: function () { this._trigger = false; var d = this.virtualmode ? this.dataview.totalrecords : this.dataview.loadedrecords.length; this.selectedrowindexes = new Array(); var e = this.dataview.loadedrecords; for (var c = 0; c < d; c++) { var f = e[c]; if (!f) { this.selectedrowindexes[c] = c; continue } var b = this.getboundindex(f); this.selectedrowindexes[c] = -1 } if (this.selectionmode == "checkbox" && !this._checkboxcolumnupdating) { if (this._checkboxcolumn) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: true }) } } this._renderrows(this.virtualsizeinfo); this._trigger = true; if (this.selectionmode == "checkbox") { this._raiseEvent(2, { rowindex: this.selectedrowindexes }) } }, selectrow: function (b, c) { this._applyrowselection(b, true, c); if (c !== false) { this._updatecheckboxselection() } }, _updatecheckboxselection: function () { if (this.selectionmode == "checkbox") { var d = this.getrows(); if (d && this._checkboxcolumn) { if (d.length === 0) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false }); return } var c = d.length; if (this.virtualmode) { c = this.source._source.totalrecords } var b = this.selectedrowindexes.length; if (b === c) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: true }) } else { if (b === 0) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false }) } else { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: null }) } } } } }, unselectrow: function (b, c) { this._applyrowselection(b, false, c); if (c !== false) { this._updatecheckboxselection() } }, selectcell: function (c, b) { this._applycellselection(c, b, true) }, unselectcell: function (c, b) { this._applycellselection(c, b, false) }, clearselection: function (c, d) { this._trigger = false; this.selectedrowindex = -1; this._oldselectedcell = null; if (d !== false) { for (var b = 0; b < this.selectedrowindexes.length; b++) { this._raiseEvent(3, { rowindex: this.selectedrowindexes[b] }) } } this.selectedrowindexes = new Array(); this.selectedcells = new Array(); if (this.selectionmode == "checkbox" && !this._checkboxcolumnupdating) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false }) } if (false === c) { this._trigger = true; return } this._renderrows(this.virtualsizeinfo); this._trigger = true; if (this.selectionmode == "checkbox") { this._raiseEvent(3, { rowindex: this.selectedrowindexes }) } }, getselectedrowindex: function () { if (this.selectedrowindex == -1) { for (var b = 0; b < this.selectedrowindexes.length; b++) { return this.selectedrowindexes[b] } } return this.selectedrowindex }, getselectedrowindexes: function () { return this.selectedrowindexes }, getselectedcell: function () { if (!this.selectedcell) { return null } var b = this.selectedcell; b.row = this.selectedcell.rowindex; b.column = this.selectedcell.datafield; b.value = this.getcellvalue(b.row, b.column); return b }, getselectedcells: function () { var b = new Array(); for (obj in this.selectedcells) { b[b.length] = this.selectedcells[obj] } return b }, _getcellsforcopypaste: function () { var e = new Array(); if (this.selectionmode.indexOf("cell") == -1) { var h = this.selectedrowindexes; for (var d = 0; d < h.length; d++) { var c = h[d]; for (var f = 0; f < this.columns.records.length; f++) { var g = c + "_" + this.columns.records[f].datafield; var b = { rowindex: c, datafield: this.columns.records[f].datafield }; e.push(b) } } } return e }, deleteselection: function () { var d = this; var f = d.getselectedcells(); if (this.selectionmode.indexOf("cell") == -1) { f = this._getcellsforcopypaste() } if (f != null && f.length > 0) { for (var e = 0; e < f.length; e++) { var b = f[e]; var g = d.getcolumn(b.datafield); var h = d.getcellvalue(b.rowindex, b.datafield); if (!g) { continue } if (h !== "") { var c = null; if (g.columntype == "checkbox") { if (!g.threestatecheckbox) { c = false } } d._raiseEvent(17, { rowindex: b.rowindex, datafield: b.datafield, value: h }); if (e == f.length - 1) { d.setcellvalue(b.rowindex, b.datafield, c, true); if (g.displayfield != g.datafield) { d.setcellvalue(b.rowindex, g.displayfield, c, true) } } else { d.setcellvalue(b.rowindex, b.datafield, c, false); if (g.displayfield != g.datafield) { d.setcellvalue(b.rowindex, g.displayfield, c, true) } } d._raiseEvent(18, { rowindex: b.rowindex, datafield: b.datafield, oldvalue: h, value: c }) } } this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } }, copyselection: function () { var f = ""; var l = this; this.clipboardselection = {}; this._clipboardselection = []; var k = l.getselectedcells(); if (this.selectionmode.indexOf("cell") == -1) { k = this._getcellsforcopypaste() } if (k != null && k.length > 0) { var m = 999999999999999; var j = -1; for (var d = 0; d < k.length; d++) { var g = k[d]; var b = l.getcolumn(g.datafield); if (b != null) { var h = l.getcelltext(g.rowindex, g.datafield); if (!this.clipboardselection[g.rowindex]) { this.clipboardselection[g.rowindex] = {} } this.clipboardselection[g.rowindex][g.datafield] = h; m = Math.min(m, g.rowindex); j = Math.max(j, g.rowindex) } } for (var c = m; c <= j; c++) { var e = 0; this._clipboardselection[this._clipboardselection.length] = new Array(); if (this.clipboardselection[c] != undefined) { a.each(this.clipboardselection[c], function (i, n) { if (e > 0) { f += "\t" } var o = n; if (n == null) { o = "" } l._clipboardselection[l._clipboardselection.length - 1][e] = o; e++; f += o }) } if (c < j) { f += "\n" } } } this.clipboardselectedtext = f; return f }, pasteselection: function () { var o = this.getselectedcells(); if (this.selectionmode.indexOf("cell") == -1) { o = this._getcellsforcopypaste() } if (o != null && o.length > 0) { var n = o[0].rowindex; var f = o[0].datafield; var k = this._getcolumnindex(f); var j = 0; this.selectedrowindexes = new Array(); this.selectedcells = new Array(); if (!this._clipboardselection) { return } for (var p = 0; p < this._clipboardselection.length; p++) { for (var i = 0; i < this._clipboardselection[p].length; i++) { var g = this.getcolumnat(k + i); if (!g) { continue } var l = this.getcell(n + p, g.datafield); var d = null; d = this._clipboardselection[p][i]; if (d != null) { if (g.cellsformat) { if (g.cellsformat.indexOf("p") != -1 || g.cellsformat.indexOf("c") != -1 || g.cellsformat.indexOf("n") != -1 || g.cellsformat.indexOf("f") != -1) { if (d.indexOf(this.gridlocalization.currencysymbol) > -1) { d = d.replace(this.gridlocalization.currencysymbol, "") } var h = function (t, r, s) { var c = t; if (r == s) { return t } var q = c.indexOf(r); while (q != -1) { c = c.replace(r, s); q = c.indexOf(r) } return c }; d = h(d, this.gridlocalization.thousandsseparator, ""); d = d.replace(this.gridlocalization.decimalseparator, "."); if (d.indexOf(this.gridlocalization.percentsymbol) > -1) { d = d.replace(this.gridlocalization.percentsymbol, "") } var e = ""; for (var m = 0; m < d.length; m++) { var b = d.substring(m, m + 1); if (b === "-") { e += "-" } if (b === ".") { e += "." } if (b.match(/^[0-9]+$/) != null) { e += b } } d = e; d = d.replace(/ /g, ""); d = new Number(d); if (isNaN(d)) { d = "" } } } this._raiseEvent(17, { rowindex: n + p, datafield: l.datafield, value: d }); this.setcellvalue(l.row, l.column, d, false); this._raiseEvent(18, { rowindex: n + p, datafield: l.datafield, oldvalue: this.getcellvalue(l.rowindex, l.datafield), value: d }); this._applycellselection(n + p, l.datafield, true, false) } } } this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } }, _applyrowselection: function (e, i, f, h, b) { if (e == null) { return false } var j = this.selectedrowindex; if (this.selectionmode == "singlerow") { if (i) { this._raiseEvent(2, { rowindex: e, row: this.getrowdata(e) }) } else { this._raiseEvent(3, { rowindex: e, row: this.getrowdata(e) }) } this._raiseEvent(3, { rowindex: j }); this.selectedrowindexes = new Array(); this.selectedcells = new Array() } if (h == true) { this.selectedrowindexes = new Array() } if (this.dataview.filters.length > 0) { var c = this.getrowdata(e); if (c && c.dataindex !== undefined) { e = c.dataindex } else { if (c && c.dataindex === undefined) { if (c.uid != undefined) { e = this.getrowboundindexbyid(c.uid) } } } } var d = this.selectedrowindexes.indexOf(e); if (i) { this.selectedrowindex = e; if (d == -1) { this.selectedrowindexes.push(e); if (this.selectionmode != "singlerow") { this._raiseEvent(2, { rowindex: e, row: this.getrowdata(e) }) } } else { if (this.selectionmode == "multiplerows") { this.selectedrowindexes.splice(d, 1); this._raiseEvent(3, { rowindex: this.selectedrowindex, row: this.getrowdata(e) }); this.selectedrowindex = this.selectedrowindexes.length > 0 ? this.selectedrowindexes[this.selectedrowindexes.length - 1] : -1 } } } else { if (d >= 0 || this.selectionmode == "singlerow" || this.selectionmode == "multiplerowsextended" || this.selectionmode == "multiplerowsadvanced") { var g = this.selectedrowindexes[d]; this.selectedrowindexes.splice(d, 1); this._raiseEvent(3, { rowindex: g, row: this.getrowdata(e) }); this.selectedrowindex = -1 } } if (f == undefined || f) { this._rendervisualrows() } return true }, _applycellselection: function (e, b, h, f) { if (e == null) { return false } if (b == null) { return false } var j = this.selectedrowindex; if (this.selectionmode == "singlecell") { var d = this.selectedcell; if (d != null) { this._raiseEvent(16, { rowindex: d.rowindex, datafield: d.datafield }) } this.selectedcells = new Array() } if (this.selectionmode == "multiplecellsextended" || this.selectionmode == "multiplecellsadvanced") { var d = this.selectedcell; if (d != null) { this._raiseEvent(16, { rowindex: d.rowindex, datafield: d.datafield }) } } var g = e + "_" + b; if (this.dataview.filters.length > 0) { var c = this.getrowdata(e); if (c && c.dataindex !== undefined) { e = c.dataindex; var g = e + "_" + b } else { if (c && c.dataindex === undefined) { if (c.uid) { e = this.getrowboundindexbyid(c.uid); var g = e + "_" + b } } } } var i = { rowindex: e, datafield: b }; if (h) { this.selectedcell = i; if (!this.selectedcells[g]) { this.selectedcells[g] = i; this.selectedcells.length++; this._raiseEvent(15, i) } else { if (this.selectionmode == "multiplecells" || this.selectionmode == "multiplecellsextended" || this.selectionmode == "multiplecellsadvanced") { delete this.selectedcells[g]; if (this.selectedcells.length > 0) { this.selectedcells.length-- } this._raiseEvent(16, i) } } } else { delete this.selectedcells[g]; if (this.selectedcells.length > 0) { this.selectedcells.length-- } this._raiseEvent(16, i) } if (f == undefined || f) { this._rendervisualrows() } return true }, _getcellindex: function (b) { var c = -1; a.each(this.selectedcells, function () { c++; if (this[b]) { return false } }); return c }, _clearhoverstyle: function () { if (undefined == this.hoveredrow || this.hoveredrow == -1) { return } if (this.vScrollInstance.isScrolling()) { return } if (this.hScrollInstance.isScrolling()) { return } var b = this.table.find(".jqx-grid-cell-hover"); if (b.length > 0) { b.removeClass(this.toTP("jqx-grid-cell-hover")); b.removeClass(this.toTP("jqx-fill-state-hover")) } this.hoveredrow = -1 }, _clearselectstyle: function () { var k = this.table[0].rows.length; var p = this.table[0].rows; var l = this.toTP("jqx-grid-cell-selected"); var c = this.toTP("jqx-fill-state-pressed"); var m = this.toTP("jqx-grid-cell-hover"); var h = this.toTP("jqx-fill-state-hover"); for (var g = 0; g < k; g++) { var b = p[g]; var f = b.cells.length; var o = b.cells; for (var e = 0; e < f; e++) { var d = o[e]; var n = a(d); if (d.className.indexOf("jqx-grid-cell-selected") != -1) { n.removeClass(l); n.removeClass(c) } if (d.className.indexOf("jqx-grid-cell-hover") != -1) { n.removeClass(m); n.removeClass(h) } } } }, _selectpath: function (n, e) { var l = this; var i = this._lastClickedCell ? Math.min(this._lastClickedCell.row, n) : 0; var k = this._lastClickedCell ? Math.max(this._lastClickedCell.row, n) : 0; if (i <= k) { var h = this._getcolumnindex(this._lastClickedCell.column); var g = this._getcolumnindex(e); var f = Math.min(h, g); var d = Math.max(h, g); this.selectedcells = new Array(); var m = this.dataview.loadedrecords; for (var b = i; b <= k; b++) { for (var j = f; j <= d; j++) { var n = m[b]; this._applycellselection(l.getboundindex(n), l._getcolumnat(j).datafield, true, false) } } this._rendervisualrows() } }, _selectrowpath: function (g) { if (this.selectionmode == "multiplerowsextended") { var c = this; var b = this._lastClickedCell ? Math.min(this._lastClickedCell.row, g) : 0; var h = this._lastClickedCell ? Math.max(this._lastClickedCell.row, g) : 0; var f = this.dataview.loadedrecords; if (b <= h) { this.selectedrowindexes = new Array(); for (var e = b; e <= h; e++) { var g = f[e]; var d = this.getrowboundindex(e); this._applyrowselection(d, true, false) } this._rendervisualrows() } } }, _selectrowwithmouse: function (p, b, c, f, d, s) { var j = b.row; if (j == undefined) { return } var k = b.index; if (this.hittestinfo[k] == undefined) { return } var t = this.hittestinfo[k].visualrow; if (this.hittestinfo[k].details) { return } var m = t.cells[0].className; if (j.group) { return } if (this.selectionmode == "multiplerows" || this.selectionmode == "multiplecells" || this.selectionmode == "checkbox" || (this.selectionmode.indexOf("multiple") != -1 && (s == true || d == true))) { var l = this.getboundindex(j); if (this.dataview.filters.length > 0) { var v = this.getrowdata(l); if (v) { l = v.dataindex; if (l == undefined) { var l = this.getboundindex(j) } } } var q = c.indexOf(l) != -1; var w = this.getboundindex(j) + "_" + f; if (this.selectionmode.indexOf("cell") != -1) { var h = this.selectedcells[w] != undefined; if (this.selectedcells[w] != undefined && h) { this._selectcellwithstyle(p, false, k, f, t) } else { this._selectcellwithstyle(p, true, k, f, t) } if (s && this._lastClickedCell == undefined) { var g = this.getselectedcells(); if (g && g.length > 0) { this._lastClickedCell = { row: g[0].rowindex, column: g[0].datafield} } } if (s && this._lastClickedCell) { this._selectpath(j.visibleindex, f); this.mousecaptured = false; if (this.selectionarea.css("visibility") == "visible") { this.selectionarea.css("visibility", "hidden") } } } else { if (q) { if (d) { this._applyrowselection(this.getboundindex(j), false) } else { this._selectrowwithstyle(p, t, false, f) } } else { this._selectrowwithstyle(p, t, true, f) } if (s && this._lastClickedCell == undefined) { var i = this.getselectedrowindexes(); if (i && i.length > 0) { this._lastClickedCell = { row: i[0], column: f} } } if (s && this._lastClickedCell) { this.selectedrowindexes = new Array(); var e = this._lastClickedCell ? Math.min(this._lastClickedCell.row, j.visibleindex) : 0; var u = this._lastClickedCell ? Math.max(this._lastClickedCell.row, j.visibleindex) : 0; var n = this.dataview.loadedrecords; for (var o = e; o <= u; o++) { var j = n[o]; if (j) { this._applyrowselection(this.getboundindex(j), true, false, false) } } this._rendervisualrows() } } } else { this._clearselectstyle(); this._selectrowwithstyle(p, t, true, f); if (this.selectionmode.indexOf("cell") != -1) { this._selectcellwithstyle(p, true, k, f, t) } } if (!s) { this._lastClickedCell = { row: j.visibleindex, column: f} } }, _selectcellwithstyle: function (d, c, g, f, e) { var b = a(e.cells[d._getcolumnindex(f)]); b.removeClass(this.toTP("jqx-grid-cell-hover")); b.removeClass(this.toTP("jqx-fill-state-hover")); if (c) { b.addClass(this.toTP("jqx-grid-cell-selected")); b.addClass(this.toTP("jqx-fill-state-pressed")) } else { b.removeClass(this.toTP("jqx-grid-cell-selected")); b.removeClass(this.toTP("jqx-fill-state-pressed")) } }, _selectrowwithstyle: function (e, h, b, j) { var c = h.cells.length; var f = 0; if (e.rowdetails && e.showrowdetailscolumn) { if (!this.rtl) { f = 1 + this.groups.length } else { c -= 1; c -= this.groups.length } } else { if (this.groupable) { if (!this.rtl) { f = this.groups.length } else { c -= this.groups.length } } } for (var g = f; g < c; g++) { var d = h.cells[g]; if (b) { a(d).removeClass(this.toTP("jqx-grid-cell-hover")); a(d).removeClass(this.toTP("jqx-fill-state-hover")); if (e.selectionmode.indexOf("cell") == -1) { a(d).addClass(this.toTP("jqx-grid-cell-selected")); a(d).addClass(this.toTP("jqx-fill-state-pressed")) } } else { a(d).removeClass(this.toTP("jqx-grid-cell-hover")); a(d).removeClass(this.toTP("jqx-grid-cell-selected")); a(d).removeClass(this.toTP("jqx-fill-state-hover")); a(d).removeClass(this.toTP("jqx-fill-state-pressed")) } } }, _handlemousemoveselection: function (ab, o) { if ((o.selectionmode == "multiplerowsextended" || o.selectionmode == "multiplecellsextended" || o.selectionmode == "multiplecellsadvanced") && o.mousecaptured) { if (o.multipleselectionbegins) { var b = o.multipleselectionbegins(ab); if (b === false) { return true } } var aa = this.showheader ? this.columnsheader.height() + 2 : 0; var I = this._groupsheader() ? this.groupsheader.height() : 0; var K = this.showtoolbar ? this.toolbarheight : 0; I += K; var Z = this.host.coord(); if (this.hasTransform) { Z = a.jqx.utilities.getOffset(this.host); var ad = this._getBodyOffset(); Z.left -= ad.left; Z.top -= ad.top } var M = ab.pageX; var L = ab.pageY - I; if (Math.abs(this.mousecaptureposition.left - M) > 3 || Math.abs(this.mousecaptureposition.top - L) > 3) { var f = parseInt(this.columnsheader.coord().top); if (this.hasTransform) { f = a.jqx.utilities.getOffset(this.columnsheader).top } if (M < Z.left) { M = Z.left } if (M > Z.left + this.host.width()) { M = Z.left + this.host.width() } var X = Z.top + aa; if (L < X) { L = X + 5 } var J = parseInt(Math.min(o.mousecaptureposition.left, M)); var g = -5 + parseInt(Math.min(o.mousecaptureposition.top, L)); var H = parseInt(Math.abs(o.mousecaptureposition.left - M)); var P = parseInt(Math.abs(o.mousecaptureposition.top - L)); J -= Z.left; g -= Z.top; this.selectionarea.css("visibility", "visible"); if (o.selectionmode == "multiplecellsadvanced") { var M = J; var t = M + H; var G = M; var n = o.hScrollInstance; var v = n.value; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { v = n.max - n.value } if (this.vScrollBar[0].style.visibility != "hidden") { } } var h = o.table[0].rows[0]; var T = 0; var B = o.mousecaptureposition.clickedcell; var A = B; var m = false; var r = 0; var ac = h.cells.length; if (o.mousecaptureposition.left <= ab.pageX) { r = B } for (var W = r; W < ac; W++) { var Y = parseInt(a(this.columnsrow[0].cells[W]).css("left")); var j = Y - v; if (o.columns.records[W].pinned) { j = Y; continue } var O = this._getcolumnat(W); if (O != null && O.hidden) { continue } if (o.groupable && o.groups.length > 0) { if (W < o.groups.length) { continue } } var S = j + a(this.columnsrow[0].cells[W]).width(); if (o.mousecaptureposition.left > ab.pageX) { if (S >= M && M >= j) { A = W; m = true; break } } else { if (S >= t && t >= j) { A = W; m = true; break } } } if (!m) { if (o.mousecaptureposition.left > ab.pageX) { a.each(this.columns.records, function (i, k) { if (o.groupable && o.groups.length > 0) { if (i < o.groups.length) { return true } } if (!this.pinned && !this.hidden) { A = i; return false } }) } else { if (!o.groupable || (o.groupable && !o.groups.length > 0)) { A = h.cells.length - 1 } } } var N = B; B = Math.min(B, A); A = Math.max(N, A); g += 5; g += I; var R = o.table[0].rows.indexOf(o.mousecaptureposition.clickedrow); var w = 0; var e = -1; var u = -1; var d = 0; for (var W = 0; W < o.table[0].rows.length; W++) { var s = a(o.table[0].rows[W]); if (W == 0) { d = s.coord().top } var F = s.height(); var z = d - Z.top; if (e == -1 && z + F >= g) { var c = false; for (var Q = 0; Q < o.groups.length; Q++) { var V = s[0].cells[Q].className; if (V.indexOf("jqx-grid-group-collapse") != -1 || V.indexOf("jqx-grid-group-expand") != -1) { c = true; break } } if (c) { continue } e = W } d += F; if (o.groupable && o.groups.length > 0) { var c = false; for (var Q = 0; Q < o.groups.length; Q++) { var V = s[0].cells[Q].className; if (V.indexOf("jqx-grid-group-collapse") != -1 || V.indexOf("jqx-grid-group-expand") != -1) { c = true; break } } if (c) { continue } var T = 0; for (var U = o.groups.length; U < s[0].cells.length; U++) { var E = s[0].cells[U]; if (a(E).html() == "") { T++ } } if (T == s[0].cells.length - o.groups.length) { continue } } if (e != -1) { w += F } if (z + F > g + P) { u = W; break } } if (e != -1) { g = a(o.table[0].rows[e]).coord().top - Z.top - I - 2; var D = 0; if (this.filterable && this.showfilterrow) { D = this.filterrowheight } if (parseInt(o.table[0].style.top) < 0 && g < this.rowsheight + D) { g -= parseInt(o.table[0].style.top); w += parseInt(o.table[0].style.top) } P = w; var l = a(this.columnsrow[0].cells[B]); var C = a(this.columnsrow[0].cells[A]); J = parseInt(l.css("left")); H = parseInt(C.css("left")) - parseInt(J) + C.width() - 2; J -= v; if (o.editcell && o.editable && o.endcelledit && (B != A || e != u)) { if (o.editcell.validated == false) { return } o.endcelledit(o.editcell.row, o.editcell.column, true, true) } } } this.selectionarea.width(H); this.selectionarea.height(P); this.selectionarea.css("left", J); this.selectionarea.css("top", g) } } }, _handlemouseupselection: function (u, o) { if (!this.selectionarea) { return } if (this.selectionarea.css("visibility") != "visible") { o.mousecaptured = false; return true } if (o.mousecaptured && (o.selectionmode == "multiplerowsextended" || o.selectionmode == "multiplerowsadvanced" || o.selectionmode == "multiplecellsextended" || o.selectionmode == "multiplecellsadvanced")) { o.mousecaptured = false; if (this.selectionarea.css("visibility") == "visible") { this.selectionarea.css("visibility", "hidden"); var w = this.showheader ? this.columnsheader.height() + 2 : 0; var p = this._groupsheader() ? this.groupsheader.height() : 0; var B = this.showtoolbar ? this.toolbarheight : 0; p += B; var C = this.selectionarea.coord(); var c = this.host.coord(); if (this.hasTransform) { c = a.jqx.utilities.getOffset(this.host); C = a.jqx.utilities.getOffset(this.selectionarea) } var n = C.left - c.left; var k = C.top - w - c.top - p; var s = k; var g = n + this.selectionarea.width(); var D = n; var l = new Array(); var e = new Array(); if (o.selectionmode == "multiplerowsextended") { while (k < s + this.selectionarea.height()) { var b = this._hittestrow(n, k); var f = b.row; var h = b.index; if (h != -1) { if (!e[h]) { e[h] = true; l[l.length] = b } } k += 20 } var s = 0; a.each(l, function () { var i = this; var m = this.row; if (o.selectionmode != "none" && o._selectrowwithmouse) { if (u.ctrlKey) { o._applyrowselection(o.getboundindex(m), true, false, false) } else { if (s == 0) { o._applyrowselection(o.getboundindex(m), true, false, true) } else { o._applyrowselection(o.getboundindex(m), true, false, false) } } s++ } }) } else { if (o.selectionmode == "multiplecellsadvanced") { k += 2 } var r = o.hScrollInstance; var t = r.value; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { t = r.max - r.value } if (this.vScrollBar[0].style.visibility != "hidden") { t -= this.scrollbarsize + 4 } } var q = o.table[0].rows[0]; var j = o.selectionarea.height(); if (!u.ctrlKey && j > 0) { o.selectedcells = new Array() } var A = j; while (k < s + A) { var b = o._hittestrow(n, k); if (!b) { k += 5; continue } var f = b.row; var h = b.index; if (h != -1) { if (!e[h]) { e[h] = true; for (var v = 0; v < q.cells.length; v++) { var d = parseInt(a(o.columnsrow[0].cells[v]).css("left")) - t; var z = d + a(o.columnsrow[0].cells[v]).width(); if ((D >= d && D <= z) || (g >= d && g <= z) || (d >= D && d <= g)) { o._applycellselection(o.getboundindex(f), o._getcolumnat(v).datafield, true, false) } } } } k += 5 } } if (o.autosavestate) { if (o.savestate) { o.savestate() } } o._renderrows(o.virtualsizeinfo) } } }, selectprevcell: function (e, c) { var f = this._getcolumnindex(c); var b = this.columns.records.length; var d = this._getprevvisiblecolumn(f); if (d != null) { this.clearselection(); this.selectcell(e, d.datafield) } }, selectnextcell: function (e, d) { var f = this._getcolumnindex(d); var c = this.columns.records.length; var b = this._getnextvisiblecolumn(f); if (b != null) { this.clearselection(); this.selectcell(e, b.datafield) } }, _getfirstvisiblecolumn: function () { var b = this; var e = this.columns.records.length; for (var c = 0; c < e; c++) { var d = this.columns.records[c]; if (!d.hidden && d.datafield != null) { return d } } return null }, _getlastvisiblecolumn: function () { var b = this; var e = this.columns.records.length; for (var c = e - 1; c >= 0; c--) { var d = this.columns.records[c]; if (!d.hidden && d.datafield != null) { return d } } return null }, _handlekeydown: function (x, q) { if (q.groupable && q.groups.length > 0) { return true } if (q.disabled) { return false } var D = x.charCode ? x.charCode : x.keyCode ? x.keyCode : 0; if (q.editcell && q.selectionmode != "multiplecellsadvanced") { return true } else { if (q.editcell && q.selectionmode == "multiplecellsadvanced") { if (D >= 33 && D <= 40) { if (!x.altKey) { if (q._cancelkeydown == undefined || q._cancelkeydown == false) { if (q.editmode !== "selectedrow") { q.endcelledit(q.editcell.row, q.editcell.column, false, true); q._cancelkeydown = false; if (q.editcell && !q.editcell.validated) { q._rendervisualrows(); q.endcelledit(q.editcell.row, q.editcell.column, false, true); return false } } else { return true } } else { q._cancelkeydown = false; return true } } else { q._cancelkeydown = false; return true } } else { return true } } } if (q.selectionmode == "none") { return true } if (q.showfilterrow && q.filterable) { if (this.filterrow) { if (a(x.target).ischildof(this.filterrow)) { return true } } } if (q.pageable) { if (a(x.target).ischildof(this.pager)) { return true } } if (this.showtoolbar) { if (a(x.target).ischildof(this.toolbar)) { return true } } if (this.showstatusbar) { if (a(x.target).ischildof(this.statusbar)) { return true } } var p = false; if (x.altKey) { return true } if (x.ctrlKey) { if (this.clipboard) { var b = String.fromCharCode(D).toLowerCase(); if (b == "c" || b == "x") { var o = this.copyselection(); if (window.clipboardData) { window.clipboardData.setData("Text", o) } else { var g = a('<textarea style="position: absolute; left: -1000px; top: -1000px;"/>'); g.val(o); a("body").append(g); g.select(); setTimeout(function () { document.designMode = "off"; g.select(); g.remove(); q.focus() }, 100) } } else { if (b == "v") { var C = a('<textarea style="position: absolute; left: -1000px; top: -1000px;"/>'); a("body").append(C); C.select(); var j = this; setTimeout(function () { j._clipboardselection = new Array(); var I = C.val(); var H = I.split("\n"); for (var G = 0; G < H.length; G++) { if (H[G].split("\t").length > 0) { var F = H[G].split("\t"); if (F.length == 1 && G == H.length - 1 && F[0] == "") { continue } if (F.length > 0) { j._clipboardselection.push(F) } } } j.pasteselection(); C.remove(); j.focus() }, 100) } } if (b == "x") { this.deleteselection(); this.host.focus() } } } var l = Math.round(q._gettableheight()); var v = Math.round(l / q.rowsheight); var f = q.getdatainformation(); switch (q.selectionmode) { case "singlecell": case "multiplecells": case "multiplecellsextended": case "multiplecellsadvanced": var E = q.getselectedcell(); if (E != null) { var e = this.getrowvisibleindex(E.rowindex); var i = e; var n = E.datafield; var t = q._getcolumnindex(n); var c = q.columns.records.length; var s = function (K, G, J) { var F = function (O, L) { var N = q.dataview.loadedrecords[O]; if (N != undefined && L != null) { if (J || J == undefined) { q.clearselection() } var M = q.getboundindex(N); q.selectcell(M, L); q._oldselectedcell = q.selectedcell; p = true; q.ensurecellvisible(O, L); return true } return false }; if (!F(K, G)) { q.ensurecellvisible(K, G); F(K, G); if (q.virtualmode) { q.host.focus() } } if (x.shiftKey && D != 9) { if (q.selectionmode == "multiplecellsextended" || q.selectionmode == "multiplecellsadvanced") { if (q._lastClickedCell) { q._selectpath(K, G); var I = q.dataview.loadedrecords[K]; var H = q.getboundindex(I); q.selectedcell = { rowindex: H, datafield: G }; return } } } else { if (!x.shiftKey) { q._lastClickedCell = { row: K, column: G} } } }; var y = x.shiftKey && q.selectionmode != "singlecell" && q.selectionmode != "multiplecells"; var z = function () { s(0, n, !y) }; var h = function () { var F = f.rowscount - 1; s(F, n, !y) }; var d = D == 9 && !x.shiftKey; var k = D == 9 && x.shiftKey; if (d || k) { y = false } var m = x.ctrlKey; if (m && D == 37) { var B = q._getfirstvisiblecolumn(t); if (B != null) { s(i, B.datafield) } } else { if (m && D == 39) { var r = q._getlastvisiblecolumn(t); if (r != null) { s(i, r.datafield) } } else { if (D == 39 || d) { var u = q._getnextvisiblecolumn(t); if (u != null) { s(i, u.datafield, !y) } else { if (!d) { p = true } } } else { if (D == 37 || k) { var B = q._getprevvisiblecolumn(t); if (B != null) { s(i, B.datafield, !y) } else { if (!k) { p = true } } } else { if (D == 36) { z() } else { if (D == 35) { h() } else { if (D == 33) { if (i - v >= 0) { var A = i - v; s(A, n, !y) } else { z() } } else { if (D == 34) { if (f.rowscount > i + v) { var A = i + v; s(A, n, !y) } else { h() } } else { if (D == 38) { if (m) { z() } else { if (i > 0) { s(i - 1, n, !y) } else { p = true } } } else { if (D == 40) { if (m) { h() } else { if (f.rowscount > i + 1) { s(i + 1, n, !y) } else { p = true } } } } } } } } } } } } } break; case "singlerow": case "multiplerows": case "multiplerowsextended": case "multiplerowsadvanced": var i = q.getselectedrowindex(); if (i == null || i == -1) { return true } i = this.getrowvisibleindex(i); var w = function (G, H) { var F = function (K) { var M = q.dataview.loadedrecords[K]; if (M != undefined) { var L = q.getboundindex(M); var J = q.selectedrowindex; if (H || H == undefined) { q.clearselection() } q.selectedrowindex = J; q.selectrow(L, false); var I = q.ensurerowvisible(K); if (!I || q.autoheight || q.groupable) { q._rendervisualrows() } p = true; return true } return false }; if (!F(G)) { q.ensurerowvisible(G); F(G, H); if (q.virtualmode) { setTimeout(function () { F(G, H) }, 25) } if (q.virtualmode) { q.host.focus() } } if (x.shiftKey && D != 9) { if (q.selectionmode == "multiplerowsextended") { if (q._lastClickedCell) { q._selectrowpath(G); q.selectedrowindex = q.getrowboundindex(G); return } } } else { if (!x.shiftKey) { q._lastClickedCell = { row: G }; q.selectedrowindex = q.getrowboundindex(G) } } }; var y = x.shiftKey && q.selectionmode != "singlerow" && q.selectionmode != "multiplerows"; var z = function () { w(0, !y) }; var h = function () { var F = f.rowscount - 1; w(F, !y) }; var m = x.ctrlKey; if (D == 36 || (m && D == 38)) { z() } else { if (D == 35 || (m && D == 40)) { h() } else { if (D == 33) { if (i - v >= 0) { var A = i - v; w(A, !y) } else { z() } } else { if (D == 34) { if (f.rowscount > i + v) { var A = i + v; w(A, !y) } else { h() } } else { if (D == 38) { if (i > 0) { w(i - 1, !y) } else { p = true } } else { if (D == 40) { if (f.rowscount > i + 1) { w(i + 1, !y) } else { p = true } } } } } } } break } if (p) { if (q.autosavestate) { if (q.savestate) { q.savestate() } } return false } return true }, _handlemousemove: function (u, p) { if (p.vScrollInstance.isScrolling()) { return } if (p.hScrollInstance.isScrolling()) { return } var w; var q; var f; var n; var m; if (p.enablehover || p.selectionmode == "multiplerows") { w = this.showheader ? this.columnsheader.height() + 2 : 0; q = this._groupsheader() ? this.groupsheader.height() : 0; var A = this.showtoolbar ? this.toolbarheight : 0; q += A; f = this.host.coord(); if (this.hasTransform) { f = a.jqx.utilities.getOffset(this.host); var k = this._getBodyOffset(); f.left -= k.left; f.top -= k.top } n = u.pageX - f.left; m = u.pageY - w - f.top - q } if (p.selectionmode == "multiplerowsextended" || p.selectionmode == "multiplecellsextended" || p.selectionmode == "multiplecellsadvanced") { if (p.mousecaptured == true) { return } } if (p.enablehover) { if (p.disabled) { return } if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) { return } var c = this._hittestrow(n, m); if (!c) { return } var h = c.row; var j = c.index; if (this.hoveredrow != -1 && j != -1 && this.hoveredrow == j && this.selectionmode.indexOf("cell") == -1 && this.selectionmode != "checkbox") { return } this._clearhoverstyle(); if (j == -1 || h == undefined) { return } var r = this.hittestinfo[j].visualrow; if (r == null) { return } if (this.hittestinfo[j].details) { return } if (u.clientX > a(r).width() + a(r).coord().left) { return } var B = 0; var o = r.cells.length; if (p.rowdetails && p.showrowdetailscolumn) { if (!this.rtl) { B = 1 + this.groups.length } else { o -= 1; o -= this.groups.length } } else { if (this.groupable) { if (!this.rtl) { B = this.groups.length } else { o -= this.groups.length } } } if (r.cells.length == 0) { return } var l = r.cells[B].className; if (h.group || (this.selectionmode.indexOf("row") >= 0 && l.indexOf("jqx-grid-cell-selected") != -1)) { return } this.hoveredrow = j; if (this.selectionmode.indexOf("cell") != -1 || this.selectionmode == "checkbox") { var e = -1; var s = this.hScrollInstance; var t = s.value; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { t = s.max - s.value } } for (var v = B; v < o; v++) { var g = parseInt(a(this.columnsrow[0].cells[v]).css("left")) - t; var z = g + a(this.columnsrow[0].cells[v]).width(); if (z >= n && n >= g) { e = v; break } } if (e != -1) { var b = r.cells[e]; if (b.className.indexOf("jqx-grid-cell-selected") == -1) { if (this.editcell) { var d = this._getcolumnat(e); if (d) { if (this.editcell.row == j && this.editcell.column == d.datafield) { return } } } a(b).addClass(this.toTP("jqx-grid-cell-hover")); a(b).addClass(this.toTP("jqx-fill-state-hover")); if (this.cellhover) { this.cellhover(b, u.pageX, u.pageY) } } } return } for (var v = B; v < o; v++) { var b = r.cells[v]; a(b).addClass(this.toTP("jqx-grid-cell-hover")); a(b).addClass(this.toTP("jqx-fill-state-hover")); if (this.cellhover) { this.cellhover(b, u.pageX, u.pageY) } } } else { return true } } }) })(jQuery);

(function (a) { a.extend(a.jqx._jqxGrid.prototype, { _updatefilterrowui: function (f) { var m = this.columns.records.length; var e = 0; var l = this; for (var i = 0; i < m; i++) { var g = this.columns.records[i]; var c = g.width; if (c < g.minwidth) { c = g.minwidth } if (c > g.maxwidth) { c = g.maxwidth } var k = a(this.filterrow[0].cells[i]); k.css("left", e); var h = true; if (k.width() == c) { h = false } if (f) { h = true } k.width(c); k[0].left = e; if (!(g.hidden && g.hideable)) { e += c } else { k.css("display", "none") } if (!h) { continue } if (g.createfilterwidget && g.filtertype == "custom") { g.createfilterwidget(g, k) } else { if (g.filterable) { var d = function (n, o) { var j = a(o.children()[0]); j.width(c - 10); j.attr("disabled", n.disabled) }; switch (g.filtertype) { case "number": a(k.children()[0]).width(c); k.find("input").width(c - 30); k.find("input").attr("disabled", l.disabled); a(k.find(".jqx-dropdownlist-state-normal")).jqxDropDownList({ disabled: l.disabled }); break; case "date": if (this.host.jqxDateTimeInput) { a(k.children()[0]).jqxDateTimeInput({ disabled: l.disabled, width: c - 10 }) } else { d(this, k) } break; case "textbox": case "default": d(this, k); break; case "list": case "checkedlist": if (this.host.jqxDropDownList) { a(k.children()[0]).jqxDropDownList({ disabled: l.disabled, width: c - 10 }) } else { d(this, k) } break; case "bool": case "boolean": if (!this.host.jqxCheckBox) { d(this, k) } else { a(k.children()[0]).jqxCheckBox({ disabled: l.disabled }) } break } } } } var b = a(this.filterrow.children()[0]); b.width(parseInt(e) + 2); b.height(this.filterrowheight) }, clearfilterrow: function (e) { this._disablefilterrow = true; if (!this.columns.records) { return } var b = this.columns.records.length; var g = 0; for (var d = 0; d < b; d++) { var c = this.columns.records[d]; var h = a(this.filterrow[0].cells[d]); if (typeof e == "string") { if (c.displayfield != e) { continue } } if (c.filterable) { var f = function (j, k) { var i = a(k.children()[0]); i.val(""); if (i[0]) { j["_oldWriteText" + i[0].id] = "" } }; switch (c.filtertype) { case "number": h.find("input").val(""); break; case "date": if (this.host.jqxDateTimeInput) { a(h.children()[0]).jqxDateTimeInput("setDate", null) } else { f(this, h) } break; case "textbox": case "default": f(this, h); break; case "list": if (this.host.jqxDropDownList) { a(h.children()[0]).jqxDropDownList("clearSelection") } else { f(this, h) } break; case "checkedlist": if (this.host.jqxDropDownList) { a(h.children()[0]).jqxDropDownList("checkAll", false) } else { f(this, h) } break; case "bool": case "boolean": if (!this.host.jqxCheckBox) { f(this, h) } else { a(h.children()[0]).jqxCheckBox({ checked: null }) } break } } } this._disablefilterrow = false }, _applyfilterfromfilterrow: function () { if (this._disablefilterrow == true) { return } if (this.disabled) { return } var z = this.columns.records.length; var C = this.that; for (var t = 0; t < z; t++) { var k = new a.jqx.filter(); var u = this.columns.records[t]; if (!u.filterable) { continue } if (u.datafield === null) { continue } var f = C._getcolumntypebydatafield(u); var d = C._getfiltertype(f); var l = 1; var D = true; var e = u.filtertype; var A = function (j, K, H) { var i = true; if (j._filterwidget) { var F = j._filterwidget.val(); if (F != "") { var I = "equal"; if (K == "stringfilter") { var I = "contains" } if (K == "numericfilter") { if (C.gridlocalization.decimalseparator == ",") { if (F.indexOf(C.gridlocalization.decimalseparator) >= 0) { F = F.replace(C.gridlocalization.decimalseparator, ".") } } } if (K != "stringfilter") { var J = 0; if (F.indexOf(">") != -1) { I = "greater_than"; J = 1 } if (F.indexOf("<") != -1) { I = "less_than"; J = 1 } if (F.indexOf("=") != -1) { if (I == "greater_than") { I = "greater_than_or_equal"; J = 2 } else { if (I == "less_than") { I = "less_than_or_equal"; J = 2 } else { I = "equal"; J = 1 } } } if (J != 0) { F = F.substring(J); if (F.length < 1) { return false } } } if (j.filtercondition != undefined) { I = j.filtercondition } if (K == "datefilter") { var G = H.createfilter(K, F, I, null, j.cellsformat, C.gridlocalization) } else { var G = H.createfilter(K, F, I) } H.addfilter(l, G) } else { i = false } } return i }; switch (u.filtertype) { case "date": if (u._filterwidget.jqxDateTimeInput) { var p = u._filterwidget.jqxDateTimeInput("getRange"); if (p != null && p.from != null && p.to != null) { var o = "GREATER_THAN_OR_EQUAL"; var r = new Date(0); r.setHours(0); r.setFullYear(p.from.getFullYear(), p.from.getMonth(), p.from.getDate()); var q = new Date(0); q.setHours(0); q.setFullYear(p.to.getFullYear(), p.to.getMonth(), p.to.getDate()); q.setHours(p.to.getHours()); q.setMinutes(p.to.getMinutes()); q.setSeconds(p.to.getSeconds()); var y = k.createfilter(d, r, o); k.addfilter(0, y); var c = "LESS_THAN_OR_EQUAL"; var x = k.createfilter(d, q, c); k.addfilter(0, x) } else { D = false } } else { D = A(u, d, k) } break; case "number": if (u._filterwidget) { var p = u._filterwidget.find("input").val(); if (C.gridlocalization.decimalseparator == ",") { if (p.indexOf(C.gridlocalization.decimalseparator) >= 0) { p = p.replace(C.gridlocalization.decimalseparator, ".") } } var h = u._filterwidget.find(".filter").jqxDropDownList("selectedIndex"); var w = k.getoperatorsbyfiltertype(d)[h]; if (C.updatefilterconditions) { var E = C.updatefilterconditions(d, k.getoperatorsbyfiltertype(d)); if (E != undefined) { k.setoperatorsbyfiltertype(d, E) } var w = k.getoperatorsbyfiltertype(d)[h] } var n = w == "NULL" || w == "NOT_NULL"; var s = w == "EMPTY" || w == "NOT_EMPTY"; if (p != undefined && p.length > 0 || n || s) { y = k.createfilter(d, new Number(p), w, null, u.cellsformat, C.gridlocalization); k.addfilter(0, y) } else { D = false } } else { D = false } break; case "textbox": case "default": D = A(u, d, k); break; case "bool": case "boolean": if (u._filterwidget.jqxCheckBox) { var p = u._filterwidget.jqxCheckBox("checked"); if (p != null) { var o = "equal"; var m = k.createfilter(d, p, o); k.addfilter(l, m) } else { D = false } } else { D = A(u, d, k) } break; case "list": var g = u._filterwidget.jqxDropDownList("listBox"); if (g.selectedIndex > 0) { var b = g.getItem(g.selectedIndex); var p = b.label; var o = "equal"; if (p === "") { o = "NULL" } var m = k.createfilter(d, p, o); k.addfilter(l, m) } else { D = false } break; case "checkedlist": if (u._filterwidget.jqxDropDownList) { var g = u._filterwidget.jqxDropDownList("listBox"); var B = g.getCheckedItems(); if (B.length == 0) { for (var v = 1; v < g.items.length; v++) { var p = g.items[v].label; var o = "not_equal"; if (p === "") { o = "NULL" } var m = k.createfilter(d, p, o); k.addfilter(0, m) } D = true } else { if (B.length != g.items.length) { for (var v = 0; v < B.length; v++) { var p = B[v].label; var o = "equal"; if (p === "") { o = "NULL" } var m = k.createfilter(d, p, o); k.addfilter(l, m) } } else { D = false } } } else { D = A(u, d, k) } break } if (!this._loading) { if (D) { this.addfilter(u.displayfield, k, false) } else { this.removefilter(u.displayfield, false) } } } if (!this._loading) { this.applyfilters("filterrow") } }, _updatefilterrow: function () { var b = a('<div style="position: relative;" id="row00' + this.element.id + '"></div>'); var f = 0; var o = this.columns.records.length; var m = this.toThemeProperty("jqx-grid-cell"); m += " " + this.toThemeProperty("jqx-grid-cell-pinned"); m += " " + this.toThemeProperty("jqx-grid-cell-filter-row"); var q = o + 10; var r = new Array(); var n = this.that; this.filterrow[0].cells = r; b.height(this.filterrowheight); this.filterrow.children().detach(); this.filterrow.append(b); if (!this._filterrowcache) { this._filterrowcache = new Array() } this._initcolumntypes(); var g = false; var d = new Array(); for (var h = 0; h < o; h++) { var e = this.columns.records[h]; var c = e.width; if (c < e.minwidth) { c = e.minwidth } if (c > e.maxwidth) { c = e.maxwidth } var l = a('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + m + '"></div>'); b.append(l); l.css("left", f); if (this.rtl) { l.css("z-index", q++); l.css("border-left-width", "1px") } else { l.css("z-index", q--) } l[0].style.width = parseFloat(c) + "px"; l[0].left = f; if (!(e.hidden && e.hideable)) { f += c } else { l.css("display", "none") } r[r.length] = l[0]; var k = true; if (!this.rtl) { if (this.groupable) { var p = (this.showrowdetailscolumn && this.rowdetails) ? 1 : 0; if (this.groups.length + p > h) { k = false } } if (this.showrowdetailscolumn && this.rowdetails && h == 0) { k = false } } else { if (this.groupable) { var p = (this.showrowdetailscolumn && this.rowdetails) ? 1 : 0; if (this.groups.length + p + h > o - 1) { k = false } } if (this.showrowdetailscolumn && this.rowdetails && h == o - 1) { k = false } } if (k) { if (e.filtertype == "custom" && e.createfilterwidget) { var i = function () { n._applyfilterfromfilterrow() }; e.createfilterwidget(e, l, i) } else { if (e.filterable) { if (this._filterrowcache[e.datafield]) { g = true; l.append(this._filterrowcache[e.datafield]); e._filterwidget = this._filterrowcache[e.datafield] } else { this._addfilterwidget(e, l, c); d[e.datafield] = e._filterwidget } } } } } this._filterrowcache = d; if (a.jqx.browser.msie && a.jqx.browser.version < 8) { b.css("z-index", q--) } b.width(parseFloat(f) + 2); this.filterrow.addClass(m); this.filterrow.css("border-top-width", "1px"); this.filterrow.css("border-right-width", "0px"); if (g) { this._updatefilterrowui(true) } }, _addfilterwidget: function (B, d, z) { var F = this.that; var y = ""; for (var D = 0; D < F.dataview.filters.length; D++) { var w = F.dataview.filters[D]; if (w.datafield && w.datafield == B.datafield) { y = w.filter.getfilters()[0].value; break } } var g = function (G, H) { var f = a('<input autocomplete="off" type="textarea"/>'); f[0].id = a.jqx.utilities.createId(); f.addClass(G.toThemeProperty("jqx-widget")); f.addClass(G.toThemeProperty("jqx-input")); f.addClass(G.toThemeProperty("jqx-rc-all")); f.addClass(G.toThemeProperty("jqx-widget-content")); if (G.rtl) { f.css("direction", "rtl") } if (G.disabled) { f.attr("disabled", true) } f.attr("disabled", false); f.appendTo(H); f.width(z - 10); f.height(G.filterrowheight - 10); f.css("margin", "4px"); if (B.createfilterwidget) { B.createfilterwidget(B, H, f) } B._filterwidget = f; f.focus(function () { G.content[0].scrollLeft = 0; setTimeout(function () { G.content[0].scrollLeft = 0 }, 10); G.focusedfilter = f; f.addClass(G.toThemeProperty("jqx-fill-state-focus")); return false }); f.blur(function () { f.removeClass(G.toThemeProperty("jqx-fill-state-focus")) }); f.keydown(function (I) { if (I.keyCode == "13") { G._applyfilterfromfilterrow() } if (f[0]._writeTimer) { clearTimeout(f[0]._writeTimer) } f[0]._writeTimer = setTimeout(function () { if (!G._loading) { if (G["_oldWriteText" + f[0].id] != f.val()) { G._applyfilterfromfilterrow(); G["_oldWriteText" + f[0].id] = f.val() } } }, 800); G.focusedfilter = f }); G.host.removeClass("jqx-disableselect"); G.content.removeClass("jqx-disableselect"); f.val(y) }; if (B.datatype != null) { if (B.filtertype == "number") { if (B.datatype == "string" || B.datatype == "date" || B.datatype == "bool") { B.filtertype = "textbox" } } if (B.filtertype == "date") { if (B.datatype == "string" || B.datatype == "number" || B.datatype == "bool") { B.filtertype = "textbox" } } if (B.filtertype == "bool") { if (B.datatype == "string" || B.datatype == "number" || B.datatype == "date") { B.filtertype = "textbox" } } } switch (B.filtertype) { case "number": var m = a("<div></div>"); m.width(d.width()); m.height(this.filterrowheight); d.append(m); var z = d.width() - 20; var r = function (H, I, f) { var G = a('<input style="float: left;" autocomplete="off" type="textarea"/>'); if (F.rtl) { G.css("float", "right"); G.css("direction", "rtl") } G[0].id = a.jqx.utilities.createId(); G.addClass(F.toThemeProperty("jqx-widget")); G.addClass(F.toThemeProperty("jqx-input")); G.addClass(F.toThemeProperty("jqx-rc-all")); G.addClass(F.toThemeProperty("jqx-widget-content")); G.appendTo(H); G.width(I - 10); if (F.disabled) { G.attr("disabled", true) } G.attr("disabled", false); G.height(F.filterrowheight - 10); G.css("margin", "4px"); G.css("margin-right", "2px"); G.focus(function () { F.focusedfilter = G; G.addClass(F.toThemeProperty("jqx-fill-state-focus")) }); G.blur(function () { G.removeClass(F.toThemeProperty("jqx-fill-state-focus")) }); G.keydown(function (J) { if (J.keyCode == "13") { F._applyfilterfromfilterrow() } if (G[0]._writeTimer) { clearTimeout(G[0]._writeTimer) } G[0]._writeTimer = setTimeout(function () { if (!F._loading) { if (F["_oldWriteText" + G[0].id] != G.val()) { F._applyfilterfromfilterrow(); F["_oldWriteText" + G[0].id] = G.val() } } }, 800); F.focusedfilter = G }); G.val(y); return G }; r(m, z); var A = F._getfiltersbytype("number"); var s = a("<div class='filter' style='float: left;'></div>"); s.css("margin-top", "4px"); s.appendTo(m); if (F.rtl) { s.css("float", "right") } var h = 0; if (B.filtercondition != null) { var e = A.indexOf(B.filtercondition); if (e != -1) { h = e } } s.jqxDropDownList({ disabled: F.disabled, touchMode: F.touchmode, rtl: F.rtl, dropDownHorizontalAlignment: "right", enableBrowserBoundsDetection: true, selectedIndex: h, width: 18, height: 21, dropDownHeight: 150, dropDownWidth: 170, source: A, theme: F.theme }); s.jqxDropDownList({ selectionRenderer: function (f) { return "" } }); s.jqxDropDownList("setContent", ""); s.find(".jqx-dropdownlist-content").hide(); if (B.createfilterwidget) { B.createfilterwidget(B, d, m) } B._filterwidget = m; var j = null; this.addHandler(s, "select", function () { var f = s.jqxDropDownList("getSelectedItem").label; if (B._filterwidget.find("input").val().length > 0 && !F.refreshingfilter) { F._applyfilterfromfilterrow() } else { if (B._filterwidget.find("input").val().length == 0 && !F.refreshingfilter) { if (j == "null" || j == "not null" || f == "null" || f == "not null") { F._applyfilterfromfilterrow() } } } j = f }); break; case "textbox": case "default": default: g(this, d); break; case "none": break; case "date": if (this.host.jqxDateTimeInput) { var b = a("<div></div>"); b.css("margin", "4px"); b.appendTo(d); var n = { calendar: this.gridlocalization, todayString: this.gridlocalization.todaystring, clearString: this.gridlocalization.clearstring }; b.jqxDateTimeInput({ disabled: F.disabled, localization: n, rtl: F.rtl, showFooter: true, formatString: B.cellsformat, selectionMode: "range", value: null, theme: this.theme, width: z - 10, height: this.filterrowheight - 10 }); if (B.createfilterwidget) { B.createfilterwidget(B, d, b) } B._filterwidget = b; this.addHandler(b, "valuechanged", function (f) { if (!F.refreshingfilter) { F._applyfilterfromfilterrow(); F.focusedfilter = null } }) } else { g(this, d) } break; case "list": case "checkedlist": if (this.host.jqxDropDownList) { var q = this._getfilterdataadapter(B); var l = false; var s = a("<div></div>"); s.css("margin", "4px"); var t = B.datafield; var u = B.filtertype == "checkedlist" ? true : false; var C = z < 150 ? 220 : "auto"; q.dataBind(); var p = q.records; var k = p.length < 8 ? true : false; l = k; s.appendTo(d); s.jqxDropDownList({ disabled: F.disabled, touchMode: F.touchmode, rtl: F.rtl, checkboxes: u, dropDownWidth: C, source: q.records, autoDropDownHeight: k, theme: this.theme, width: z - 10, height: this.filterrowheight - 10, displayMember: B.displayfield, valueMember: t }); var c = s.jqxDropDownList("listBox"); if (u) { s.jqxDropDownList({ selectionRenderer: function () { var f = '<span class="' + F.toThemeProperty("jqx-item") + '" style="top: 2px; position: relative; color: inherit; border: none; background-color: transparent;">' + F.gridlocalization.filterselectstring + "</span>"; return f } }); var x = a('<span style="top: 2px; position: relative; color: inherit; border: none; background-color: transparent;">' + F.gridlocalization.filterselectstring + "</span>"); x.addClass(this.toThemeProperty("jqx-item")); if (c != undefined) { if (!l) { c.host.height(200) } c.insertAt(F.gridlocalization.filterselectallstring, 0); s.jqxDropDownList("setContent", x); var i = true; var E = new Array(); c.checkAll(false); F.addHandler(c.host, "checkChange", function (H) { s[0]._selectionChanged = true; if (!i) { return } if (H.args.label != F.gridlocalization.filterselectallstring) { i = false; c.host.jqxListBox("checkIndex", 0, true, false); var f = c.host.jqxListBox("getCheckedItems"); var G = c.host.jqxListBox("getItems"); if (f.length == 1) { c.host.jqxListBox("uncheckIndex", 0, true, false) } else { if (G.length != f.length) { c.host.jqxListBox("indeterminateIndex", 0, true, false) } } i = true } else { i = false; if (H.args.checked) { c.host.jqxListBox("checkAll", false) } else { c.host.jqxListBox("uncheckAll", false) } i = true } }) } } else { c.insertAt({ label: this.gridlocalization.filterchoosestring, value: "" }, 0); s.jqxDropDownList({ selectedIndex: 0 }) } if (B.createfilterwidget) { B.createfilterwidget(B, d, s) } B._filterwidget = s; var o = s.jqxDropDownList("dropdownlistWrapper"); if (B.filtertype == "list") { this.addHandler(s, "select", function (f) { if (!F.refreshingfilter) { if (f.args && f.args.type != "none") { F._applyfilterfromfilterrow(); F.focusedfilter = null } } }) } else { this.addHandler(s, "close", function (f) { if (s[0]._selectionChanged) { F._applyfilterfromfilterrow(); F.focusedfilter = null; s[0]._selectionChanged = false } }) } } else { g(this, d) } break; case "bool": case "boolean": if (this.host.jqxCheckBox) { var v = a('<div tabIndex=0 style="opacity: 0.99; position: absolute; top: 50%; left: 50%; margin-top: -7px; margin-left: -10px;"></div>'); v.appendTo(d); v.jqxCheckBox({ disabled: F.disabled, enableContainerClick: false, animationShowDelay: 0, animationHideDelay: 0, hasThreeStates: true, theme: this.theme, checked: null }); if (B.createfilterwidget) { B.createfilterwidget(B, d, v) } if (y === true || y == "true") { v.jqxCheckBox({ checked: true }) } else { if (y === false || y == "false") { v.jqxCheckBox({ checked: false }) } } B._filterwidget = v; this.addHandler(v, "change", function (f) { if (!F.refreshingfilter) { if (f.args) { F.focusedfilter = null; F._applyfilterfromfilterrow() } } }) } else { g(this, d) } break } }, _getfilterdataadapter: function (b) { var c = this.source._source ? true : false; if (!c) { dataadapter = new a.jqx.dataAdapter(this.source, { autoBind: false, uniqueDataFields: [b.displayfield], autoSort: true, autoSortField: b.displayfield, async: false }) } else { var e = { localdata: this.source.records, datatype: this.source.datatype, async: false }; var d = this; dataadapter = new a.jqx.dataAdapter(e, { autoBind: false, autoSort: true, autoSortField: b.displayfield, async: false, uniqueDataFields: [b.displayfield], beforeLoadComplete: function (f) { var k = new Array(); if (b.cellsformat) { var j = d._getcolumntypebydatafield(b); for (var g = 0; g < f.length; g++) { k.push(f[g]); var h = f[g][b.displayfield]; f[g][b.displayfield + "JQValue"] = h; if (j === "date") { f[g][b.displayfield] = dataadapter.formatDate(h, b.cellsformat, d.gridlocalization) } else { if (j === "number" || j === "float" || j === "int") { f[g][b.displayfield] = dataadapter.formatNumber(h, b.cellsformat, d.gridlocalization) } } } return k } else { return f } } }) } if (b.filteritems && b.filteritems.length > 0) { var e = { localdata: b.filteritems, datatype: this.source.datatype, async: false }; dataadapter = new a.jqx.dataAdapter(e, { autoBind: false, async: false }) } else { if (b.filteritems) { if (b.filteritems._source) { b.filteritems._options.autoBind = false; b.filteritems._options.async = false; return b.filteritems } else { if (a.isFunction(b.filteritems)) { return b.filteritems() } } } } return dataadapter }, refreshfilterrow: function () { if (!this.showfilterrow) { return } this.refreshingfilter = true; this._updatefilterrowui(); this._updatelistfilters(true, true); var h = this.that; var l = this.columns.records.length; for (var d = 0; d < l; d++) { var c = this.columns.records[d]; if (c.filterable) { if (c.filter) { var b = c.filter.getfilters(); if (b.length > 0) { var k = b[0].value; var e = c._filterwidget; var f = c._filterwidget.parent(); if (e != null) { switch (c.filtertype) { case "number": f.find("input").val(k); if (this.host.jqxDropDownList) { var i = c.filter.getoperatorsbyfiltertype("numericfilter"); e.find(".filter").jqxDropDownList("selectIndex", i.indexOf(b[0].condition)) } break; case "date": if (this.host.jqxDateTimeInput) { var k = c.filter.getfilterat(0).filtervalue; if (k != undefined) { if (c.filter.getfilterat(1)) { var g = c.filter.getfilterat(1).filtervalue } else { g = k } a(f.children()[0]).jqxDateTimeInput("setRange", new Date(k), new Date(g)) } } else { e.val(k) } break; case "textbox": case "default": e.val(k); h["_oldWriteText" + e[0].id] = k; break; case "bool": case "boolean": if (!this.host.jqxCheckBox) { e.val(k) } else { a(f.children()[0]).jqxCheckBox({ checked: k }) } break } } } } } } this.refreshingfilter = false }, _destroyedfilters: function () { var g = this.that; var b = this.columns.records.length; for (var f = 0; f < b; f++) { var c = this.columns.records[f]; if (c.filterable) { var h = c._filterwidget; if (c.filtertype == "list" || c.filtertype == "checkedlist") { this.removeHandler(h, "select"); this.removeHandler(h, "close"); h.jqxDropDownList("destroy") } else { if (c.filtertype == "date") { this.removeHandler(h, "valuechanged"); h.jqxDateTimeInput("destroy") } else { if (c.filtertype == "bool") { this.removeHandler(h, "change"); h.jqxCheckBox("destroy") } else { if (c.filtertype == "number") { var d = h.find(".jqx-input"); this.removeHandler(d, "keydown"); var e = a(h.children()[1]); e.jqxDropDownList("destroy") } else { this.removeHandler(h, "keydown") } } } } h.remove() } } }, _updatelistfilters: function (l, k) { var u = this.that; var s = this.columns.records.length; for (var o = 0; o < s; o++) { var p = this.columns.records[o]; if (p.filterable) { if (p.filtertype == "list" || p.filtertype == "checkedlist") { var h = p._filterwidget; if (!l) { if (p.filter == undefined) { h.jqxDropDownList("renderSelection"); continue } } else { var e = this._getfilterdataadapter(p); h.jqxDropDownList({ source: e }); var d = h.jqxDropDownList("getItems"); var n = true; if (d.length != e.records.length + 1) { n = false } if (n) { for (var r = 1; r < d.length; r++) { if (d[r].label != e.records[r - 1][p.displayfield]) { n = false; break } } } if (n && !k) { continue } } var m = p.filtertype == "checkedlist" ? true : false; var d = h.jqxDropDownList("getItems"); var b = h.jqxDropDownList("listBox"); h.jqxDropDownList("dataBind"); if (m) { h.jqxDropDownList({ selectionRenderer: function () { return u.gridlocalization.filterselectstring } }); b.insertAt(this.gridlocalization.filterselectallstring, 0); h.jqxDropDownList("setContent", this.gridlocalization.filterselectstring); b.checkAll(false); if (p.filter) { var g = p.filter.getfilters(); for (var r = 0; r < b.items.length; r++) { var f = b.items[r].label; var q = undefined; a.each(g, function () { var i; if (this.condition == "NOT_EQUAL") { if (f == this.value) { i = false } else { i = true } } else { if (this.condition == "EQUAL") { if (f == this.value) { i = true } else { i = false } } } if (q == undefined && i !== undefined) { q = i } else { if (this.condition == "EQUAL") { q = q || i } else { q = q && i } } }); if (q) { b.checkIndex(r, false, false) } else { b.uncheckIndex(r, false, false) } } b._updateCheckedItems(); var t = b.getCheckedItems().length; if (b.items.length != t && t > 0) { b.host.jqxListBox("indeterminateIndex", 0, true, false) } } } else { b.insertAt({ label: this.gridlocalization.filterchoosestring, value: "" }, 0); h.jqxDropDownList({ selectedIndex: 0 }); if (p.filter) { var g = p.filter.getfilters(); var c = -1; for (var r = 0; r < b.items.length; r++) { var f = b.items[r].label; a.each(g, function () { if (this.condition == "NOT_EQUAL") { return true } if (f == this.value) { c = r; return false } }) } if (c != -1) { b.selectIndex(c) } } } if (d.length < 8) { h.jqxDropDownList("autoDropDownHeight", true) } else { h.jqxDropDownList("autoDropDownHeight", false) } } } } }, _renderfiltercolumn: function () { var b = this.that; if (this.filterable) { if (!this.columns.records) { return } a.each(this.columns.records, function (d, e) { var c = false; if (b.autoshowfiltericon) { if (this.filter) { a(this.filtericon).show(); c = true } else { a(this.filtericon).hide() } } else { if (this.filterable) { a(this.filtericon).show(); c = true } } if (this.align == "right" && !this.renderer) { if (this.element) { if (!c) { this.element.firstChild.firstChild.style.marginRight = "2px" } else { this.element.firstChild.firstChild.style.marginRight = "18px" } } } }) } }, _initcolumntypes: function () { if (this.columns && this.columns.records) { var b = this.source._source.datafields; if (b) { for (var c = 0; c < this.columns.records.length; c++) { var d = this.columns.records[c]; if (d.datatype) { continue } var e = ""; a.each(b, function () { if (this.name == d.displayfield) { if (this.type) { e = this.type } return false } }); if (e != "") { d.datatype = e } else { d.datatype = "" } } } } }, _getcolumntypebydatafield: function (f) { var g = this.that; var e = "string"; var d = g.source.datafields || ((g.source._source) ? g.source._source.datafields : null); if (d) { var i = ""; a.each(d, function () { if (this.name == f.displayfield) { if (this.type) { i = this.type } return false } }); if (i) { return i } } if (f != null) { if (this.dataview.cachedrecords == undefined) { return e } var b = null; if (!this.virtualmode) { if (this.dataview.cachedrecords.length == 0) { return e } b = this.dataview.cachedrecords[0][f.displayfield]; if (b != null && b.toString() == "") { return "string" } } else { a.each(this.dataview.cachedrecords, function () { b = this[f.displayfield]; return false }) } if (b != null) { if (typeof b == "boolean") { e = "boolean" } else { if (a.jqx.dataFormat.isNumber(b)) { e = "number" } else { var h = new Date(b); if (h.toString() == "NaN" || h.toString() == "Invalid Date") { if (a.jqx.dataFormat) { h = a.jqx.dataFormat.tryparsedate(b); if (h != null) { if (h && h.getFullYear()) { if (h.getFullYear() == 1970 && h.getMonth() == 0 && h.getDate() == 1) { var c = new Number(b); if (!isNaN(c)) { return "number" } return "string" } } return "date" } else { e = "string" } } else { e = "string" } } else { e = "date" } } } } } return e }, _getfiltersbytype: function (b) { var c = this.that; var d = ""; switch (b) { case "number": case "float": case "int": d = c.gridlocalization.filternumericcomparisonoperators; break; case "date": d = c.gridlocalization.filterdatecomparisonoperators; break; case "boolean": case "bool": d = c.gridlocalization.filterbooleancomparisonoperators; break; case "string": default: d = c.gridlocalization.filterstringcomparisonoperators; break } return d }, _getfiltertype: function (b) { var c = "stringfilter"; switch (b) { case "number": case "int": case "float": case "decimal": c = "numericfilter"; break; case "boolean": case "bool": c = "booleanfilter"; break; case "date": case "time": c = "datefilter"; break; case "string": c = "stringfilter"; break } return c }, _buildfilter: function (r, l, F) { var f = a(l).find("#filter1" + r.element.id); var G = a(l).find("#filter2" + r.element.id); var J = a(l).find("#filter3" + r.element.id); var k = a(l).find(".filtertext1" + r.element.id); var j = a(l).find(".filtertext2" + r.element.id); var A = k.val(); var y = j.val(); var L = r._getcolumntypebydatafield(F); var t = r._getfiltersbytype(L); var I = new a.jqx.filter(); var w = r._getfiltertype(L); if (r.filtermode === "default") { var E = f.jqxDropDownList("selectedIndex"); var c = G.jqxDropDownList("selectedIndex"); var D = J.jqxDropDownList("selectedIndex"); var e = null; var d = null; if (r.updatefilterconditions) { var p = r.updatefilterconditions(w, I.getoperatorsbyfiltertype(w)); if (p != undefined) { I.setoperatorsbyfiltertype(w, p) } } var q = false; var K = I.getoperatorsbyfiltertype(w)[E]; var J = I.getoperatorsbyfiltertype(w)[D]; var v = K == "NULL" || K == "NOT_NULL"; var h = K == "EMPTY" || K == "NOT_EMPTY"; if (K == undefined) { K = I.getoperatorsbyfiltertype(w)[0] } if (J == undefined) { J = I.getoperatorsbyfiltertype(w)[0] } if (A.length > 0 || v || h) { e = I.createfilter(w, A, K, null, F.cellsformat, r.gridlocalization); I.addfilter(c, e); q = true } var u = J == "NULL" || J == "NOT_NULL"; var g = J == "EMPTY" || J == "NOT_EMPTY"; if (y.length > 0 || u || g) { d = I.createfilter(w, y, J, null, F.cellsformat, r.gridlocalization); I.addfilter(c, d); q = true } if (q) { var C = F.displayfield; this.addfilter(C, I, true) } else { this._clearfilter(r, l, F) } } else { var B = this; var n = false; var x = f.data().jqxListBox.instance; var o = x.getCheckedItems(); if (o.length == 0) { for (var H = 1; H < x.items.length; H++) { var m = x.items[H].value; var b = "not_equal"; var z = I.createfilter(w, m, b, null); I.addfilter(0, z) } n = true } else { if (o.length != x.items.length) { n = true; for (var H = 0; H < o.length; H++) { if (r.gridlocalization.filterselectallstring === o[H].value) { continue } var m = o[H].value; var b = "equal"; var z = I.createfilter(w, m, b, null); var s = 1; I.addfilter(s, z) } } else { n = false } } if (n) { var C = F.displayfield; this.addfilter(C, I, true) } else { var C = F.displayfield; this.removefilter(C, true) } } }, _clearfilter: function (e, c, d) { var b = d.displayfield; this.removefilter(b, true) }, addfilter: function (d, e, c) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } var f = this.getcolumn(d); var b = this._getcolumn(d); if (f == undefined || f == null) { return } f.filter = e; b.filter = e; this.dataview.addfilter(d, e); if (c == true && c != undefined) { this.applyfilters("add") } }, removefilter: function (d, c) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } var e = this.getcolumn(d); var b = this._getcolumn(d); if (e == undefined || e == null) { return } if (e.filter == null) { return } this.dataview.removefilter(d, e.filter); e.filter = null; b.filter = null; if (this.showfilterrow) { this.clearfilterrow(d) } if (c == true || c !== false) { this.applyfilters("remove") } }, applyfilters: function (f) { var c = false; if (this.dataview.filters.length >= 0 && (this.virtualmode || !this.source.localdata)) { if (this.source != null && this.source.filter) { var g = -1; if (this.pageable) { g = this.dataview.pagenum; this.dataview.pagenum = 0 } else { this.vScrollInstance.setPosition(0); this.loadondemand = true; this._renderrows(this.virtualsizeinfo) } if (this.pageable && this.virtualmode) { this.dataview.pagenum = 0 } this.source.filter(this.dataview.filters, this.dataview.records, this.dataview.records.length); if (this.pageable && !this.virtualmode) { this.dataview.pagenum = g } } } if (this.dataview.clearsortdata) { this.dataview.clearsortdata() } if (!this.virtualmode) { var b = this.selectedrowindexes; var d = this.that; this.dataview.refresh(); if (this.dataview.clearsortdata) { if (this.sortcolumn && this.sortdirection) { var e = this.sortdirection.ascending ? "asc" : "desc"; if (!this._loading) { this.sortby(this.sortcolumn, e, null, false) } else { this.sortby(this.sortcolumn, e, null, false, false) } } } } else { if (this.pageable) { this.dataview.updateview(); if (this.gotopage) { this.gotopage(0) } } this.rendergridcontent(false, false); if (this.showfilterrow) { if (typeof f != "string" && a.isEmptyObject(f)) { this.refreshfilterrow() } } this._raiseEvent(13, { filters: this.dataview.filters }); return } if (this.pageable) { this.dataview.updateview(); if (this.gotopage) { this.gotopage(0); this.updatepagerdetails() } } this._updaterowsproperties(); if (!this.groupable || (this.groupable && this.groups.length == 0)) { this._rowdetailscache = new Array(); this.virtualsizeinfo = null; this._pagescache = new Array(); if (this.columns && this.columns.records && this.columns.records.length > 0 && !this.columns.records[0].filtericon) { this.prerenderrequired = true } this.rendergridcontent(true, false); this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo); if (this.showaggregates && this._updatecolumnsaggregates) { this._updatecolumnsaggregates() } } else { this._rowdetailscache = new Array(); this._render(true, true, false, false, false); if (this.showfilterrow) { this._updatefocusedfilter() } this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo) } if (this.showfilterrow) { if (typeof f != "string" && a.isEmptyObject(f)) { this.refreshfilterrow() } } this._raiseEvent(13, { filters: this.dataview.filters }) }, getfilterinformation: function () { var d = new Array(); for (var b = 0; b < this.dataview.filters.length; b++) { var c = this.getcolumn(this.dataview.filters[b].datafield); d[b] = { filter: this.dataview.filters[b].filter, filtercolumn: c.datafield, filtercolumntext: c.text} } return d }, clearfilters: function (b) { var d = this.that; if (this.showfilterrow) { this.clearfilterrow() } if (this.columns.records) { var c = b == true || b !== false; a.each(this.columns.records, function () { d.removefilter(this.displayfield, !c) }) } if (b === false) { return } if (b == true || b !== false) { this.applyfilters("clear") } }, _destroyfilterpanel: function () { var e = a(a.find("#filterclearbutton" + this.element.id)); var d = a(a.find("#filterbutton" + this.element.id)); var h = a(a.find("#filter1" + this.element.id)); var c = a(a.find("#filter2" + this.element.id)); var g = a(a.find("#filter3" + this.element.id)); var f = a(a.find(".filtertext1" + this.element.id)); var b = a(a.find(".filtertext2" + this.element.id)); if (f.length > 0 && b.length > 0) { f.removeClass(); b.removeClass(); f.remove(); b.remove() } if (e.length > 0) { e.jqxButton("destroy"); d.jqxButton("destroy"); this.removeHandler(e, "click"); this.removeHandler(d, "click") } if (h.length > 0) { h.jqxDropDownList("destroy") } if (c.length > 0) { c.jqxDropDownList("destroy") } if (g.length > 0) { g.jqxDropDownList("destroy") } }, _updatefilterpanel: function (r, o, D) { if (r == null || r == undefined) { r = this } var N = r._getcolumntypebydatafield(D); var t = r._getfiltersbytype(N); if (!r.host.jqxDropDownList) { throw new Error("jqxGrid: Missing reference to jqxdropdownlist.js."); return } var g = a(o); var K = g.find("#filterclearbutton" + r.element.id); var k = g.find("#filterbutton" + r.element.id); var f = g.find("#filter1" + r.element.id); var l = g.find("#filter2" + r.element.id); var M = g.find("#filter3" + r.element.id); var j = g.find(".filtertext1" + r.element.id); var h = g.find(".filtertext2" + r.element.id); if (this._hasdatefilter) { var e = j.parent(); var d = h.parent(); e.children().remove(); d.children().remove(); if (D.filtertype == "date") { r._showwhere.text(r.gridlocalization.filtershowrowdatestring); var b = a("<div class='filtertext1" + r.element.id + "' style='margin-top: 3px; margin-bottom: 3px;'></div>"); e.append(b); var m = function (c) { var i = { calendar: r.gridlocalization, todayString: r.gridlocalization.todaystring, clearString: r.gridlocalization.clearstring }; c.jqxDateTimeInput({ disabled: r.disabled, localization: i, rtl: r.rtl, width: r._filterpanelwidth - 15, height: 20, value: null, formatString: D.cellsformat, theme: r.theme }) }; m(b); var b = a("<div class='filtertext2" + r.element.id + "' style='margin-top: 3px; margin-bottom: 3px;'></div>"); d.append(b); m(b) } else { r._showwhere.text(r.gridlocalization.filtershowrowstring); var b = a("<input class='filtertext1" + r.element.id + "' style='height: 20px; margin-top: 3px; margin-bottom: 3px;' type='text'></input>"); e.append(b); var m = function (c) { c.addClass(r.toThemeProperty("jqx-input")); c.addClass(r.toThemeProperty("jqx-widget-content")); c.addClass(r.toThemeProperty("jqx-rc-all")); c.width(r._filterpanelwidth - 15) }; m(b); var b = a("<input class='filtertext2" + r.element.id + "' style='height: 20px; margin-top: 3px; margin-bottom: 3px;' type='text'></input>"); d.append(b); m(b) } var j = g.find(".filtertext1" + r.element.id); var h = g.find(".filtertext2" + r.element.id) } j.val(""); h.val(""); this.removeHandler(k, "click"); this.addHandler(k, "click", function () { r._buildfilter(r, o, D); r._closemenu() }); this.removeHandler(K, "click"); this.addHandler(K, "click", function () { r._clearfilter(r, o, D); r._closemenu() }); if (this.filtermode === "default") { if (f.jqxDropDownList("source") != t) { f.jqxDropDownList({ enableBrowserBoundsDetection: false, source: t }); M.jqxDropDownList({ enableBrowserBoundsDetection: false, source: t }) } if (N == "boolean" || N == "bool") { f.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: 0 }); M.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: 0 }) } else { var G = false; if (t && t.length) { if (t.length < 5) { G = true } } f.jqxDropDownList({ autoDropDownHeight: G, selectedIndex: 2 }); M.jqxDropDownList({ autoDropDownHeight: G, selectedIndex: 2 }) } l.jqxDropDownList({ selectedIndex: 0 }); var y = D.filter; var J = new a.jqx.filter(); var w = ""; switch (N) { case "number": case "int": case "float": case "decimal": w = "numericfilter"; n = J.getoperatorsbyfiltertype("numericfilter"); break; case "boolean": case "bool": w = "booleanfilter"; n = J.getoperatorsbyfiltertype("booleanfilter"); break; case "date": case "time": w = "datefilter"; n = J.getoperatorsbyfiltertype("datefilter"); break; case "string": w = "stringfilter"; n = J.getoperatorsbyfiltertype("stringfilter"); break } if (y != null) { var e = y.getfilterat(0); var d = y.getfilterat(1); var H = y.getoperatorat(0); if (r.updatefilterconditions) { var n = []; var q = r.updatefilterconditions(w, n); if (q != undefined) { for (var L = 0; L < q.length; L++) { q[L] = q[L].toUpperCase() } y.setoperatorsbyfiltertype(w, q); n = q } } var v = "default"; if (e != null) { var C = n.indexOf(e.comparisonoperator); var z = e.filtervalue; j.val(z); f.jqxDropDownList({ selectedIndex: C, animationType: v }) } if (d != null) { var B = n.indexOf(d.comparisonoperator); var x = d.filtervalue; h.val(x); M.jqxDropDownList({ selectedIndex: B, animationType: v }) } if (y.getoperatorat(0) == undefined) { l.jqxDropDownList({ selectedIndex: 0, animationType: v }) } else { if (y.getoperatorat(0) == "and" || y.getoperatorat(0) == 0) { l.jqxDropDownList({ selectedIndex: 0 }) } else { l.jqxDropDownList({ selectedIndex: 1 }) } } } if (r.updatefilterpanel) { r.updatefilterpanel(f, M, l, j, h, k, K, y, w, n) } if (!this._hasdatefilter || (this._hasdatefilter && D.filtertype != "date")) { j.focus(); setTimeout(function () { j.focus() }, 10) } } else { var u = r._getfilterdataadapter(D); var w = r._getfiltertype(N); if (D.cellsformat) { f.jqxListBox({ displayMember: D.displayfield, valueMember: D.displayfield + "JQValue", source: u }) } else { f.jqxListBox({ displayMember: D.displayfield, valueMember: D.displayfield, source: u }) } f.jqxListBox("insertAt", r.gridlocalization.filterselectallstring, 0); var E = f.data().jqxListBox.instance; E.checkAll(false); var A = this; if (D.filter) { E.uncheckAll(false); var s = D.filter.getfilters(); for (var I = 0; I < E.items.length; I++) { var F = E.items[I].value; a.each(s, function () { if (this.condition == "NOT_EQUAL") { if (F != this.value) { E.uncheckIndex(I, false, false); return false } } else { if (this.condition == "EQUAL") { if (F == this.value) { E.checkIndex(I, false, false); return false } } } }) } E._updateCheckedItems(); var p = E.getCheckedItems().length; if (E.items.length != p && p > 0) { E.host.jqxListBox("indeterminateIndex", 0, true, false) } if (p === E.items.length - 1) { E.host.jqxListBox("checkIndex", 0, true, false) } } } }, _initfilterpanel: function (x, b, c, o) { if (x == null || x == undefined) { x = this } b[0].innerHTML = ""; var s = a("<div class='filter' style='margin-left: 7px;'></div>"); b.append(s); var n = a("<div class='filter' style='margin-top: 3px; margin-bottom: 3px;'></div>"); n.text(x.gridlocalization.filtershowrowstring); this._showwhere = n; var u = a("<div class='filter' id='filter1" + x.element.id + "'></div>"); var h = a("<div class='filter' id='filter2" + x.element.id + "' style='margin-bottom: 3px;'></div>"); var r = a("<div class='filter' id='filter3" + x.element.id + "'></div>"); var e = x._getcolumntypebydatafield(c); if (!u.jqxDropDownList) { throw new Error("jqxGrid: jqxdropdownlist.js is not loaded."); return } var p = x._getfiltersbytype(e); this._hasdatefilter = false; this._filterpanelwidth = o; if (this.columns && this.columns.records) { for (var t = 0; t < this.columns.records.length; t++) { if (this.columns.records[t].filtertype == "date") { this._hasdatefilter = true; break } } } var k = a("<div class='filter'><input class='filtertext1" + x.element.id + "' style='height: 20px; margin-top: 3px; margin-bottom: 3px;' type='text'></input></div>"); var m = k.find("input"); m.addClass(this.toThemeProperty("jqx-input")); m.addClass(this.toThemeProperty("jqx-widget-content")); m.addClass(this.toThemeProperty("jqx-rc-all")); m.width(o - 15); var l = a("<div class='filter'><input class='filtertext2" + x.element.id + "' style='height: 20px; margin-top: 3px;' type='text'></input></div>"); var j = l.find("input"); j.addClass(this.toThemeProperty("jqx-input")); j.addClass(this.toThemeProperty("jqx-widget-content")); j.addClass(this.toThemeProperty("jqx-rc-all")); j.width(o - 15); if (x.rtl) { m.css("direction", "rtl"); j.css("direction", "rtl") } var g = a("<div class='filter' style='height: 25px; margin-left: 20px; margin-top: 7px;'></div>"); var f = a('<span tabIndex=0 id="filterbutton' + x.element.id + '" class="filterbutton" style="padding: 4px 12px; margin-left: 2px;">' + x.gridlocalization.filterstring + "</span>"); g.append(f); var v = a('<span tabIndex=0 id="filterclearbutton' + x.element.id + '" class="filterclearbutton" style="padding: 4px 12px; margin-left: 5px;">' + x.gridlocalization.filterclearstring + "</span>"); g.append(v); f.jqxButton({ height: 20, theme: x.theme }); v.jqxButton({ height: 20, theme: x.theme }); var w = function (y) { if (y) { if (y.text().indexOf("case sensitive") != -1) { var i = y.text(); i = i.replace("case sensitive", "match case"); y.text(i) } y.css("font-family", x.host.css("font-family")); y.css("font-size", x.host.css("font-size")); y.css("top", "1px"); y.css("position", "relative"); return y } return "" }; if (this.filtermode === "default") { s.append(n); s.append(u); u.jqxDropDownList({ _checkForHiddenParent: false, rtl: x.rtl, enableBrowserBoundsDetection: false, selectedIndex: 2, width: o - 15, height: 20, dropDownHeight: 150, dropDownWidth: o - 15, selectionRenderer: w, source: p, theme: x.theme }); s.append(k); var q = new Array(); q[0] = x.gridlocalization.filterandconditionstring; q[1] = x.gridlocalization.filterorconditionstring; h.jqxDropDownList({ _checkForHiddenParent: false, rtl: x.rtl, enableBrowserBoundsDetection: false, autoDropDownHeight: true, selectedIndex: 0, width: 60, height: 20, source: q, selectionRenderer: w, theme: x.theme }); s.append(h); r.jqxDropDownList({ _checkForHiddenParent: false, rtl: x.rtl, enableBrowserBoundsDetection: false, selectedIndex: 2, width: o - 15, height: 20, dropDownHeight: 150, dropDownWidth: o - 15, selectionRenderer: w, source: p, theme: x.theme }); s.append(r); s.append(l) } else { s.append(n); s.append(u); u.jqxListBox({ rtl: x.rtl, _checkForHiddenParent: false, checkboxes: true, selectedIndex: 2, width: o - 15, height: 120, theme: x.theme }); var d = true; x.addHandler(u, "checkChange", function (z) { if (!d) { return } if (z.args.label != x.gridlocalization.filterselectallstring) { d = false; u.jqxListBox("checkIndex", 0, true, false); var i = u.jqxListBox("getCheckedItems"); var y = u.jqxListBox("getItems"); if (i.length == 1) { u.jqxListBox("uncheckIndex", 0, true, false) } else { if (y.length != i.length) { u.jqxListBox("indeterminateIndex", 0, true, false) } } d = true } else { d = false; if (z.args.checked) { u.jqxListBox("checkAll", false) } else { u.jqxListBox("uncheckAll", false) } d = true } }) } s.append(g); if (x.updatefilterpanel) { x.updatefilterpanel(u, r, h, k, l, f, v, null, null, p) } } }) })(jQuery);

